plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.visang.aidt.lms'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// 공통 변수
ext {
    springCloudVersion = "2021.0.8"
    sprinfoxVersion = "3.0.0"
    querydslVersion = "5.0.0"
    apacheCommonsVersion = "3.12.0"
    jwtVersion = "0.12.6"
}

ext['tomcat.version'] = '9.0.108'

// 저장소
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // General
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'
    implementation group: 'io.nats', name: 'jnats', version: '2.18.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.5'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.5'
    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    // Database Client
    implementation 'com.mysql:mysql-connector-j:8.3.0'

    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    // Jakarta RS 라이브러리 추가
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:2.1.6'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    implementation 'com.querydsl:querydsl-apt:5.0.0'

    // OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.7.0'

    // Test
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.3'

    // Spring Security Test 의존성을 직접 추가하고 Logback을 제거
    testImplementation("org.springframework.security:spring-security-test") {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // Karate
    testImplementation 'com.intuit.karate:karate-junit5:1.2.0'

    implementation 'com.aventstack:extentreports:5.1.1'
    implementation 'org.webjars.npm:chart.js:2.9.4'

    // Hateoas
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // Commons
    implementation "org.apache.commons:commons-lang3:${apacheCommonsVersion}"

    // P6Spy(쿼리 로그)
    implementation 'p6spy:p6spy:3.9.0'

    // AWS
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.529')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'

    // 보안
    implementation 'org.owasp.encoder:encoder:1.2.3'

    // Mockito
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    // ETC (기타 라이브러리 추가)
    implementation 'org.json:json:20231013'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'com.google.code.gson:gson'
    implementation 'org.modelmapper:modelmapper:3.2.0'
    testImplementation('com.tngtech.archunit:archunit-junit5:0.23.1')
    testImplementation 'org.reflections:reflections:0.10.2'
    implementation 'commons-io:commons-io:2.11.0' // file upload 관련 FileUtils

    implementation "io.opentelemetry:opentelemetry-api:1.24.0"
    implementation "io.micrometer:micrometer-registry-prometheus:1.10.5"

    // PDF 관련 라이브러리
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '3.0.0'
    implementation group: 'de.rototor.pdfbox', name: 'graphics2d', version: '3.0.0'
    implementation 'commons-fileupload:commons-fileupload:1.4'
//    implementation 'commons-io:commons-io:2.4'

    implementation 'org.springframework.kafka:spring-kafka:2.8.11'

    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Batch 프로파일 JVM 메모리 설정
springBoot {
    buildInfo()
}

tasks.named('bootRun') {
    // 환경변수로만 배치 관련 프로파일 확인하여 JVM 메모리 옵션 적용
    def batchProfiles = ['math-prod-job', 'engl-prod-job', 'math-beta-job', 'engl-beta-job', 'math-beta2-job', 'engl-beta2-job', 'math-release-job', 'engl-release-job', 'vs-dev-job', 'vs-stg-job', 'vs-prod-job', 'beta-2e-math-job', 'beta-2e-engl-job', 'vs-math-develop-job', 'vs-engl-develop-job', 'vs-math-prod-job', 'vs-engl-prod-job']
    
    def envProfiles = System.getenv('SPRING_PROFILES_ACTIVE')
    if (envProfiles && batchProfiles.any { envProfiles.contains(it) }) {
        jvmArgs = ['-Xms4g', '-Xmx4g']
    }
}

sonar {
  properties {
    property "sonar.projectKey", "vcoudapi"
    property "sonar.projectName", "vcoudapi"
    property "sonar.java.binaries", "./build/classes"
  }
}

targetCompatibility = JavaVersion.VERSION_17
