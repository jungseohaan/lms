<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.dashboard.mapper.TchDsbdMapper">
    <!-- 2차 캐시 적용 -->
    <!--<cache/>-->

    <sql id = "languageCodesSql">
        <foreach collection="languageCodes" item="c" open="(" separator="," close=")">
            #{c}
        </foreach>
    </sql>

    <select id="findUnitInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findUnitInfo */
        select
            *
        from
            (
                select row_number() over () as unitNum, b.val, b.id as meta_id
                from aidt_lcms.meta a
                        inner join aidt_lcms.meta b
                            on a.code = b.description
                                and b.is_active = 1
                                and b.name = 'studyMap1'
                        inner join aidt_lcms.meta c
                            on c.id = b.parent_id
                                and c.is_active = 1
                        left join aidt_lcms.meta_extension d
                            on b.meta_extension_id = d.meta_extension_id
                where 1=1
                    and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                    and a.is_active = 1
                    and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                order by b.parent_id, b.code    /* 20240806 studyMap 정렬순서 수정 */
            ) a
        where 1=1
        <if test="unitNum != null and unitNum != '' ">
            and a.unitNum = #{unitNum}
        </if>
    </select>

    <select id="findSubmInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findSubmInfo */
        select a.std_ed_dt as submDt
              , count(*) as submCnt
              /*, sum(cnt) as submCnt*/
        from (
                select a.unit_num
                     , DATE_FORMAT(a.std_ed_dt, '%Y%m%d') as std_ed_dt
                     , a.stdt_id
                     , count(1) as cnt
                from (
                        select b.unit_num
                             , b.stdt_id
                             , a.std_ed_dt
                             , a.std_at
                        from aidt_lms.slf_std_result_info a
                             inner join aidt_lms.slf_std_info b on a.std_id = b.id
                            inner join aidt_lms.tc_cla_mb_info tcmi on b.cla_id = tcmi.cla_id and b.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                        where 1=1
                            and b.ed_at = 'Y'
                            and b.textbk_id = #{textbkId}
                            and b.cla_id = #{claId}
                        union all
                        select b.unit_num
                             , b.stdt_id
                             , a.std_ed_dt
                             , a.std_at
                        from aidt_lms.slf_ai_std_result_info a
                        inner join aidt_lms.slf_ai_std_info b on a.std_ai_id = b.id
                        inner join aidt_lms.tc_cla_mb_info tcmi on b.cla_id = tcmi.cla_id and b.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                        where 1=1
                            and b.ed_at = 'Y'
                            and b.textbk_id = #{textbkId}
                            and b.cla_id = #{claId}
                ) a
                where 1=1
                and a.std_at = 'Y'
                group by
                        DATE_FORMAT(a.std_ed_dt, '%Y%m%d')
                        , a.stdt_id
        ) a
        where 1=1
        group by  a.std_ed_dt
        order by  a.std_ed_dt
    </select>

    <select id="findTchDsbdStatusSelflrnChapterDetail" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStatusSelflrnChapterDetail */
        select
            stdCnt,
            (totalCnt - stdCnt) nonStdCnt
        from
            (
                select count(distinct a.stdt_id) as stdCnt
                    , (select count(*) as totalCnt from aidt_lms.tc_cla_mb_info where cla_id= #{claId} and actvtn_at = 'Y') as totalCnt
                from (
                        select distinct a.stdt_id
                        from aidt_lms.slf_std_info a
                        inner join aidt_lms.slf_std_result_info b
                            on a.id = b.std_id and b.std_at = 'Y' and DATE_FORMAT(b.std_ed_dt, '%Y%m%d') = #{submDt}
                        INNER JOIN aidt_lms.tc_cla_mb_info c
                                   ON a.stdt_id = c.stdt_id
                                       AND c.cla_id = a.cla_id
                                       AND c.actvtn_at = 'Y'
                        where 1=1
                          and a.textbk_id = #{textbkId}
                          and a.cla_id = #{claId}
                        union
                        select distinct a.stdt_id
                        from aidt_lms.slf_ai_std_info a
                        inner join aidt_lms.slf_ai_std_result_info b
                            on a.id = b.std_ai_id and b.std_at = 'Y' and DATE_FORMAT(b.std_ed_dt, '%Y%m%d') = #{submDt}
                        INNER JOIN aidt_lms.tc_cla_mb_info c
                                   ON a.stdt_id = c.stdt_id
                                       AND c.cla_id = a.cla_id
                                       AND c.actvtn_at = 'Y'
                        where 1=1
                          and a.textbk_id = #{textbkId}
                          and a.cla_id = #{claId}
                ) a
            ) t
    </select>

    <select id="findChapterDetailStntInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findChapterDetailStntInfo */
        select a.stdt_id
             , (select flnm from aidt_lms.user where user_id = a.stdt_id) as flnm
             , (select num from aidt_lms.stdt_reg_info sri where sri.user_id = a.stdt_id) as num
             , SEC_TO_TIME(IFNULL(b.time, 0)) as time
             , IFNULL(b.cnt, 0) as cnt
        from aidt_lms.tc_cla_mb_info a
            left outer join (

                select t.stdt_id
                     , sum(t.time) as time
                     /* , count(t.module_id) as cnt */
                     , sum(t.cnt) as cnt
                from (
                        select
                                b.stdt_id,
                                ifnull(SUM(TIME_TO_SEC(TIMEDIFF(a.std_ed_dt, a.std_st_dt))), 0) as time,
                                a.module_id,
                                count(1) as cnt
                        from aidt_lms.slf_std_result_info a
                        inner join aidt_lms.slf_std_info b on a.std_id = b.id
                        where b.ed_at = 'Y'
                          and a.std_id in ( select id
                                            from aidt_lms.slf_std_info
                                            where 1=1
                                            and textbk_id = #{textbkId}
                                            and cla_id = #{claId}
                                          )
                          and DATE_FORMAT(a.std_ed_dt, '%Y%m%d') = #{submDt}

                        /*  and ifnull(a.std_ed_dt, 0)  <![CDATA[>]]>  ifnull(a.std_st_dt, 0) */ /*테스트 데이터에 시작일자가 더 큰 경우가 있음*/
                        group by b.stdt_id
                        union all
                        select
                                b.stdt_id,
                                ifnull(SUM(TIME_TO_SEC(TIMEDIFF(a.std_ed_dt, a.std_st_dt))), 0) as time,
                                a.module_id,
                                count(1) as cnt
                        from aidt_lms.slf_ai_std_result_info a
                        inner join aidt_lms.slf_ai_std_info b on a.std_ai_id = b.id
                        where b.ed_at = 'Y'
                          and a.std_ai_id in (select id
                                                from aidt_lms.slf_ai_std_info
                                                where 1=1
                                                and textbk_id = #{textbkId}
                                                and cla_id = #{claId}
                                            )
                          and DATE_FORMAT(a.std_ed_dt, '%Y%m%d') = #{submDt}
                          /* and ifnull(a.std_ed_dt, 0)  <![CDATA[>]]>  ifnull(a.std_st_dt, 0) */ /*테스트 데이터에 시작일자가 더 큰 경우가 있음*/
                        group by b.stdt_id
                ) t
                where 1=1
                group by t.stdt_id
            ) b on a.stdt_id = b.stdt_id
        where a.cla_id = #{claId}
          and a.actvtn_at ='Y'
        order by num
     </select>

    <select id="findTchDsbdStatusChapterUnitList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStatusChapterUnitList */
        select 	null as meta_id
                , null as unit_num
                , '전체 단원' as unitNm
                , sum(case when t.avgScr <![CDATA[ >= ]]> 80 then 1 else 0 end) as gdUsdScrCnt /* 상 기준 학생수  */
                , sum(case when t.avgScr <![CDATA[ < ]]> 80 and t.avgScr <![CDATA[ >= ]]> 50 then 1 else 0 end) as avUsdScrCnt /* 중 기준 학생수 */
                , sum(case when t.avgScr <![CDATA[ < ]]> 50 then 1 else 0 end) as bdUsdScrCnt /* 하 기준 학생수 */
        from 	(
                select 	suui.stdt_id
                , round(AVG(usd_scr),0) as avgScr /* 학생별 평균 점수 */
                from 	aidt_lms.std_usd_unit_info suui
                join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                where 	1=1
                    and 	suui.textbk_id = #{textbookId}
                    and     suui.cla_id = #{claId}
                    and     suui.std_at = 'Y'
                group by suui.stdt_id
        ) t
        having sum(case when t.avgScr <![CDATA[ >= ]]> 70 then 1 else 0 end) is not null  /* t 가 null 이면 데이터 조회가 안되게 조건추가 */
        union all
        SELECT b.id                                  as meta_id
            , row_number() over (order by b.`code`) as unit_num
            , b.val                                 AS unitNm
            , sum(case when tcmi.stdt_id is not null and round(usd_scr,0) <![CDATA[ >= ]]> 80 then 1 else 0 end)
            , sum(case when tcmi.stdt_id is not null and round(usd_scr,0) <![CDATA[ < ]]> 80 and round(usd_scr,0) <![CDATA[ >= ]]> 50 then 1 else 0 end)
            , sum(case when tcmi.stdt_id is not null and round(usd_scr,0) <![CDATA[ < ]]> 50 then 1 else 0 end)
        FROM aidt_lcms.meta a
        inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
        inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
        left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
        left join aidt_lms.std_usd_unit_info suui on b.id = suui.meta_id and suui.textbk_id = #{textbookId} and suui.cla_id = #{claId}
        left join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
        left join aidt_lcms.meta m on m.id = suui.meta_id
        WHERE a.is_active = 1
        and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId})
        group by b.id
        order by unit_num;

    </select>

    <!-- 단원의 학생 이해도 분포 조회 (상,중,하 별 각 인원 수 집계) -->
    <select id="findTchDsbdStatusChapterUnitInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStatusChapterUnitInfo */
        select
            suui.meta_id /* 단원ID */
            , suui.unit_num /* 단원 번호 */
            , MAX(m.val) as unitNm /* 단원 명 */
            , ROUND(CAST(AVG(suui.usd_scr) AS DECIMAL(10,2)), 0) AS avgUsdScr /* 단원의 평균 이해도 점수 */
            , sum(case when round(usd_scr,0)  <![CDATA[ >= ]]> 80 then 1 else 0 end) as gdUsdScrCnt /* 상 기준 학생수  */
            , sum(case when round(usd_scr,0)  <![CDATA[ <  ]]> 80 and round(usd_scr,0) >= 50 then 1 else 0 end) as avUsdScrCnt /* 중 기준 학생수 */
            , sum(case when round(usd_scr,0)  <![CDATA[ < ]]> 50 then 1 else 0 end) as bdUsdScrCnt /* 하 기준 학생수 */
        from aidt_lms.std_usd_unit_info suui
        join aidt_lms.tc_cla_mb_info tcmi
            on tcmi.cla_id = suui.cla_id
            and tcmi.stdt_id = suui.stdt_id
            and tcmi.actvtn_at = 'Y'
        left join aidt_lcms.meta m
            on m.id = suui.meta_id
        where 1=1
            and suui.textbk_id = #{textbookId}
            and suui.cla_id = #{claId}
            and suui.std_at = 'Y'
            and tcmi.user_id = #{userId}
        <if test="unitNum != null and unitNum != '' ">
            and suui.unit_num = #{unitNum}
        </if>
        group by suui.meta_id
               , suui.unit_num
        order by unit_num
    </select>

    <select id="findTchDsbdStudentsByUnitLevel" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStudentsByUnitLevel */
        select
            suui.meta_id /* 단원ID */
            , suui.unit_num /* 단원 번호 */
            , suui.stdt_id /* 학생ID */
            , u.flnm /* 학생이름 */
            , CASE
                WHEN ROUND(usd_scr,0) <![CDATA[ >= ]]> 80 THEN '1'
                WHEN ROUND(usd_scr,0) <![CDATA[ < ]]> 80 AND ROUND(usd_scr,0) >= 50 THEN '2'
                WHEN ROUND(usd_scr,0) <![CDATA[ < ]]> 50 THEN '3'
              END AS level /* 상중하 구분 */
            , ROUND(usd_scr,0) AS usd_scr /* 이해도 점수 */
        FROM aidt_lms.std_usd_unit_info suui
        JOIN aidt_lms.tc_cla_mb_info tcmi ON tcmi.cla_id = suui.cla_id AND tcmi.stdt_id = suui.stdt_id
        LEFT JOIN aidt_lms.user u ON u.user_id = suui.stdt_id
        WHERE 1=1
        AND suui.textbk_id = #{textbookId}
        AND suui.cla_id = #{claId}
        AND suui.std_at = 'Y'
        AND tcmi.user_id = #{userId}
        AND tcmi.actvtn_at = 'Y'
        <if test="unitNum != null and unitNum != '' ">
            AND suui.unit_num = #{unitNum}
        </if>
        ORDER BY
            u.flnm
    </select>

    <select id="findTchDsbdStatusChapterUnitDetail" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStatusChapterUnitDetail */
        <if test="metaId != null and metaId != '' ">
            /* metaId exists */
            select 	suui.meta_id /* 단원ID */
                    , suui.unit_num /* 단원 번호 */
                    , MAX(m.val) as unitNm /* 단원 명 */
                    , sum(case when round(usd_scr,0) <![CDATA[ >= ]]> 80 then 1 else 0 end) as gdUsdScrCnt  /* 상 기준 학생수 */
                    , sum(case when round(usd_scr,0) <![CDATA[ < ]]> 80 and round(usd_scr,0) <![CDATA[ >= ]]> 50 then 1 else 0 end) as avUsdScrCnt  /* 중 기준 학생수 */
                    , sum(case when round(usd_scr,0) <![CDATA[ < ]]> 50 then 1 else 0 end) as bdUsdScrCnt  /* 하 기준 학생수 */
            from 	aidt_lms.std_usd_unit_info suui
            join aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
            left join aidt_lcms.meta m on m.id = suui.meta_id
            where 	1=1
                and 	tcmi.cla_id = #{claId}
                and 	suui.textbk_id = #{textbookId}
                and     suui.meta_id = #{metaId}
                and     suui.std_at = 'Y'
            group by suui.meta_id
                    , suui.unit_num
            order by unit_num
        </if>
        <if test="metaId == null or metaId == '' ">
            /* metaId not exists */
            select 	null as meta_id /* 단원ID */
                    , null as unit_num /* 단원 번호 */
                    , '전체단원' as unitNm /* 단원 명 */
                    , sum(case when t.avgScr <![CDATA[ >= ]]> 80 then 1 else 0 end) as gdUsdScrCnt /* 상 기준 학생수 */
                    , sum(case when t.avgScr <![CDATA[ < ]]> 80 and t.avgScr <![CDATA[ > ]]> 50 then 1 else 0 end) as avUsdScrCnt /* 중 기준 학생수 */
                    , sum(case when t.avgScr <![CDATA[ <= ]]> 50 then 1 else 0 end) as bdUsdScrCnt /* 하 기준 학생수 */
            from 	(
                    select 	suui.stdt_id
                    , round(AVG(usd_scr),0) as avgScr /* 학생별 평균 점수 */
                    from 	aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                    where 	1=1
                        and 	tcmi.cla_id = #{claId}
                        and 	suui.textbk_id = #{textbookId}
                        and     suui.std_at = 'Y'
                    group by suui.stdt_id
            ) t
        </if>

    </select>

    <select id="findTchDsbdStatusChapterUnitDetail_chptStdtList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStatusChapterUnitDetail_chptStdtList */
        <if test="metaId != null and metaId != '' ">
            /* metaId exists */
            select 	suui.stdt_id
                    , u.flnm
                    , tcmi.cla_id
                    , round(suui.usd_scr, 2) as usd_scr
                    , case when round(suui.usd_scr,0) <![CDATA[ >= ]]> 80 then '상'
                            when round(suui.usd_scr,0) <![CDATA[ < ]]> 80 and round(suui.usd_scr,0) >= 50 then '중'
                            else '하' end resultGradeNm
            from 	aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = suui.stdt_id  and tcmi.actvtn_at = 'Y'
                                                                                      and suui.cla_id = tcmi.cla_id
                    left join aidt_lms.user u on u.user_id = suui.stdt_id
            where 	1=1
                and 	tcmi.cla_id = #{claId}
                and 	suui.textbk_id = #{textbookId}
                and 	suui.meta_id = #{metaId}
                and     suui.std_at = 'Y'
            order by u.flnm
        </if>
        <if test="metaId == null or metaId == '' ">
            /* metaId not exists */
            select 	suui.stdt_id
                    , MAX(u.flnm) as flnm
                    , MAX(tcmi.cla_id) as cla_id
                    , ROUND(AVG(suui.usd_scr), 0) as usd_scr
                    , case when ROUND(AVG(suui.usd_scr), 0) <![CDATA[ >= ]]> 80 then '상'
                            when ROUND(AVG(suui.usd_scr), 0) <![CDATA[ < ]]> 80 and ROUND(AVG(suui.usd_scr), 0) >= 50 then '중'
                            when ROUND(AVG(suui.usd_scr), 0) <![CDATA[ < ]]> 50 then '하' end resultGradeNm
            from 	aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                                                                                     and suui.cla_id = tcmi.cla_id
                    left join aidt_lms.user u on u.user_id = suui.stdt_id
            where 	1=1
                and 	tcmi.cla_id = #{claId}
                and 	suui.textbk_id = #{textbookId}
                and     suui.std_at = 'Y'
            group by suui.stdt_id
            order by u.flnm
        </if>
    </select>

    <select id="findBrandId" parameterType="map" resultType="java.lang.Integer">
        /* TchDsbdMapper.findBrandId */
        select brand_id from aidt_lcms.textbook where id = #{textbookId}
    </select>

    <!-- 가장 최근 수업 정보 및 요약 현황 -->
    <select id="selectTchDsbdSummary" parameterType="map" resultType="camelHashMap">
          select /* TchDsbdMapper.selectTchDsbdSummary */
	      (
            select concat(A.mdfy_dt,A.yoil) as rcntClsDt
              from ( select DATE_FORMAT(max(mdfy_dt),'%y.%m.%d') as mdfy_dt
                          , case when DAYOFWEEK(max(mdfy_dt)) = 1 then '(일)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 2 then '(월)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 3 then '(화)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 4 then '(수)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 5 then '(목)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 6 then '(금)'
                                 when DAYOFWEEK(max(mdfy_dt)) = 7 then '(토)'
                             end as yoil
                       from aidt_lms.tc_lastlesson
                      where wrter_id  = #{userId}
                        and cla_id    = #{claId}
                        and textbk_id =  #{textbookId}
                   ) AS A
          ) AS rcntClsDt,
          (
          <include refid="incTchDsdbSearch"></include>
            select
                a.id_path_nm
            from
                curriculum a
                inner join aidt_lms.tc_lastlesson tl
                   on a.wrter_id   = tl.wrter_id
                      and a.cla_id     = tl.cla_id
                      and a.textbk_id  = tl.textbk_id
                      and a.textbk_idx_id = tl.textbk_idx_id
                      and a.`key`         = tl.crcul_id
            order by id_path
          ) as rcntClsCurri,
          (
            <include refid="incTchDsdbSearch"></include>
            select
                a.key
            from
                curriculum a
                inner join aidt_lms.tc_lastlesson tl
                    on a.wrter_id   = tl.wrter_id
                        and a.cla_id     = tl.cla_id
                        and a.textbk_id  = tl.textbk_id
                        and a.textbk_idx_id = tl.textbk_idx_id
                        and a.`key`         = tl.crcul_id
            order by id_path
          ) as rcntClsCurriKey,
         (
              select count(*)
                from aidt_lms.task_info a
               where 1=1
                 and a.cla_id    = #{claId}
                 and a.textbk_id =  #{textbookId}
                 and a.task_stts_cd = '2'
            ) as pgTaskCnt,
            (
             select count(*)
               from aidt_lms.evl_info a
              where
                and a.cla_id   = #{claId}
                and a.textbook_id  =  #{textbookId}
                and a.evl_stts_cd  = '2'
            ) as pgEvalCnt,
            (
             select COUNT(distinct a.stdt_id) AS completed_students_count
               from aidt_lms.tdy_md_detail a
              where a.cla_id = #{claId}
                and DATE_FORMAT( a.reg_dt, '%Y%m%d' ) = DATE_FORMAT( NOW() , '%Y%m%d' )
            ) as cdtnUpdCnt,
            (select
                CASE WHEN (select brand_id from aidt_lcms.textbook a where a.id = #{textbookId}) = 1
                    then (
                        select DATE_FORMAT(max(a.mdfy_dt), "%Y-%m-%d %H:%i") as btchUpdDt
                        from aidt_lms.usd_cac_src_info a
                        where 1=1
                        and a.textbk_id = #{textbookId}
                        and a.cla_id = #{claId}
                    )
                    else (
                        select DATE_FORMAT(max(a.mdfy_dt), "%Y-%m-%d %H:%i") as btchUpdDt
                        from aidt_lms.usd_ach_src2_info a
                        where 1=1
                          and a.textbk_id = #{textbookId}
                          and a.cla_id = #{claId}
                        and a.std_dt = (
                            select max(b.std_dt)
                            from aidt_lms.usd_ach_src2_info b
                            where 1=1
                              and   b.cla_id          = #{claId}
                              and   b.textbk_id       = #{textbookId}
        )
                    )
                end) as btchUpdDt
       from dual
    </select>

    <!-- 가장 최근 수업 정보 및 요약 현황 -->
    <select id="selectTchDsbdSummaryNew" parameterType="map" resultType="camelHashMap">
        select /* TchDsbdMapper.selectTchDsbdSummaryNew */
            (
                select
                    DATE_FORMAT(A.mdfy_dt, "%Y-%m-%d %H:%i:%s") as rcntClsDt
                from (
                        select
                            max(mdfy_dt) as mdfy_dt
                        from aidt_lms.tc_lastlesson
                        where cla_id    = #{claId}
                          and textbk_id =  #{textbookId}
                ) AS A
            ) AS rcntClsDt,
        (
            <include refid="incTchDsdbSearch"></include>
            select a.id_path_nm from curriculum a
            where a.`key` = (
                select crcul_id from aidt_lms.tc_lastlesson
                where textbk_id = #{textbookId} and cla_id = #{claId} and wrter_id = #{userId}
            )
        ) as rcntClsCurri
        , (select crcul_id from aidt_lms.tc_lastlesson
                where textbk_id = #{textbookId} and cla_id = #{claId} and wrter_id = #{userId}) as crculId
        from dual
    </select>

    <select id="selectTchDsbdParticipantCnt" parameterType="map" resultType="Integer">
        /* TchDsbdMapper.selectTchDsbdParticipantCnt */
        select
            /* 참여인원 수 : 기본탭의 경우 std_dta_result_info 생성되어 있지 않기때문에 std_dta_result_info 갯수가 참여인원수라고 보면됨 */
            (select count(mamoym_id) from aidt_lms.std_dta_result_info
             where textbk_tab_id = c.id) as participant_cnt /* 참여인원 */
        from aidt_lms.tc_curriculum a
                 inner join aidt_lms.tc_lastlesson b
                            on a.textbk_id = b.textbk_id and a.wrter_id = b.wrter_id and a.cla_id = b.cla_id and a.`key` = b.crcul_id
                 inner join aidt_lms.tab_info c
                            on b.textbk_id = c.textbk_id and b.wrter_id = c.wrter_id and b.cla_id = c.cla_id and b.crcul_id = c.crcul_id
                                and c.tab_add_at = 'N'
                                and c.setCategory = (
                                    select id from aidt_lcms.meta where name = 'setCategory' and code = 'textbook'
                                ) /* 배포된 - 교과서 탭 기준 */
        where 1=1
          and a.textbk_id =  #{textbookId}
          and a.cla_id    = #{claId}
        order by c.id
            limit 1
    </select>

    <select id="selectTchDsbdStdtCnt" parameterType="map" resultType="int">
        /* TchDsbdMapper.selectTchDsbdStdtCnt */
        select
            count(stdt_id) from aidt_lms.tc_cla_mb_info as stdt_cnt
        where
          cla_id = #{claId}
          and actvtn_at ='Y'
    </select>

    <select id="selectTchDsbdLowerLevelStdtCnt" parameterType="map" resultType="int">
        /* TchDsbdMapper.selectTchDsbdLowerLevelStdtCnt */
        with baseData as (
            select
                buildData.mamoym_id
                , round(sum(case when errata = 1 then 100 else 0 end) / count(*), 2) as avg
                , count(*)
            from (
                select
                    sdri.mamoym_id
                    , if(sdrd.sub_mit_anw is not null or sdrd.sub_mit_anw_url is not null or
                            sdrd.tch_errata_chg_at = 'Y', 'Y', 'N') as subm_at
                    , sdrd.mrk_ty
                    , sdrd.errata
                from aidt_lms.tab_info ti
                inner join aidt_lms.std_dta_result_info sdri on sdri.textbk_tab_id = ti.id
                inner join aidt_lms.std_dta_result_detail sdrd
                    on sdrd.dta_result_id = sdri.id
                    and sdrd.src_detail_id = 0 /* 다른 문제 풀기 제외 */
                where ti.id = (
                                select id
                                from aidt_lms.tab_info
                                where crcul_id = (
                                                select crcul_id
                                                from aidt_lms.tc_lastlesson
                                                where textbk_id = #{textbookId}
                                                and cla_id = #{claId}
                                                and wrter_id = (
                                                                select distinct user_id
                                                                from aidt_lms.tc_cla_mb_info
                                                                where cla_id = #{claId}
                                                                and actvtn_at = 'Y'
                                                    )
                                        )
                                and textbk_id = #{textbookId}
                                and cla_id = #{claId}
                                and setCategory = 31
                                and tab_nm = '교과서'
                                limit 1
                    )
                and (if(sdrd.sub_mit_anw is not null or sdrd.sub_mit_anw_url is not null or
                        sdrd.tch_errata_chg_at = 'Y', 'Y', 'N')) = 'Y'
            ) as buildData
            group by mamoym_id
        )
        select count(*) as lowLvlCnt
        from baseData
        where 1 = 1
          and case
                  when avg >= 70 then 1
                  when avg > 30 then 2
                  else 3
              end = 3
    </select>

    <select id="selectTchDsbdCdtnUpdCnt" parameterType="map" resultType="int">
        /* TchDsbdMapper.selectTchDsbdCdtnUpdCnt */
        select count(*) AS completed_students_count
        from aidt_lms.tdy_md_detail a
        where a.cla_id = #{claId}
            and a.tch_chk_at = 'N'
    </select>

    <select id="selectBtchUpDt" parameterType="map" resultType="string">
        /* TchDsbdMapper.selectBtchUpDt */
        select
            CASE WHEN (select brand_id from aidt_lcms.textbook a where a.id = #{textbookId}) = 1
                     then (
                    select DATE_FORMAT(max(a.mdfy_dt), "%Y-%m-%d %H:%i") as btchUpdDt
                    from aidt_lms.usd_cac_src_info a
                    where 1=1
                      and a.textbk_id = #{textbookId}
                      and a.cla_id = #{claId}
                    )
                    else (
                     select DATE_FORMAT(max(a.mdfy_dt), "%Y-%m-%d %H:%i") as btchUpdDt
                     from aidt_lms.usd_ach_src2_info a
                     where 1=1
                       and a.textbk_id = #{textbookId}
                       and a.cla_id = #{claId}
                    )
                    end
                as btchUpdDt
    </select>

    <!-- 가장 최근 수업 정보 및 요약 현황 -->
    <sql id = "incTchDsdbSearch">
        with recursive curriculum as (
            select
                a.id,
                a.wrter_id,
                a.cla_id,
                a.textbk_id,
                a.textbk_idx_id,
                a.key,
                a.parent,
                a.text,
                cast(lpad(a.key,5,'0') as char(100) character set utf8) as id_path,
                cast(a.text as char(1000) character set utf8) as id_path_nm,
                1 as depth
            from
                aidt_lms.tc_curriculum a
            where
              1=1
              and a.cla_id   = #{claId}
              and a.textbk_id = #{textbookId}
              and a.parent = 0
            union all
            select
                b.id,
                b.wrter_id,
                b.cla_id,
                b.textbk_id,
                b.textbk_idx_id,
                b.key,
                b.parent,
                b.text,
                concat(c.id_path, ' > ', lpad(b.key,5,'0')) as id_path,
                concat(c.id_path_nm, ' > ', b.text) as id_path_nm,
                1 + c.depth as depth
            from
                aidt_lms.tc_curriculum b
           inner join curriculum c
              on c.wrter_id = b.wrter_id
                 and c.cla_id   = b.cla_id
                 and c.textbk_id = b.textbk_id
                 and c.key = b.parent
        )
    </sql>

    <!-- 단원별 지식요인 정보(콤보박스) -->
    <select id="selectTchDsbdChptUnitKwgCombo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdChptUnitKwgCombo */
        with lastlesson as (
            /* 마지막 수업한 위치 커리큘럼에 대한 학습맵 조회 */
            select
                d.id as id,
                c.id as kwgMainId
            from
                aidt_lms.tc_lastlesson a
                inner join aidt_lcms.textbookcurriculum_meta_map b
                    on a.textbk_idx_id = b.textbookIndex_id
                        and a.crcul_id = b.`key`
                        and b.meta_name = 'studyMap_1'
                inner join aidt_lcms.meta c
                    on b.meta_id = c.id
                inner join aidt_lcms.textbookcurriculum_meta_map b2
                    on a.textbk_idx_id = b2.textbookIndex_id
                        and a.crcul_id = b2.`key`
                        and b2.meta_name = 'studyMap1'
                inner join aidt_lcms.meta d
                    on b2.meta_id = d.id
            where
                1=1
                and a.textbk_id = #{textbookId}
                and a.cla_id = #{claId}
        order by c.parent_id, c.code    /* 20240806 studyMap 정렬순서 수정 */
        )
        SELECT
             T.meta_id
            ,T.unit_num
            ,T.unit_nm
            ,T.kwg_main_id
            ,T.kwgNm
            ,T.std_at
            ,round(T.usd_scr) as usd_scr
            ,case
                when ((select max(id) from lastlesson) is not null)
                then (select if(count(1) > 0, 'Y', 'N') from lastlesson where T.meta_id = id)
                else (if(T.unit_num = 1 , 'Y', 'N'))
            end as unitLastLesnAt
            ,case
                when ((select max(id) from lastlesson) is not null)
                then (select if(T.std_at = 'Y' and count(1) > 0, 'Y', 'N') from lastlesson where T.meta_id = id and T.kwg_main_id = kwgMainId)
                else (if(T.rowNo = 1 , 'Y', 'N'))
            end as kwgLastLesnAt
        FROM (
            SELECT
                X.id AS meta_id,
                DENSE_RANK() OVER (order by X.id) AS unit_num,
                X.unit_nm,
                Y.id AS kwg_main_id,
                Y.val AS kwgNm,
                ifnull((
                    select if(count(1) > 0, 'Y','N') as std_at
                      from aidt_lms.std_usd_info a
                      join aidt_lms.tc_cla_mb_info cm
                        ON cm.cla_id = a.cla_id
                       AND cm.stdt_id = a.stdt_id
                       AND cm.actvtn_at = 'Y'
                     where a.cla_id = #{claId}
                       and a.meta_id = X.id
                       and a.unit_num = unit_num
                       and a.kwg_main_id = Y.id
                       and a.textbk_id = #{textbookId}
                       and a.std_at = 'Y'
                ),'N') AS std_at,
                (
                    select ifnull(round(avg(usd_scr),2),0) as usd_scr
                      from aidt_lms.std_usd_info a
                      join aidt_lms.tc_cla_mb_info cm
                        ON cm.cla_id = a.cla_id
                       AND cm.stdt_id = a.stdt_id
                       AND cm.actvtn_at = 'Y'
                     where a.cla_id = #{claId}
                       and a.meta_id = X.id
                       and a.unit_num = unit_num
                       and a.kwg_main_id = Y.id
                       and a.textbk_id = #{textbookId}
                       and a.std_at = 'Y'
                ) as usd_scr,
                ROW_NUMBER() OVER (order by Y.id) as rowNo
            FROM
            (
                SELECT
                    b.id,
                    b.parent_id,
                    b.code,
                    b.val AS unit_nm,
                    b.depth
                FROM
                    aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta b ON a.code = b.description
                  AND b.is_active = 1
                  AND b.name = 'studyMap1'
                INNER JOIN aidt_lcms.meta c
                    on c.id = b.parent_id
                        and c.is_active = 1
                WHERE
                    a.parent_id = (
                        SELECT curriBook FROM aidt_lcms.textbook WHERE id = #{textbookId}
                    )
                    and a.is_active = 1
                <if test="metaId != null and metaId !=''">
                    and b.id = #{metaId}
                </if>
            ) X
            INNER JOIN aidt_lcms.meta Y ON Y.code LIKE CONCAT(X.code, '-%')
              AND Y.name = 'studyMap_1' and Y.is_active = 1
            where 1=1
            <if test="kwgMainId != null and kwgMainId !=''">
                and Y.id = #{kwgMainId}
            </if>
            ORDER BY
                Y.parent_id,
                Y.code              /* 20240806 studyMap 정렬순서 수정 */
        ) T
    </select>

    <!-- 단원별 정보(콤보박스) -->
    <select id="selectTchDsbdChptUnitCombo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdInfoMapper.selectTchDsbdChptUnitCombo */
        with lastlesson as (
            /* 마지막 수업한 위치 커리큘럼에 대한 학습맵 조회 */
            select
                (select cast(meta_id as unsigned) from aidt_lcms.v_curri_tree where textbk_id = #{textbookId} and id = c.id) as id
            from
                aidt_lms.tc_lastlesson a
                inner join aidt_lcms.textbookcurriculum_meta_map b
                    on a.textbk_idx_id = b.textbookIndex_id
                        and a.crcul_id = b.`key`
                        and b.meta_name = 'studyMap_1'
                inner join aidt_lcms.meta c
                    on b.meta_id = c.id
            where
                1=1
                and a.textbk_id = #{textbookId}
                and a.cla_id = #{claId}
            limit 1
        )
        select
            X.meta_id,
            X.unit_num,
            X.unit_nm,
            case
                when ((select max(id) from lastlesson) is not null)
                then (select if(count(1) > 0, 'Y', 'N') from lastlesson where X.meta_id = id)
                else (if(X.unit_num = 1 , 'Y', 'N'))
            end as unitLastLesnAt
         from (
        SELECT
            X.id AS meta_id,
            DENSE_RANK() OVER (order by X.id) AS unit_num,
            X.unit_nm
        FROM
        (
            SELECT
                b.id,
                b.parent_id,
                b.code,
                b.val AS unit_nm,
                b.depth
             FROM
                aidt_lcms.meta a
            INNER JOIN aidt_lcms.meta b ON a.code = b.description
              AND b.is_active = 1
              AND b.name = 'studyMap1'
            INNER JOIN aidt_lcms.meta c
                on c.id = b.parent_id
                    and c.is_active = 1
            WHERE
                  a.parent_id = (
                        SELECT curriBook FROM aidt_lcms.textbook WHERE id = #{textbookId}
                  )
                  and a.is_active = 1
            <if test="metaId != null and metaId !=''">
              and b.id = #{metaId}
            </if>
        ) X
        ORDER BY
            X.parent_id,
            X.code              /* 20240806 studyMap 정렬순서 수정 */
        ) X
    </select>

    <!-- 단원별_개념별 학생 분포 정보 -->
    <select id="selectTchDsbdCncptUsdList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCncptUsdList */
        SELECT
            a.meta_id,
            a.unit_num,
            a.kwg_main_id,
            a.std_dt,
            DATE_FORMAT(a.std_dt, '%m/%d') AS stdDtLabel,
            a.usd_scr
        FROM (
                 SELECT
                     hist.meta_id,
                     hist.unit_num,
                     hist.kwg_main_id,
                     DATE_FORMAT(hist.std_dt, '%Y%m%d') AS std_dt,
                     -- 반이동된 학생 데이터를 제외한 보정된 점수 계산
                     IFNULL(ROUND(
                                    CASE
                                        WHEN transfer_data.transfer_score IS NOT NULL AND transfer_data.transfer_count > 0
                                            THEN
                                            CASE
                                                WHEN (original_counts.student_count - transfer_data.transfer_count) > 0
                                                    THEN ((hist.usd_scr * original_counts.student_count) - transfer_data.transfer_score) / (original_counts.student_count - transfer_data.transfer_count)
                                                ELSE 0
                                                END
                                        ELSE hist.usd_scr
                                        END, 2), 0) AS usd_scr,
                     LAG(IFNULL(ROUND(hist.usd_scr, 2), 0)) OVER (ORDER BY hist.std_dt) AS prev_usd_scr
                 FROM aidt_lms.std_usd_unit_kwg_day_hist hist
                          LEFT JOIN (
                     -- 반이동된 학생들의 해당 날짜 점수 합계 조회
                     SELECT
                         DATE_FORMAT(ucs.std_dt, '%Y%m%d') as std_dt,
                         ucs.cla_id,
                         ucs.textbk_id,
                         ucs.unit_num,
                         ucs.meta_id,
                         ucs.kwg_main_id,
                         SUM(CASE WHEN ucs.std_cnt > 0 THEN IFNULL((ucs.x1/NULLIF(ucs.x2, 0)) * 100, 0) ELSE 0 END) as transfer_score,
                         COUNT(CASE WHEN ucs.std_cnt > 0 THEN 1 END) as transfer_count
                     FROM (
                              SELECT
                                  ucs_inner.std_dt,
                                  ucs_inner.stdt_id,
                                  ucs_inner.cla_id,
                                  ucs_inner.textbk_id,
                                  ucs_inner.unit_num,
                                  ucs_inner.meta_id,
                                  ucs_inner.kwg_main_id,
                                  IFNULL(COUNT(CASE WHEN ucs_inner.std_at = 'Y' THEN 1 END), 0) as std_cnt,
                                  SUM(
                                          (IFNULL(ucs_inner.gd_gnrl_rgt_asw_cnt, 0) * 1)
                                              + (IFNULL(ucs_inner.gd_gnrl_pat_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_hnt_gnrl_rgt_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_hnt_gnrl_pat_asw_cnt, 0) * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.gd_sm_exm_rgt_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_sm_exm_pat_asw_cnt, 0) * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_gnrl_rgt_asw_cnt, 0) * 6)
                                              + (IFNULL(ucs_inner.av_up_gnrl_pat_asw_cnt, 0) * 0.5 * 6)
                                              + (IFNULL(ucs_inner.av_up_hnt_gnrl_rgt_asw_cnt, 0) * 6 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_hnt_gnrl_pat_asw_cnt, 0) * 6 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_sm_exm_rgt_asw_cnt, 0) * 6 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_sm_exm_pat_asw_cnt, 0) * 6 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_gnrl_rgt_asw_cnt, 0) * 5)
                                              + (IFNULL(ucs_inner.av_gnrl_pat_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_hnt_gnrl_rgt_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_hnt_gnrl_pat_asw_cnt, 0) * 5 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_sm_exm_rgt_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_sm_exm_pat_asw_cnt, 0) * 5 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_gnrl_rgt_asw_cnt, 0) * 3)
                                              + (IFNULL(ucs_inner.av_lw_gnrl_pat_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_hnt_gnrl_rgt_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_hnt_gnrl_pat_asw_cnt, 0) * 3 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_sm_exm_rgt_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_sm_exm_pat_asw_cnt, 0) * 3 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.bd_gnrl_rgt_asw_cnt, 0) * 2)
                                              + (IFNULL(ucs_inner.bd_gnrl_pat_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_hnt_gnrl_rgt_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_hnt_gnrl_pat_asw_cnt, 0) * 2 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.bd_sm_exm_rgt_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_sm_exm_pat_asw_cnt, 0) * 2 * 0.5 * 0.5)
                                  ) as x1,
                                  SUM(
                                          IFNULL(ucs_inner.gd_exm_num, 0)
                                              + IFNULL(ucs_inner.av_up_exm_num, 0) * 6
                                              + IFNULL(ucs_inner.av_exm_num, 0) * 5
                                              + IFNULL(ucs_inner.av_lw_exm_num, 0) * 3
                                              + IFNULL(ucs_inner.bd_exm_num, 0) * 2
                                  ) as x2
                              FROM usd_cac_src_info ucs_inner
                              WHERE ucs_inner.std_at = 'Y'
                                AND ucs_inner.textbk_id = #{textbookId}
                                AND (
                                        IFNULL(ucs_inner.gd_exm_num, 0) + IFNULL(ucs_inner.av_up_exm_num, 0) + IFNULL(ucs_inner.av_exm_num, 0) + IFNULL(ucs_inner.av_lw_exm_num, 0) + IFNULL(ucs_inner.bd_exm_num, 0)
                                        ) > 0
                                -- 반이동된 학생만 필터링
                                AND EXISTS (
                                  SELECT 1
                                  FROM aidt_lms.tc_cla_mb_info schh
                                  WHERE schh.stdt_id = ucs_inner.stdt_id
                                    AND schh.actvtn_at = 'N'
                                    AND schh.cla_id = #{claId}
                              )
                              GROUP BY ucs_inner.std_dt, ucs_inner.stdt_id, ucs_inner.cla_id, ucs_inner.textbk_id, ucs_inner.unit_num, ucs_inner.meta_id, ucs_inner.kwg_main_id
                          ) ucs
                     GROUP BY ucs.std_dt, ucs.cla_id, ucs.textbk_id, ucs.unit_num, ucs.meta_id, ucs.kwg_main_id
                 ) transfer_data
                                    ON DATE_FORMAT(hist.std_dt, '%Y%m%d') = transfer_data.std_dt
                                        AND hist.cla_id = transfer_data.cla_id
                                        AND hist.textbk_id = transfer_data.textbk_id
                                        AND hist.unit_num = transfer_data.unit_num
                                        AND hist.meta_id = transfer_data.meta_id
                                        AND hist.kwg_main_id = transfer_data.kwg_main_id
                          LEFT JOIN (
                     -- 원본 학생 수 조회 (전체 학생 수)
                     SELECT
                         DATE_FORMAT(std_dt, '%Y%m%d') as std_dt,
                         cla_id,
                         textbk_id,
                         unit_num,
                         meta_id,
                         kwg_main_id,
                         COUNT(DISTINCT stdt_id) as student_count
                     FROM usd_cac_src_info
                     WHERE std_at = 'Y'
                       AND textbk_id = #{textbookId}
                       AND cla_id = #{claId}
                     GROUP BY std_dt, cla_id, textbk_id, unit_num, meta_id, kwg_main_id
                 ) original_counts
                                    ON DATE_FORMAT(hist.std_dt, '%Y%m%d') = original_counts.std_dt
                                        AND hist.cla_id = original_counts.cla_id
                                        AND hist.textbk_id = original_counts.textbk_id
                                        AND hist.unit_num = original_counts.unit_num
                                        AND hist.meta_id = original_counts.meta_id
                                        AND hist.kwg_main_id = original_counts.kwg_main_id
                 WHERE hist.textbk_id = #{textbookId}
                   AND hist.meta_id = #{metaId}
                   AND hist.cla_id = #{claId}
                   AND hist.std_at = 'Y'
                   AND hist.kwg_main_id = #{kwgMainId}
                   AND (original_counts.student_count - IFNULL(transfer_data.transfer_count, 0)) > 0
             ) AS a
                 INNER JOIN (
            SELECT DISTINCT
                DATE_FORMAT(ed_dt, '%Y%m%d') AS ed_dt,
                meta_id
            FROM (
                     /* 학습자료 */
                     SELECT
                         CASE WHEN tch_errata_chg_at = 'Y' THEN sdrd.tch_errata_chg_dt
                              ELSE IFNULL(DATE_FORMAT(sdrd.eak_ed_dt, '%Y-%m-%d'), DATE_FORMAT(sdrd.mdfy_dt, '%Y-%m-%d')) END AS ed_dt,
                         amm.meta_id
                     FROM aidt_lms.tab_info ti
                              INNER JOIN aidt_lms.std_dta_result_info sdri
                                         ON ti.id = sdri.textbk_tab_id
                              INNER JOIN aidt_lms.std_dta_result_detail sdrd
                                         ON sdri.id = sdrd.dta_result_id
                                             AND sdrd.eak_at = 'Y'
                                             AND sdrd.mrk_ty <![CDATA[<>]]> 3
                              INNER JOIN aidt_lcms.article_meta_map amm
                                         ON amm.article_id = sdrd.dta_iem_id
                                             AND amm.sub_id = sdrd.sub_id
                                             AND amm.meta_name = 'studyMap_1'
                                             AND amm.meta_id = #{kwgMainId}
                     WHERE ti.cla_id = #{claId}
                       AND ti.textbk_id = #{textbookId}

                     UNION

                     /* 평가 */
                     SELECT
                         DATE_FORMAT(
                                 CASE
                                     WHEN ei.rpt_othbc_dt IS NULL THEN ei.mrk_cp_dt
                                     WHEN ei.mrk_cp_dt > ei.rpt_othbc_dt THEN ei.mrk_cp_dt
                                     ELSE ei.rpt_othbc_dt
                                     END,
                                 '%Y-%m-%d'
                         ) AS ed_dt,
                         amm.meta_id
                     FROM aidt_lms.evl_info ei
                              JOIN aidt_lms.evl_result_info eri
                                   ON ei.id = eri.evl_id
                                       AND ei.evl_stts_cd = 5
                                       AND eri.mrk_cp_at = 'Y'
                                       AND ei.rpt_othbc_at = 'Y'
                              JOIN aidt_lms.evl_result_detail erd
                                   ON eri.id = erd.evl_result_id
                                       AND erd.eak_at = 'Y'
                                       AND erd.mrk_ty <![CDATA[<>]]> 3
                              INNER JOIN aidt_lcms.article_meta_map amm
                                         ON amm.article_id = erd.evl_iem_id
                                             AND amm.sub_id = erd.sub_id
                                             AND amm.meta_name = 'studyMap_1'
                                             AND amm.meta_id = #{kwgMainId}
                     WHERE ei.cla_id = #{claId}
                       AND ei.textbook_id = #{textbookId}

                     UNION

                     /* 과제 */
                     SELECT
                         DATE_FORMAT(
                                 CASE
                                     WHEN ti.rpt_othbc_dt IS NULL THEN ti.mrk_cp_dt
                                     WHEN ti.mrk_cp_dt > ti.rpt_othbc_dt THEN ti.mrk_cp_dt
                                     ELSE ti.rpt_othbc_dt
                                     END,
                                 '%Y-%m-%d'
                         ) AS ed_dt,
                         amm.meta_id
                     FROM aidt_lms.task_info ti
                              JOIN aidt_lms.task_result_info tri
                                   ON ti.id = tri.task_id
                                       AND ti.task_stts_cd = 5
                                       AND tri.subm_at = 'Y'
                                       AND ti.rpt_othbc_at = 'Y'
                              JOIN aidt_lms.task_result_detail trd
                                   ON tri.id = trd.task_result_id
                                       AND trd.eak_at = 'Y'
                                       AND trd.mrk_ty <![CDATA[<>]]> 3
                                       AND trd.mrk_cp_at = 'Y'
                              INNER JOIN aidt_lcms.article_meta_map amm
                                         ON amm.article_id = trd.task_iem_id
                                             AND amm.sub_id = trd.sub_id
                                             AND amm.meta_name = 'studyMap_1'
                                             AND amm.meta_id = #{kwgMainId}
                     WHERE ti.cla_id = #{claId}
                       AND ti.textbk_id = #{textbookId}

                     UNION

                     /* 자기주도학습 (선택학습/AI학습) */
                     SELECT
                         DATE_FORMAT(ssri.std_ed_dt, '%Y-%m-%d') AS ed_dt,
                         amm.meta_id
                     FROM aidt_lms.slf_std_info ssi
                              JOIN aidt_lms.slf_std_result_info ssri
                                   ON ssi.id = ssri.std_id
                                       AND ssi.ed_at = 'Y'
                              INNER JOIN aidt_lcms.article_meta_map amm
                                         ON amm.article_id = ssri.module_id
                                             AND amm.sub_id = ssri.sub_id
                                             AND amm.meta_name = 'studyMap_1'
                                             AND amm.meta_id = #{kwgMainId}
                     WHERE ssi.cla_id = #{claId}
                       AND ssi.textbk_id = #{textbookId}
                 ) AS combined_dates
        ) AS b
        ON a.std_dt = b.ed_dt AND a.kwg_main_id = b.meta_id
        ORDER BY a.std_dt
    </select>

    <!-- 개념별 이해도 상세 - 학습일자별 학생수  -->
    <select id="selectTchDsbdConceptUsdCnt" parameterType="map" resultType="camelHashMap">
        <![CDATA[
        select  /* TchDsbdMapper.selectTchDsbdConceptUsdCnt */
            DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d')),'%Y-%m-%d') as stdDt ,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then 1 else 0 end) as gdUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then 1 else 0 end) as avUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) < 50 then 1 else 0 end) as bdUsdScrCnt
        from
            aidt_lms.tc_cla_mb_info b
            inner join aidt_lms.std_usd_stdt_unit_kwg_day_hist a
                on a.stdt_id = b.stdt_id
                    and a.cla_id = b.cla_id
                    and a.textbk_id = #{textbookId}
                    and a.meta_id   = #{metaId}
                    and a.kwg_main_id = #{kwgMainId}
                    and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                    and a.std_at = 'Y'
       where b.cla_id  = #{claId}
         and b.actvtn_at = 'Y'
       group by DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d'))  ,'%Y-%m-%d')
       ]]>
    </select>

    <!-- 개념별 이해도 상세 - 단원별 지식요인별 학생 분포 정보  -->
    <select id="selectTchDsbdConceptUsdDetail" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdConceptUsdDetail */
        <![CDATA[
        select
              b.stdt_id,
              (select flnm from aidt_lms.user where user_id = b.stdt_id) as flnm,
              b.cla_id,
              ifnull(round(a.usd_scr, 2),0) as usd_scr,
              CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then '상'
                   WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then '중'
                   WHEN ifnull(round(a.usd_scr,0),0) < 50 then '하' end as resultGradeNm
        ]]>
        from
            aidt_lms.tc_cla_mb_info b
            inner join aidt_lms.std_usd_stdt_unit_kwg_day_hist a
                on a.stdt_id = b.stdt_id
                    and a.cla_id = b.cla_id
                    and a.textbk_id = #{textbookId}
                    and a.meta_id   = #{metaId}
                    and a.kwg_main_id = #{kwgMainId}
                    and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                    and a.std_at = 'Y'
       where 1=1
         and b.cla_id  = #{claId}
         and b.actvtn_at = 'Y'
        group by b.stdt_id
    </select>

    <!--전체단원-->
    <select id="selectTchDsbdCncptUsdAllUnitList" parameterType="map" resultType="camelHashMap">
        /* 전체단원의 개념별 이해도 조회 TchDsbdMapper.selectTchDsbdCncptUsdAllUnitList */
        SELECT
            std_dt,
            DATE_FORMAT(std_dt, '%m/%d') AS stdDtLabel,
            usd_scr
        FROM (
                 SELECT
                     DATE_FORMAT(a.std_dt, '%Y%m%d') AS std_dt,
                     IFNULL(ROUND(AVG(a.usd_scr), 0), 0) AS usd_scr,
                     LAG(IFNULL(ROUND(AVG(a.usd_scr), 0), 0)) OVER (ORDER BY a.std_dt) AS prev_usd_scr
                 FROM (
                          -- 각 날짜별, 학생별 평균 계산
                          SELECT
                              a.std_dt,
                              a.stdt_id,
                              IFNULL(AVG(a.usd_scr), 0) AS usd_scr
                          FROM aidt_lms.std_usd_unit_day_hist a
                          JOIN aidt_lms.tc_cla_mb_info cm
                            ON cm.cla_id = a.cla_id
                           AND cm.stdt_id = a.stdt_id
                           AND cm.actvtn_at = 'Y'
                          WHERE 1=1
                            AND a.textbk_id = #{textbookId}
                            AND a.cla_id = #{claId}
                            AND a.std_at = 'Y'
                          GROUP BY a.std_dt, a.stdt_id
                      ) AS a
                 GROUP BY a.std_dt
             ) AS subquery
        INNER JOIN (
            SELECT DISTINCT DATE_FORMAT(ed_dt, '%Y%m%d') AS ed_dt
            FROM (
                /* 학습자료 */
                SELECT CASE WHEN tch_errata_chg_at  = 'Y' THEN sdrd.tch_errata_chg_dt
                            ELSE IFNULL(DATE_FORMAT(sdrd.eak_ed_dt, '%Y-%m-%d'), DATE_FORMAT(sdrd.mdfy_dt, '%Y-%m-%d')) END AS ed_dt
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sdri
                    ON ti.id = sdri.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail sdrd
                    ON sdri.id = sdrd.dta_result_id
                        AND sdrd.eak_at = 'Y'      /* 응시 여부 */
                        AND sdrd.mrk_ty <![CDATA[<>]]> 3       /* 채점 불가 항목(3) 제외 */
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                /* 평가 */
                SELECT DATE_FORMAT(
                             CASE
                               WHEN ei.rpt_othbc_dt IS NULL THEN ei.mrk_cp_dt
                               WHEN ei.mrk_cp_dt > ei.rpt_othbc_dt THEN ei.mrk_cp_dt
                               ELSE ei.rpt_othbc_dt
                             END,
                             '%Y-%m-%d'
                       ) AS ed_dt
                FROM aidt_lms.evl_info ei
                JOIN aidt_lms.evl_result_info eri
                    ON ei.id = eri.evl_id
                        AND ei.evl_stts_cd = 5    /* 채점완료 */
                        AND eri.mrk_cp_at = 'Y'    /* 채점 완료 여부 */
                        AND ei.rpt_othbc_at = 'Y'
                JOIN aidt_lms.evl_result_detail erd
                    ON eri.id = erd.evl_result_id
                        AND erd.eak_at = 'Y'       /* 응시 여부 */
                        AND erd.mrk_ty <![CDATA[<>]]> 3        /* 채점 불가 항목(3) 제외 */
                WHERE ei.cla_id = #{claId}
                AND ei.textbook_id = #{textbookId}

                UNION

                /* 과제 */
                SELECT DATE_FORMAT(
                         CASE
                           WHEN ti.rpt_othbc_dt IS NULL THEN ti.mrk_cp_dt
                           WHEN ti.mrk_cp_dt > ti.rpt_othbc_dt THEN ti.mrk_cp_dt
                           ELSE ti.rpt_othbc_dt
                         END,
                         '%Y-%m-%d'
                       ) AS ed_dt
                FROM aidt_lms.task_info ti
                JOIN aidt_lms.task_result_info tri
                    ON ti.id = tri.task_id
                        AND ti.task_stts_cd = 5
                        AND tri.subm_at = 'Y'      /* 제출 여부 */
                        AND ti.rpt_othbc_at = 'Y'
                JOIN aidt_lms.task_result_detail trd
                    ON tri.id = trd.task_result_id
                        AND trd.eak_at = 'Y'       /* 응시 여부 */
                        AND trd.mrk_ty <![CDATA[<>]]> 3        /* 채점 불가 항목(3) 제외 */
                        AND trd.mrk_cp_at = 'Y'    /* 채점 완료 여부 */
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                /* 자기주도학습 (선택학습/AI학습) */
                SELECT DATE_FORMAT(ssri.std_ed_dt, '%Y-%m-%d') AS ed_dt
                FROM aidt_lms.slf_std_info ssi
                JOIN aidt_lms.slf_std_result_info ssri
                    ON ssi.id = ssri.std_id
                        AND ssi.ed_at = 'Y'
                WHERE ssi.cla_id = #{claId}
                AND ssi.textbk_id = #{textbookId}
            ) AS combined_dates
        ) AS b
        ON subquery.std_dt = b.ed_dt
        ORDER BY subquery.std_dt
    </select>

    <select id="selectTchDsbdCncptUsdAllUnitGradeCnt" parameterType="map" resultType="camelHashMap">
      /* TchDsbdMapper.selectTchDsbdCncptUsdAllUnitGradeCnt */
        /* 개념별 이해도 - 전체단원에 대한 상/중/하 갯수 조회 */
    <![CDATA[
        select
            DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d')),'%Y-%m-%d') as stdDt ,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then 1 else 0 end) as gdUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then 1 else 0 end) as avUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) < 50 then 1 else 0 end) as bdUsdScrCnt
        from
            aidt_lms.tc_cla_mb_info b
                inner join (
                select
                    a.std_dt,
                    a.textbk_id,
                    a.cla_id,
                    a.stdt_id,
                    ifnull(avg(a.usd_scr),0) as usd_scr
                from aidt_lms.std_usd_unit_day_hist a
                where 1=1
                  and a.cla_id = #{claId}
                  and a.textbk_id = #{textbookId}
                  and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                  and a.std_at = 'Y'
                group by a.std_dt, a.textbk_id, a.cla_id, a.stdt_id
            ) a
           on a.stdt_id = b.stdt_id
               and a.cla_id = b.cla_id
        where b.cla_id  = #{claId}
          and b.actvtn_at = 'Y'
        group by DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d'))  ,'%Y-%m-%d')
    ]]>
    </select>

    <select id="selectTchDsbdConceptUsdAllUnitDetail" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdConceptUsdAllUnitDetail */
        /* 개념별 이해도 - 전체단원 - 학생별 정보 조회(이름, 반, 이해도, 상/중/하)*/
        <![CDATA[
        select
            b.stdt_id,
            (select flnm from aidt_lms.user where user_id = b.stdt_id) as flnm,
            b.cla_id,
            ifnull(round(a.usd_scr,0),0) as usd_scr,
            CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then '상'
                 WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then '중'
                 WHEN ifnull(round(a.usd_scr,0),0) < 50 then '하' end as resultGradeNm
        from
            aidt_lms.tc_cla_mb_info b
                inner join (
                select
                    a.std_dt,
                    a.textbk_id,
                    a.cla_id,
                    a.stdt_id,
                    ifnull(avg(a.usd_scr),0) as usd_scr
                from aidt_lms.std_usd_unit_day_hist a
                where 1=1
                  and a.cla_id = #{claId}
                  and a.textbk_id = #{textbookId}
                  and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                  and a.std_at = 'Y'
                group by a.std_dt, a.textbk_id, a.cla_id, a.stdt_id
            ) a
                           on a.stdt_id = b.stdt_id
                               and a.cla_id = b.cla_id
        where b.cla_id  = #{claId}
          and b.actvtn_at = 'Y'
        group by b.stdt_id
        ]]>
    </select>
    <!--// 전체 단원 -->

    <!--단원의 지식요인 전체-->
    <select id="selectTchDsbdCncptUsdUnitAllKwgList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCncptUsdUnitAllKwgList */
        /* 단원의 지식요인 전체에 대한 이해도 조회 */
        SELECT
            a.meta_id,
            a.unit_num,
            a.std_dt,
            DATE_FORMAT(a.std_dt, '%m/%d') AS stdDtLabel,
            a.usd_scr
        FROM (
                 SELECT
                     hist.meta_id,
                     hist.unit_num,
                     DATE_FORMAT(hist.std_dt, '%Y%m%d') AS std_dt,
                     -- 반이동된 학생 데이터를 제외한 보정된 점수 계산
                     IFNULL(ROUND(
                                    CASE
                                        WHEN transfer_data.transfer_score IS NOT NULL AND transfer_data.transfer_count > 0 THEN
                                            CASE
                                                WHEN (original_counts.student_count - transfer_data.transfer_count) > 0 THEN
                                                    ((hist.usd_scr * original_counts.student_count) - transfer_data.transfer_score)
                                                        / (original_counts.student_count - transfer_data.transfer_count)
                                                ELSE 0
                                                END
                                        ELSE hist.usd_scr
                                        END, 2), 0) AS usd_scr,
                     LAG(IFNULL(ROUND(hist.usd_scr, 2), 0)) OVER (ORDER BY DATE_FORMAT(hist.std_dt, '%Y%m%d')) AS prev_usd_scr
                 FROM aidt_lms.std_usd_notstdt_unit_day_hist hist
                          LEFT JOIN (
                     -- 반이동된 학생들의 해당 날짜 점수 합계 및 인원수
                     SELECT
                         DATE_FORMAT(ucs.std_dt, '%Y%m%d') AS std_dt,
                         ucs.cla_id,
                         ucs.textbk_id,
                         ucs.unit_num,
                         ucs.meta_id,
                         SUM(CASE WHEN ucs.std_cnt > 0 THEN IFNULL((ucs.x1 / NULLIF(ucs.x2, 0)) * 100, 0) ELSE 0 END) AS transfer_score,
                         COUNT(CASE WHEN ucs.std_cnt > 0 THEN 1 END) AS transfer_count
                     FROM (
                              SELECT
                                  ucs_inner.std_dt,
                                  ucs_inner.stdt_id,
                                  ucs_inner.cla_id,
                                  ucs_inner.textbk_id,
                                  ucs_inner.unit_num,
                                  ucs_inner.meta_id,
                                  IFNULL(COUNT(CASE WHEN ucs_inner.std_at = 'Y' THEN 1 END), 0) AS std_cnt,
                                  SUM(
                                          (IFNULL(ucs_inner.gd_gnrl_rgt_asw_cnt, 0) * 1)
                                              + (IFNULL(ucs_inner.gd_gnrl_pat_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_hnt_gnrl_rgt_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_hnt_gnrl_pat_asw_cnt, 0) * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.gd_sm_exm_rgt_asw_cnt, 0) * 0.5)
                                              + (IFNULL(ucs_inner.gd_sm_exm_pat_asw_cnt, 0) * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_gnrl_rgt_asw_cnt, 0) * 6)
                                              + (IFNULL(ucs_inner.av_up_gnrl_pat_asw_cnt, 0) * 0.5 * 6)
                                              + (IFNULL(ucs_inner.av_up_hnt_gnrl_rgt_asw_cnt, 0) * 6 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_hnt_gnrl_pat_asw_cnt, 0) * 6 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_sm_exm_rgt_asw_cnt, 0) * 6 * 0.5)
                                              + (IFNULL(ucs_inner.av_up_sm_exm_pat_asw_cnt, 0) * 6 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_gnrl_rgt_asw_cnt, 0) * 5)
                                              + (IFNULL(ucs_inner.av_gnrl_pat_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_hnt_gnrl_rgt_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_hnt_gnrl_pat_asw_cnt, 0) * 5 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_sm_exm_rgt_asw_cnt, 0) * 5 * 0.5)
                                              + (IFNULL(ucs_inner.av_sm_exm_pat_asw_cnt, 0) * 5 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_gnrl_rgt_asw_cnt, 0) * 3)
                                              + (IFNULL(ucs_inner.av_lw_gnrl_pat_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_hnt_gnrl_rgt_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_hnt_gnrl_pat_asw_cnt, 0) * 3 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_sm_exm_rgt_asw_cnt, 0) * 3 * 0.5)
                                              + (IFNULL(ucs_inner.av_lw_sm_exm_pat_asw_cnt, 0) * 3 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.bd_gnrl_rgt_asw_cnt, 0) * 2)
                                              + (IFNULL(ucs_inner.bd_gnrl_pat_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_hnt_gnrl_rgt_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_hnt_gnrl_pat_asw_cnt, 0) * 2 * 0.5 * 0.5)
                                              + (IFNULL(ucs_inner.bd_sm_exm_rgt_asw_cnt, 0) * 2 * 0.5)
                                              + (IFNULL(ucs_inner.bd_sm_exm_pat_asw_cnt, 0) * 2 * 0.5 * 0.5)
                                  ) AS x1,
                                  SUM(
                                          IFNULL(ucs_inner.gd_exm_num, 0)
                                              + IFNULL(ucs_inner.av_up_exm_num, 0) * 6
                                              + IFNULL(ucs_inner.av_exm_num, 0) * 5
                                              + IFNULL(ucs_inner.av_lw_exm_num, 0) * 3
                                              + IFNULL(ucs_inner.bd_exm_num, 0) * 2
                                  ) AS x2
                              FROM usd_cac_src_info ucs_inner
                              WHERE ucs_inner.std_at = 'Y'
                                AND ucs_inner.textbk_id = '1152'
                                AND (
                                        IFNULL(ucs_inner.gd_exm_num, 0)
                                            + IFNULL(ucs_inner.av_up_exm_num, 0)
                                            + IFNULL(ucs_inner.av_exm_num, 0)
                                            + IFNULL(ucs_inner.av_lw_exm_num, 0)
                                            + IFNULL(ucs_inner.bd_exm_num, 0)
                                        ) > 0
                                -- 반이동된 학생만 필터링 (actvtn_at = 'N' 인 학생)
                                AND EXISTS (
                                  SELECT 1
                                  FROM aidt_lms.tc_cla_mb_info schh
                                  WHERE schh.stdt_id = ucs_inner.stdt_id
                                    AND schh.actvtn_at = 'N'
                                    AND schh.cla_id =  #{claId}
                              )
                              GROUP BY ucs_inner.std_dt, ucs_inner.stdt_id, ucs_inner.cla_id, ucs_inner.textbk_id, ucs_inner.unit_num, ucs_inner.meta_id
                          ) ucs
                     GROUP BY ucs.std_dt, ucs.cla_id, ucs.textbk_id, ucs.unit_num, ucs.meta_id
                 ) transfer_data
                                    ON DATE_FORMAT(hist.std_dt, '%Y%m%d') = transfer_data.std_dt
                                        AND hist.cla_id = transfer_data.cla_id
                                        AND hist.textbk_id = transfer_data.textbk_id
                                        AND hist.unit_num = transfer_data.unit_num
                                        AND hist.meta_id = transfer_data.meta_id
                          LEFT JOIN (
                     -- 전체(원본) 학생 수
                     SELECT
                         DATE_FORMAT(std_dt, '%Y%m%d') AS std_dt,
                         cla_id,
                         textbk_id,
                         unit_num,
                         meta_id,
                         COUNT(DISTINCT stdt_id) AS student_count
                     FROM usd_cac_src_info
                     WHERE std_at = 'Y'
                       AND textbk_id =  #{textbookId}
                       AND cla_id =  #{claId}
                     GROUP BY std_dt, cla_id, textbk_id, unit_num, meta_id
                 ) original_counts
                                    ON DATE_FORMAT(hist.std_dt, '%Y%m%d') = original_counts.std_dt
                                        AND hist.cla_id = original_counts.cla_id
                                        AND hist.textbk_id = original_counts.textbk_id
                                        AND hist.unit_num = original_counts.unit_num
                                        AND hist.meta_id = original_counts.meta_id
                 WHERE hist.textbk_id = #{textbookId}
                   AND hist.meta_id = #{metaId}
                   AND hist.cla_id =  #{claId}
                   AND hist.std_at = 'Y'
                   -- (전체수 - 반이동수) > 0 인 날짜만 사용
                   AND (original_counts.student_count - IFNULL(transfer_data.transfer_count, 0)) > 0
             ) AS a
        INNER JOIN (
            SELECT DISTINCT
                DATE_FORMAT(ed_dt, '%Y%m%d') AS ed_dt,
                meta_id
            FROM (
                /* 학습자료 */
                SELECT
                    CASE WHEN tch_errata_chg_at  = 'Y' THEN sdrd.tch_errata_chg_dt
                         ELSE IFNULL(DATE_FORMAT(sdrd.eak_ed_dt, '%Y-%m-%d'), DATE_FORMAT(sdrd.mdfy_dt, '%Y-%m-%d')) END AS ed_dt,
                    amm.meta_id
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sdri
                    ON ti.id = sdri.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail sdrd
                    ON sdri.id = sdrd.dta_result_id
                        AND sdrd.eak_at = 'Y'        /* 응시 여부 */
                        AND sdrd.mrk_ty <![CDATA[<>]]> 3         /* 채점 불가 항목(3) 제외 */
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = sdrd.dta_iem_id
                        AND amm.sub_id = sdrd.sub_id
                        AND amm.meta_name = 'studyMap1'
                        AND amm.meta_id = #{metaId}
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                /* 평가 */
                SELECT
                    DATE_FORMAT(
                         CASE
                           WHEN ei.rpt_othbc_dt IS NULL THEN ei.mrk_cp_dt
                           WHEN ei.mrk_cp_dt > ei.rpt_othbc_dt THEN ei.mrk_cp_dt
                           ELSE ei.rpt_othbc_dt
                         END,
                         '%Y-%m-%d'
                    ) AS ed_dt,
                    amm.meta_id
                FROM aidt_lms.evl_info ei
                JOIN aidt_lms.evl_result_info eri
                    ON ei.id = eri.evl_id
                        AND ei.evl_stts_cd = 5      /* 채점완료 */
                        AND eri.mrk_cp_at = 'Y'      /* 채점 완료 여부 */
                        AND ei.rpt_othbc_at = 'Y'
                JOIN aidt_lms.evl_result_detail erd
                    ON eri.id = erd.evl_result_id
                        AND erd.eak_at = 'Y'         /* 응시 여부 */
                        AND erd.mrk_ty <![CDATA[<>]]> 3          /* 채점 불가 항목(3) 제외 */
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = erd.evl_iem_id
                        AND amm.sub_id = erd.sub_id
                        AND amm.meta_name = 'studyMap1'
                        AND amm.meta_id = #{metaId}
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = erd.evl_iem_id
                        AND amm2.sub_id = erd.sub_id
                        AND amm2.meta_name ='studyMap_1'
                WHERE ei.cla_id = #{claId}
                AND ei.textbook_id = #{textbookId}

                UNION

                /* 과제 */
                SELECT
                    DATE_FORMAT(
                         CASE
                           WHEN ti.rpt_othbc_dt IS NULL THEN ti.mrk_cp_dt
                           WHEN ti.mrk_cp_dt > ti.rpt_othbc_dt THEN ti.mrk_cp_dt
                           ELSE ti.rpt_othbc_dt
                         END,
                         '%Y-%m-%d'
                    ) AS ed_dt,
                    amm.meta_id
                FROM aidt_lms.task_info ti
                JOIN aidt_lms.task_result_info tri
                    ON ti.id = tri.task_id
                        AND ti.task_stts_cd = 5
                        AND tri.subm_at = 'Y'        /* 제출 여부 */
                        AND ti.rpt_othbc_at = 'Y'
                JOIN aidt_lms.task_result_detail trd
                    ON tri.id = trd.task_result_id
                        AND trd.eak_at = 'Y'         /* 응시 여부 */
                        AND trd.mrk_ty <![CDATA[<>]]> 3          /* 채점 불가 항목(3) 제외 */
                        AND trd.mrk_cp_at = 'Y'      /* 채점 완료 여부 */
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = trd.task_iem_id
                        AND amm.sub_id = trd.sub_id
                        AND amm.meta_name = 'studyMap1'
                        AND amm.meta_id = #{metaId}
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = trd.task_iem_id
                        AND amm2.sub_id = trd.sub_id
                        AND amm2.meta_name ='studyMap_1'
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                /* 자기주도학습 (선택학습/AI학습) */
                SELECT
                    DATE_FORMAT(ssri.std_ed_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id
                FROM aidt_lms.slf_std_info ssi
                JOIN aidt_lms.slf_std_result_info ssri
                    ON ssi.id = ssri.std_id
                        AND ssi.ed_at = 'Y'
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = ssri.module_id
                        AND amm.sub_id = ssri.sub_id
                        AND amm.meta_name = 'studyMap1'
                        AND amm.meta_id = #{metaId}
                WHERE ssi.cla_id = #{claId}
                AND ssi.textbk_id = #{textbookId}
            ) AS combined_dates
        ) AS b
        ON a.std_dt = b.ed_dt AND a.meta_id = b.meta_id
    </select>

    <select id="selectTchDsbdCncptUsdUnitAllKwgGradeCnt" parameterType="map" resultType="camelHashMap">
      /* TchDsbdMapper.selectTchDsbdCncptUsdUnitAllKwgGradeCnt */
        /* 단원의 지식요인-전체에 대한 상/중/하 갯수 조회 */
        <![CDATA[
        select
            DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d')),'%Y-%m-%d') as stdDt ,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then 1 else 0 end) as gdUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then 1 else 0 end) as avUsdScrCnt,
            SUM(CASE WHEN ifnull(round(a.usd_scr,0),0) < 50 then 1 else 0 end) as bdUsdScrCnt
        ]]>
        from
            aidt_lms.tc_cla_mb_info b
                inner join aidt_lms.std_usd_unit_day_hist a
                           on a.stdt_id = b.stdt_id
                               and a.cla_id = b.cla_id
                               and a.textbk_id = #{textbookId}
                               and a.meta_id   = #{metaId}
                               and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                               and a.std_at = 'Y'
        where b.cla_id  = #{claId}
          and b.actvtn_at = 'Y'
        group by DATE_FORMAT( ifnull(a.std_dt,STR_TO_DATE(#{stdDt},'%Y%m%d'))  ,'%Y-%m-%d')

    </select>

    <select id="selectTchDsbdConceptUsdAllKwgDetail" parameterType="map" resultType="camelHashMap">
      /* TchDsbdMapper.selectTchDsbdConceptUsdAllKwgDetail */
        /* 단원의 지식요인-전체에 대한 학생별 이해도 및 상/중/하 조회 */
        <![CDATA[
        select
            b.stdt_id,
            (select flnm from aidt_lms.user where user_id = b.stdt_id) as flnm,
            b.cla_id,
            ifnull(round(a.usd_scr, 2),0) as usd_scr,
            CASE WHEN ifnull(round(a.usd_scr,0),0) >= 80 then '상'
                 WHEN ifnull(round(a.usd_scr,0),0) >= 50 and ifnull(round(a.usd_scr,0),0) < 80 then '중'
                 WHEN ifnull(round(a.usd_scr,0),0) < 50 then '하' end as resultGradeNm
        from
            aidt_lms.tc_cla_mb_info b
                inner join aidt_lms.std_usd_unit_day_hist a
                           on a.stdt_id = b.stdt_id
                               and a.cla_id = b.cla_id
                               and a.textbk_id = #{textbookId}
                               and a.meta_id = #{metaId}
                               and DATE_FORMAT( a.std_dt  ,'%Y%m%d') = #{stdDt}
                               and a.std_at = 'Y'
        where b.cla_id  = #{claId}
          and b.actvtn_at = 'Y'
        group by b.stdt_id
        ]]>
    </select>
    <!--// 단원의 지식요인 전체-->

    <select id="selectTchDsbdStatusAreausdContAreaList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreausdContAreaList */
        select
           a.meta_id_b as area_id
           , b.val    as area_nm
        from aidt_lcms.meta_meta_map a
            inner join aidt_lcms.meta b
                 on a.meta_id_b = b.id
                 and a.meta_name_b = 'contentArea'
            inner join aidt_lcms.meta c
                 on a.meta_id_a = c.id
        where 1=1
        /* 영역별 전체 구하기 */
        and a.meta_id_a in (
            select id from aidt_lcms.v_curri_tree a where 1=1
            and a.textbk_id = #{textbookId}
            and a.depth = 1
        )
        group by a.meta_id_b
    </select>

    <select id="selectTchDsbdStatusAreausdAreaUsdList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreausdAreaUsdList */
        SELECT a.area_id
        	,a.area_nm
        	,IFNULL(ROUND(avg(b.usd_scr),2), 0) as usd_scr
        FROM
         (
                select a.meta_id_a as meta_id
                  , a.meta_id_b as area_id
                   , c.name   as unit_cd
                   , c.val    as unit_nm
                   , b.name   as area_cd
                   , b.val    as area_nm
                from aidt_lcms.meta_meta_map a
                    inner join aidt_lcms.meta b
                         on a.meta_id_b = b.id
                         and a.meta_name_b = 'contentArea'
                    inner join aidt_lcms.meta c
                         on a.meta_id_a = c.id
                where 1=1
                /* 영역별 전체 구하기 */
                and a.meta_id_a in (
                    select id from aidt_lcms.v_curri_tree a where 1=1
                    and a.textbk_id = #{textbookId}
                    and a.depth = 1
                )
                group by a.meta_id_a
         ) a
          LEFT JOIN
         (
         	SELECT
         		a.stdt_id
         		,a.meta_id
         		,IFNULL(a.usd_scr, 0)  as usd_scr
         	FROM
         		aidt_lms.std_usd_unit_info a
        		JOIN aidt_lms.tc_cla_mb_info c
        			ON a.stdt_id = c.stdt_id
                        AND a.textbk_id = #{textbookId}
                        AND a.cla_id = c.cla_id
                        AND a.std_at = 'Y'
                        AND c.cla_id = #{claId}
         ) b
         ON a.meta_id = b.meta_id
         GROUP BY a.area_id
    </select>

    <select id="selectTchDsbdStatusAreausdDetail" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreausdDetail */
        WITH avg_score AS (
                SELECT a.area_id
                	,a.area_nm
                	,b.stdt_id
                	,IFNULL(b.usd_scr, 0) AS usd_scr
                	,b.cla_id
                FROM
                 (
                        select a.meta_id_a as meta_id
                             , a.meta_id_b as area_id
                             , c.name   as unit_cd
                             , c.val    as unit_nm
                             , b.name   as area_cd
                             , b.val    as area_nm
                        from aidt_lcms.meta_meta_map a
                             inner join aidt_lcms.meta b
                                   on a.meta_id_b = b.id
                                   and a.meta_name_b = 'contentArea'
                             inner join aidt_lcms.meta c
                                   on a.meta_id_a = c.id
                        where 1=1
                        and a.meta_id_b = #{areaId}  /* area_id 영역에 대한 영역 구할때. */
                        /* and a.meta_id_a = 'unitId'  unit_id 영역에 대한 단원 구할때. */
                        /* 영역별 전체 구하기 */
                        and a.meta_id_a in (
                            select id from aidt_lcms.v_curri_tree a where 1=1
                            and a.textbk_id = #{textbookId}
                            and a.depth = 1
                        )
                        group by a.meta_id_a
                 ) a
                 JOIN
                 (
                 	SELECT
                 		a.stdt_id
                 		,c.cla_id
                 		,a.meta_id
                 		,IFNULL(a.usd_scr, 0) AS usd_scr
                 	FROM
                 		aidt_lms.std_usd_unit_info a
                		JOIN aidt_lms.tc_cla_mb_info c
                			ON a.stdt_id = c.stdt_id
                			AND a.cla_id = c.cla_id
                            AND a.textbk_id = #{textbookId}
                            AND a.std_at = 'Y'
                			AND c.cla_id = #{claId}
                 ) b
                 ON a.meta_id = b.meta_id
                )
                SELECT
                	CASE
                       	WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*80) THEN '상'
                		WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*50) AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*80) THEN '중'
                        WHEN a.usd_scr <![CDATA[>]]> 0 AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*50) THEN '하'
                        ELSE '점수없음'
                    END AS score_range
                    ,COUNT(*) as count
                FROM avg_score a, (select avg(usd_scr) as usd_scr from avg_score) b
                GROUP BY
                CASE
                    WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*80) THEN '상'
                    WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*50) AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*80) THEN '중'
                    WHEN a.usd_scr <![CDATA[>]]> 0 AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*50) THEN '하'
                    ELSE '점수없음'
                END
    </select>

    <select id="selectTchDsbdStatusAreausdDetailAreaStdtList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreausdDetailAreaStdtList */
        WITH avg_score AS (
        SELECT a.area_id
        	,a.area_nm
        	,b.stdt_id
        	,IFNULL(b.usd_scr, 0) AS usd_scr
        	,b.cla_id
        FROM
         (
                select a.meta_id_a as meta_id
                       , a.meta_id_b as area_id
                        , c.name   as unit_cd
                        , c.val    as unit_nm
                        , b.name   as area_cd
                        , b.val    as area_nm
                from aidt_lcms.meta_meta_map a
                        inner join aidt_lcms.meta b
                              on a.meta_id_b = b.id
                              and a.meta_name_b = 'contentArea'
                        inner join aidt_lcms.meta c
                              on a.meta_id_a = c.id
                where 1=1
                and a.meta_id_b = #{areaId}  /* area_id 영역에 대한 영역 구할때. */
               /* and a.meta_id_a = 'unitId'  unit_id 영역에 대한 단원 구할때. */
                   /* 영역별 전체 구하기 */
                and a.meta_id_a in (
                    select id from aidt_lcms.v_curri_tree a where 1=1
                    and a.textbk_id = #{textbookId}
                    and a.depth = 1
                    )
                group by a.meta_id_a
         ) a
         JOIN
         (
         	SELECT
         		a.stdt_id
         		,c.cla_id
         		,a.meta_id
         		,IFNULL(a.usd_scr, 0) AS usd_scr
         	FROM
         		aidt_lms.std_usd_unit_info a
        		JOIN aidt_lms.tc_cla_mb_info c
        			ON a.stdt_id = c.stdt_id
                    AND a.textbk_id = #{textbookId}
                    AND a.cla_id = c.cla_id
                    AND a.std_at = 'Y'
        			AND c.cla_id = #{claId}
                    and c.actvtn_at = 'Y'
         ) b
         ON a.meta_id = b.meta_id
        )
        SELECT
        	a.area_id
        	,a.area_nm
        	,a.stdt_id
        	,(SELECT flnm FROM aidt_lms.user WHERE user_id = a.stdt_id) as flnm
        	,a.cla_id
        	,IFNULL(TRUNCATE(a.usd_scr,2),0) as usd_scr
        	,CASE
               	WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*80) THEN '상'
        		WHEN a.usd_scr <![CDATA[>=]]> (b.usd_scr/100*50) AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*80) THEN '중'
                WHEN a.usd_scr <![CDATA[>]]> 0 AND a.usd_scr <![CDATA[<]]> (b.usd_scr/100*50) THEN '하'
                ELSE '점수없음'
            END AS result_grade_nm
            ,((b.usd_scr/100)*80) as '80'
            ,((b.usd_scr/100)*50) as '50'
            ,b.usd_scr
        FROM avg_score a, (select avg(usd_scr) as usd_scr from avg_score) b
    </select>

    <select id="selectAreaName" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectAreaName */
        select
           a.meta_id_b as area_id
           , b.val    as area_nm
        from aidt_lcms.meta_meta_map a
            inner join aidt_lcms.meta b
                 on a.meta_id_b = b.id
                 and a.meta_name_b = 'contentArea'
            inner join aidt_lcms.meta c
                 on a.meta_id_a = c.id
        where 1=1
        and a.meta_id_b = #{areaId}  /* area_id 영역에 대한 영역 구할때. */
       /* and a.meta_id_a = 'unitId'  unit_id 영역에 대한 단원 구할때. */
        and a.meta_id_a in (
            select id from aidt_lcms.v_curri_tree a where 1=1
            and a.textbk_id = #{textbookId}
            and a.depth = 1
        )
        group by a.meta_id_b
    </select>

    <!--학습맵 이해도 : 단원별 정보-->
    <!--사용안함-->
    <select id="selectTchDsbdChptUnitInfo" parameterType="map" resultType="camelHashMap">
        select /* TchDsbdMapper.selectTchDsbdChptUnitInfo */
                X.meta_id,
                X.unit_num,
                X.unit_nm,
                if( (X.tId is null and X.unit_num = 1) or (X.tId = X.meta_id) ,'Y','N') as unitLastLesnAt
        from (
            SELECT
                X.id AS meta_id,
                DENSE_RANK() OVER (order by X.id) AS unit_num,
                X.unit_nm,
                if(T1.id = X.id ,'Y','N') as unitLastLesnAt,
                T1.id as tId
            FROM
            (
                SELECT
                    b.id,
                    b.parent_id,
                    b.code,
                    b.val AS unit_nm,
                    b.depth
                FROM
                    aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta b ON a.code = b.description
                  AND b.is_active = 1
                  AND b.name = 'studyMap1'
                INNER JOIN aidt_lcms.meta c
                    on c.id = b.parent_id
                        and c.is_active = 1
                WHERE 1=1
                <if test="metaId != null and metaId != '' ">
                    and  b.id = #{metaId}
                </if>
            ) X
            LEFT JOIN (
                    select id from aidt_lcms.v_curri_tree a
                     where a.textbk_id = #{textbookId}
                       and a.id = (
                                select
                                    b.id
                                from
                                    aidt_lcms.meta a
                                inner join aidt_lcms.meta b
                                on a.id in (
                                        select
                                            /* NULL이 아닌 첫 번째 Column 값을 구함. */
                                            COALESCE(curri.curriUnit5,curri.curriUnit4,curri.curriUnit3,curri.curriUnit2,curri.curriUnit1) as curriUnit
                                          from
                                            aidt_lms.tc_lastlesson lst
                                         inner join aidt_lms.tc_curriculum curri
                                            on lst.wrter_id = curri.wrter_id
                                               and lst.cla_id = curri.cla_id
                                               and lst.textbk_id = curri.textbk_id
                                               and lst.crcul_id = curri.key
                                               and lst.textbk_idx_id = curri.textbk_idx_id
                                         where
                                            1=1
                                           and curri.wrter_id = #{userId}
                                           and curri.cla_id =  #{claId}
                                           and curri.textbk_id =#{textbookId}
                                )
                       and a.code = b.description
                       and b.is_active = 1
                      )
            ) as T1 ON X.id = T1.id
            ORDER BY
                X.parent_id,
                X.code
            ) X
        <if test="metaId == null or metaId == ''">
            where X.unitLastLesnAt = 'Y'
        </if>
        limit 1
    </select>

    <!--학습맵 이해도 : 단원의 개념(지식요인) 정보 stdMapUsdList -->
    <!--사용여부 잘 모르겠음 -->
    <select id="selectTchDsbdStdMapUsdList" parameterType="map" resultType="camelHashMap">
        select /* TchDsbdMapper.selectTchDsbdStdMapUsdList */
            A.meta_id,
            C.unit_num,
            A.id                as kwg_main_id,
            A.val               as kwg_nm,
            ifnull(C.usd_scr,0) as usd_scr,
            A.prev_meta_id      as prev_meta_id,
            D.unit_num          as prev_unit_num,
            A.val2              as prev_kwg_main_id,
            B.val               as prev_kwg_nm,
            ifnull(D.usd_scr,0) as prev_usd_scr
        from
        (
            SELECT
                a.meta_id,
                a.id,
                a.val,
                a.val1,
                numbers.n as sort_num,
                (
                    WITH RECURSIVE UNIT_INFO AS (
                    SELECT
                        id,
                        parent_id,
                        id_path,
                        depth
                     FROM aidt_lcms.v_curri_tree a
                    WHERE a.textbk_id = #{textbookId} and a.id = SUBSTRING_INDEX(SUBSTRING_INDEX(a.val2,',',numbers.n),',',-1) /* 학습맵(지식요인-studyMap_1) 값 */
                    UNION ALL
                    SELECT
                        a.id,
                        a.parent_id,
                        a.id_path,
                        a.depth
                     FROM aidt_lcms.v_curri_tree a
                    INNER JOIN UNIT_INFO b ON a.id = b.parent_id  and a.textbk_id = #{textbookId}
                )
                    SELECT id FROM UNIT_INFO WHERE 1=1 and depth = 1
                ) as prev_meta_id,
                SUBSTRING_INDEX (SUBSTRING_INDEX(a.val2,',',numbers.n),',',-1) as val2
            FROM
            (
            WITH RECURSIVE cte AS (
            SELECT 1 AS n
            UNION ALL
            SELECT n + 1 FROM cte WHERE n <![CDATA[ < ]]>  10
            )
            select n from cte
            ) numbers
            INNER JOIN (
            select
                #{metaId} as meta_id, /* 2 단원 meta_id */
                b.id,
                b.val,
                a.val1,         /* 교육부 표준교육체계 코드 */
                /* a.val2 as val2_org, */
                replace(a.val2,'#^|',',') as val2 /* 선수학습 */
            from
                aidt_lcms.meta_extension a
            inner join aidt_lcms.meta b
              on a.meta_extension_id = b.meta_extension_id
           where b.meta_extension_id in (
                  select
                        b.meta_extension_id
                    from aidt_lcms.meta a
                   inner join aidt_lcms.meta b
                      on a.id = #{metaId}   /* 2 단원 meta_id */
                     and b.name = 'studyMap_1'
                     and b.code like concat(a.code,'-%')
            )
           ) a
           ON CHAR_LENGTH(a.val2) - CHAR_LENGTH(REPLACE(a.val2,',','')) >= numbers.n-1
           ) A
           left join aidt_lcms.meta B
             on A.val2 = B.id
           left join aidt_lms.std_usd_unit_kwg_day_hist C
             on A.meta_id = C.meta_id
            and A.id = C.kwg_main_id
            and C.textbk_id = #{textbookId}
            and C.cla_id = #{claId}
            and C.std_at = 'Y'
            and C.std_dt = (
                           select max(std_dt)
                             from aidt_lms.std_usd_unit_kwg_day_hist
                            where textbk_id = #{textbookId}
                              and cla_id =  #{claId}
                              and meta_id = #{metaId}
                              <if test="kwgMainId != null and kwgMainId != ''">
                                  and kwg_main_id = #{kwgMainId}
                              </if>
                            )
            left join aidt_lms.std_usd_unit_kwg_day_hist D
              on A.prev_meta_id = D.meta_id
             and A.val2 = D.kwg_main_id
             and D.textbk_id = #{textbookId}
             and D.cla_id = #{claId}
             and D.std_at = 'Y'
             and D.std_dt = (
                            select max(std_dt)
                              from aidt_lms.std_usd_unit_kwg_day_hist
                              where textbk_id = #{textbookId}
                                and cla_id =  #{claId}
                                and meta_id = #{metaId}
                                <if test="kwgMainId != null and kwgMainId != ''">
                                    and kwg_main_id = #{kwgMainId}
                                </if>
                            )
        <if test="kwgMainId != null and kwgMainId != ''">
            where A.id = #{kwgMainId}
        </if>
        order by A.id, A.sort_num
    </select>

    <!--학습맵 이해도 (개념) -->
    <!--사용안함-->
    <select id="selectTchDsbdStdCncptUsdInfo" parameterType="map" resultType="camelHashMap">
        select  /* TchDsbdMapper.selectTchDsbdStdCncptUsdInfo */
            B.*
        from
        (
        select
            kwg_nm,
            usd_scr as kwgUsdScr,
            A.kwg_main_id,
            ( select id_path_nm from aidt_lcms.v_curri_tree where name = 'studyMap_1' and id = #{kwgMainId} and textbk_id = #{textbookId} limit 1 ) as cncptCurri
        from
        (
        select
            0 as id,
            X.meta_id,
            Y.id as kwg_main_id,
            Y.val as kwg_nm,
            0 as usd_scr
        from
        (
        select
            b.id as meta_id,
            b.parent_id,
            b.code
        from aidt_lcms.meta a
        inner join aidt_lcms.meta b
          on a.code = b.description
         and b.is_active = 1
         and b.name = 'studyMap1'
        inner join aidt_lcms.meta c
            on c.id = b.parent_id
                and c.is_active = 1
        left join aidt_lms.tc_curriculum curri
          on a.id = curri.curriUnit1
         and curri.wrter_id  = #{userId}
         and curri.cla_id    = #{claId}
         and curri.textbk_id = #{textbookId}
        where a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId}) and a.is_active = 1
        ) X
        inner join aidt_lcms.meta Y
          on Y.code like concat(X.code,'-%')
         and Y.name = 'studyMap_1'
        <if test="metaId != null and metaId != ''">
            and X.meta_id = #{metaId}
        </if>
        <if test="kwgMainId != null and kwgMainId != ''">
            AND Y.id =  #{kwgMainId}
        </if>
        union all
        select
            a.id,
            a.meta_id,
            a.kwg_main_id,
            (select val from aidt_lcms.meta where name = 'studyMap_1' and id = a.kwg_main_id) AS kwg_nm,
            avg(a.usd_scr) as usd_scr
        FROM
            aidt_lms.std_usd_info a
        WHERE 1=1
          AND cla_id    = #{claId}
          AND textbk_id = #{textbookId}
          AND a.std_at = 'Y'
        <if test="metaId != null and metaId != ''">
            AND a.meta_id =  #{metaId}
        </if>
        <if test="kwgMainId != null and kwgMainId != ''">
            AND a.kwg_main_id =  #{kwgMainId}
        </if>
        group by
            a.id,
            a.meta_id,
            a.kwg_main_id
            ) A
            limit 1
        ) B
        order by
        kwg_nm,
        kwgUsdScr desc
    </select>

    <!--학습맵 이해도 상세  -->
    <select id="selectTchDsbdStdMapUsdInfo" parameterType="map" resultType="camelHashMap">
        <![CDATA[
        select  /* TchDsbdMapper.selectTchDsbdStdMapUsdInfo */
             (select val from aidt_lcms.meta where name = 'studyMap_1' and id = a.kwg_main_id) AS kwg_nm,
             SUM(CASE WHEN a.usd_scr >= 80 then 1 else 0 end) as gdUsdScrCnt,
             SUM(CASE WHEN a.usd_scr >= 50 and a.usd_scr < 80 then 1 else 0 end) as avUsdScrCnt,
             SUM(CASE WHEN a.usd_scr < 50 then 1 else 0 end) as bdUsdScrCnt
        from aidt_lms.std_usd_info a
        inner join aidt_lms.tc_cla_mb_info b
            on a.cla_id = b.cla_id and a.stdt_id = b.stdt_id and b.actvtn_at = 'Y'
        where 1=1
          and a.textbk_id   = #{textbookId}
          and a.cla_id      = #{claId}
          and a.meta_id     = #{metaId}
          and a.kwg_main_id = #{kwgMainId}
          and a.std_at      = 'Y'
        group by a.kwg_main_id
        limit 1
        ]]>
    </select>

    <!--학습맵 이해도 상세  cncptStdtList -->
    <select id="selectTchDsbdStdMapCncptStdtList" parameterType="map" resultType="camelHashMap">
        <![CDATA[
        select  /* TchDsbdMapper.selectTchDsbdStdMapCncptStdtList */
             a.stdt_id ,
             (select flnm from aidt_lms.user where user_id = a.stdt_id) as flnm,
             b.cla_id,
             a.usd_scr ,
             CASE WHEN a.usd_scr >= 80 then '상'
                  WHEN a.usd_scr >= 50 and a.usd_scr < 80 then '중'
                  WHEN a.usd_scr < 50 then '하' end as resultGradeNm
        from aidt_lms.std_usd_info a
        inner join aidt_lms.tc_cla_mb_info b
            on a.cla_id = b.cla_id and a.stdt_id = b.stdt_id and b.actvtn_at = 'Y'
         where 1=1
           and a.textbk_id   = #{textbookId}
           and a.cla_id      = #{claId}
           and a.meta_id     = #{metaId}
           and a.kwg_main_id = #{kwgMainId}
           and a.std_at      = 'Y'
        ]]>
    </select>

    <!--    추후 수정 필요-->
    <insert id="createTchOftensents" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        /* TchDsbdMapper.createTchOftensents */
        INSERT INTO aidt_lms.often_use_sents
        (
            id
            ,wrter_id
            ,cla_id
            ,wrt_ymd
            ,sents
            ,rgtr
            ,reg_dt
            ,mdfr
            ,mdfy_dt
        ) VALUES (
            null
            ,#{userId}
            ,#{claId}
            ,DATE_FORMAT(now(), "%Y%m%d")
            ,#{sents}
            ,#{userId}
            ,NOW()
            ,#{userId}
            ,NOW()
        )
    </insert>

    <update id="modifyTchOftensents" parameterType="map">
        /* TchDsbdMapper.updateTchOftensents */
        UPDATE aidt_lms.often_use_sents
        SET  sents = #{sents}
            , mdfr = #{userId}
            , mdfy_dt = NOW()
        WHERE id = #{sentsId}
            AND wrter_id = #{userId}
    </update>

    <delete id="deleteTchOftensents" parameterType="map">
        /* TchDsbdMapper.deleteTchOftensents */
        DELETE FROM aidt_lms.often_use_sents
        WHERE id = #{sentsId}
            AND wrter_id = #{userId}
    </delete>

    <!--    추후 수정 필요-->
    <select id="selectTchOftensents" parameterType="pagingParam" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchOftensents */
        SELECT *
            , (count(*) over () + 1) - (row_number() over ()) as no
            , id as sents_id
            , count(*) over ()  as full_count
        FROM aidt_lms.often_use_sents
        WHERE 1=1
            AND wrter_id = #{param.userId}
            AND cla_id   = #{param.claId}
        limit #{pageable.pageSize} offset #{pageable.offset}
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 >  단원정보 -->
    <select id="selectTchDsbdUnitInfo" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdUnitInfo */
        SELECT  row_number() over (order by b.`code`) as unitNum
        ,       b.id as meta_id
        ,       b.parent_id
        ,       b.code
        ,       b.val AS unit_nm
        <choose>
            <when test="textbookId == 6981 or textbookId == 6982"> /* 초등영어는 lesson을 한글로 표시 */
                /* Lesson n 은 n단원, 그 외는 문자열 그대로 */
                ,CASE
                    WHEN b.val RLIKE '^Lesson [0-9]+' THEN
                        CONCAT(
                            REGEXP_SUBSTR(b.val, '[0-9]+'),
                            '단원'
                        )
                ELSE
                    SUBSTRING_INDEX(b.val, '_', 1)
                END AS unit
            </when>
            <when test="textbookId == 6979"> /* 중등 영어 2*/
                , SUBSTRING_INDEX(b.val, '_', 1) AS unit
            </when>
            <otherwise>
                , SUBSTRING_INDEX(b.val, ' ', 2) AS unit
            </otherwise>
        </choose>
        ,       b.depth - 1 as depth
        FROM    aidt_lcms.meta a
            inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
            inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
            left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
        WHERE   a.is_active = 1
          and   a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId})
        <if test="isProject == 0">
          and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
        </if>
    </select>

    <!-- selectTchDsbdUnitInfo에서 파라미터로 unitNum 파라미터를 안쓰고있는지 확인 후 selectTchDsbdUnitInfo로 대체 가능. -->
    <!-- [교사] 학급관리 > 홈 대시보드 >  단원정보 -->
    <select id="selectTchDsbdAiTutorUnitInfo" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAiTutorUnitInfo */
        SELECT a.unit_nm
        FROM (
            SELECT  row_number() over (order by b.`code`) as unitNum
            ,       b.id as meta_id
            ,       b.parent_id
            ,       b.code
            ,       b.val AS unit_nm
            ,       b.depth - 1 as depth
            FROM    aidt_lcms.meta a
            inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
            inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
            left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
            WHERE   a.is_active = 1
                and   a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId})
                <if test="isProject == 0">
                    and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                </if>
        ) a
            WHERE 1 = 1
             AND  unitNum = #{unitNum}
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 >  단원코드 정보 -->
    <select id="selectTchDsbdUnitCode" resultType="java.lang.String">
        /* TchDsbdMapper.selectTchDsbdUnitCode */
        SELECT `code`
        FROM    (
                 SELECT  row_number() over (order by b.`code`) as unitNum, b.code
                 FROM    aidt_lcms.meta a
                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                 WHERE   a.is_active = 1
                    and   a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId})
                <if test="isProject == 0">
                    and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                </if>
        ) T
        where unitNum = #{unitNum}
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 (성취도)그래프 AreaAchievementCount -->
    <select id="selectTchDsbdAreaAchievementCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementCount */
        select count(*)
        from    (
                select 	a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
                ,       round((sum(a.usd_ach_scr)/sum(a.rflt_actv_cnt))*100,2) as usd_ach_scr_percent
                ,       (case when round((sum(a.usd_ach_scr)/sum(a.rflt_actv_cnt))*100,2) >= 80 then 1 when round((sum(a.usd_ach_scr)/sum(a.rflt_actv_cnt))*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.usd_ach_src2_info a
                where   a.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                  and   a.cla_id          = #{claId}
                  and   a.textbk_id       = #{textbookId}
                  <if test="unitNum > 0">
                  and   a.unit_num        = #{unitNum} /* 단원번호 */
                  </if>
                and a.std_dt = (
                    select max(b.std_dt)
                    from aidt_lms.usd_ach_src2_info b
                    where   1=1
                      and   b.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                      and   b.cla_id          = #{claId}
                      and   b.textbk_id       = #{textbookId}
                      <if test="unitNum > 0">
                      and   b.unit_num        = #{unitNum} /* 단원번호 */
                      </if>
                    )
                group by a.usd_ach_id
        ) T
    </select>

    <select id="selectTchDsbdAreaAchievementCountAll" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementCount */
        select count(*)
        from    (
            select 	usd_ach_id, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
            ,       round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) as usd_ach_scr_percent
            ,       (case when round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) >= 80 then 1 when round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
            from    aidt_lms.usd_ach_src2_info
            where   usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting', 'vocabulary', 'grammar', 'pronunciation')
                and   cla_id          = #{claId}
                and   textbk_id       = #{textbookId}
                <if test="unitNum > 0">
                    and   unit_num        = #{unitNum} /* 단원번호 */
                </if>
            group by usd_ach_id
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 (성취도)그래프 AreaAchievementList -->
    <select id="selectTchDsbdAreaAchievementList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementList */
        select  a.code, a.val as code_nm
             ,       ifnull(b.usd_ach_scr, 0) as usd_ach_scr
             ,       ifnull(b.rflt_actv_cnt, 0) as rflt_actv_cnt
             ,       ifnull(b.usd_ach_scr_percent, 0) as usd_ach_scr_percent
             ,       ifnull(b.dfclt_lvl_ty, 0) as dfclt_lvl_ty
             ,       ifnull(b.article_list, '') as article_list
             ,       ifnull((
                                select  count(distinct val)
                                from    (
                                            select distinct substring_index(substring_index(t2.list, '|', t1.n), '|', -1) as val
                                            from    (
                                                        select 1 n union all select  2 union all select  3 union all select  4 union all select  5 union all select  6 union all select  7 union all select  8 union all select  9 union all select  10 union all
                                                        select 11  union all select 12 union all select 13 union all select 14 union all select 15 union all select 16 union all select 17 union all select 18 union all select 19 union all select  20 union all
                                                        select 21  union all select 22 union all select 23 union all select 24 union all select 25 union all select 26 union all select 27 union all select 28 union all select 29 union all select  30 union all
                                                        select 31  union all select 32 union all select 33 union all select 34 union all select 35 union all select 36 union all select 37 union all select 38 union all select 39 union all select  40 union all
                                                        select 41  union all select 42 union all select 43 union all select 44 union all select 45 union all select 46 union all select 47 union all select 48 union all select 49 union all select  50 union all
                                                        select 51  union all select 52 union all select 53 union all select 54 union all select 55 union all select 56 union all select 57 union all select 58 union all select 59 union all select  60 union all
                                                        select 61  union all select 62 union all select 63 union all select 64 union all select 65 union all select 66 union all select 67 union all select 68 union all select 69 union all select  70 union all
                                                        select 71  union all select 72 union all select 73 union all select 74 union all select 75 union all select 76 union all select 77 union all select 78 union all select 79 union all select  80 union all
                                                        select 81  union all select 82 union all select 83 union all select 84 union all select 85 union all select 86 union all select 87 union all select 88 union all select 89 union all select  90 union all
                                                        select 91  union all select 92 union all select 93 union all select 94 union all select 95 union all select 96 union all select 97 union all select 98 union all select 99 union all select 100
                                                    ) t1
                                                        inner join (
                                                select REPLACE(b.article_list, ',', '|') as list
                                            ) t2 on char_length(t2.list) - char_length(replace(t2.list, '|', '')) >= t1.n - 1
                                        ) T
                            ), 0) as article_cnt
        from (
                 select  id, code, val
                 from    aidt_lcms.meta
                 where   name = 'evaluationArea'
                   and   brand_id = '3'
             ) a
                 left join (
            /* 학습 이력 + 단원정보 포함 */
            select
                usd_ach_id
                 , sum(c.usd_ach_scr) as usd_ach_scr
                 , sum(c.rflt_actv_cnt) as rflt_actv_cnt
                 , round((sum(c.usd_ach_scr_percent)*100/count(c.stdt_id)),2) as usd_ach_scr_percent
                 /* , round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)),2)*100 as usd_ach_scr_percent      전단원 작업내용 주석 */
                 , (case
                        when round((sum(c.usd_ach_scr_percent)*100/count(c.stdt_id)),2) >= 80 then 1
                        when round((sum(c.usd_ach_scr_percent)*100/count(c.stdt_id)),2) > 50 then 2
                        else 3
                     end
                    ) as dfclt_lvl_ty
                 , GROUP_CONCAT(REPLACE(IFNULL(c.article_list, ''), ',', '|') SEPARATOR '|') AS article_list
            from    (
                        select
                            a.usd_ach_id
                             , sum(a.usd_ach_scr) as usd_ach_scr
                             , sum(a.rflt_actv_cnt) as rflt_actv_cnt
                             , sum(a.usd_ach_scr)/sum(a.rflt_actv_cnt) as usd_ach_scr_percent
                             ,   GROUP_CONCAT(REPLACE(IFNULL(a.article_list, ''), ',', '|') SEPARATOR '|') AS article_list
                             , a.stdt_id
                        from aidt_lms.usd_ach_src2_info a
                        where   a.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                          and   a.cla_id          = #{claId}
                          and   a.textbk_id       = #{textbookId}
                          <if test="unitNum > 0">
                          and   a.unit_num        = #{unitNum} /* 단원번호 */
                          </if>
                        and a.std_dt = (
                            select max(b.std_dt)
                            from aidt_lms.usd_ach_src2_info b
                            where   1=1
                              and   b.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                              and   b.cla_id          = #{claId}
                              and   b.textbk_id       = #{textbookId}
                              <if test="unitNum > 0">
                              and   b.unit_num        = #{unitNum} /* 단원번호 */
                              </if>
                            )
                        group by usd_ach_id,stdt_id/* ,unit_num    전단원 작업내용 주석 */
                    ) as c
            group by c.usd_ach_id
        ) b on a.code = b.usd_ach_id
        order by id
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 (성취도)그래프 AreaAchievementListAll -->
    <select id="selectTchDsbdAreaAchievementListAll" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementListAll */
        select  a.code, a.val as code_nm
        ,       ifnull(b.usd_ach_scr, 0) as usd_ach_scr
        ,       ifnull(b.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       ifnull(b.usd_ach_scr_percent, 0) as usd_ach_scr_percent
        ,       ifnull(b.dfclt_lvl_ty, 0) as dfclt_lvl_ty
        ,       ifnull(b.article_list, '') as article_list
        ,       ifnull((
                            select  count(distinct val)
                            from    (
                                        select distinct substring_index(substring_index(t2.list, '|', t1.n), '|', -1) as val
                                        from    (
                                                    select 1 n union all select  2 union all select  3 union all select  4 union all select  5 union all select  6 union all select  7 union all select  8 union all select  9 union all select  10 union all
                                                    select 11  union all select 12 union all select 13 union all select 14 union all select 15 union all select 16 union all select 17 union all select 18 union all select 19 union all select  20 union all
                                                    select 21  union all select 22 union all select 23 union all select 24 union all select 25 union all select 26 union all select 27 union all select 28 union all select 29 union all select  30 union all
                                                    select 31  union all select 32 union all select 33 union all select 34 union all select 35 union all select 36 union all select 37 union all select 38 union all select 39 union all select  40 union all
                                                    select 41  union all select 42 union all select 43 union all select 44 union all select 45 union all select 46 union all select 47 union all select 48 union all select 49 union all select  50 union all
                                                    select 51  union all select 52 union all select 53 union all select 54 union all select 55 union all select 56 union all select 57 union all select 58 union all select 59 union all select  60 union all
                                                    select 61  union all select 62 union all select 63 union all select 64 union all select 65 union all select 66 union all select 67 union all select 68 union all select 69 union all select  70 union all
                                                    select 71  union all select 72 union all select 73 union all select 74 union all select 75 union all select 76 union all select 77 union all select 78 union all select 79 union all select  80 union all
                                                    select 81  union all select 82 union all select 83 union all select 84 union all select 85 union all select 86 union all select 87 union all select 88 union all select 89 union all select  90 union all
                                                    select 91  union all select 92 union all select 93 union all select 94 union all select 95 union all select 96 union all select 97 union all select 98 union all select 99 union all select 100
                                        ) t1
                                        inner join (
                                                    select REPLACE(b.article_list, ',', '|') as list
                                        ) t2 on char_length(t2.list) - char_length(replace(t2.list, '|', '')) >= t1.n - 1
                                 ) T
                            ), 0) as article_cnt
        ,       ifnull(std_at, 'N') as std_at
        from (
                select  id, code, val
                from    aidt_lcms.meta
                where 1=1
                and name in ('evaluationArea','contentsItem','evaluationArea3')
                and   brand_id = '3'
                /* 초등영어 2,5,6  grammar 제외 */
                <if test="textbookId == 6981 or textbookId == 6982">
                    and code != 'grammar' /*문장 사용 안함*/
                </if>
                and code != 'sentence' /* 초등영어 고도화전 임시 조치 문장영역 조회 안되도록*/
        <if test="textbookId == 6982 or textbookId == 6981 ">
                and code != 'grammar'
        </if>
        ) a
        left join (
                    /* 학습 이력 + 단원정보 포함 */
                    select
                        usd_ach_id
                        , sum(c.usd_ach_scr) as usd_ach_scr
                        , sum(c.rflt_actv_cnt) as rflt_actv_cnt
                        ,  case
                                when c.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting') then round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                                when c.usd_ach_id = 'pronunciation' then round(avg(c.usd_ach_scr_percent), 2)
                                else round((avg(c.usd_ach_scr_percent) * 100),2)
                            end as usd_ach_scr_percent
                        /* , round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)),2)*100 as usd_ach_scr_percent      전단원 작업내용 주석 */
                        ,	case
                                when c.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting') then
                                    case
                                        when round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2) >= 80 then 1
                                        when round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2) >= 50 then 2
                                        else 3
                                    end
                                /* 'vocabulary', 'grammar', 'pronunciation' */
                                when c.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation') then
                                    case
                                        when c.usd_ach_scr_percent >= 80 then 1
                                        when c.usd_ach_scr_percent >= 50 then 2
                                    else 3
                                    end
                            end as dfclt_lvl_ty
                        , GROUP_CONCAT(REPLACE(IFNULL(c.article_list, ''), ',', '|') SEPARATOR '|') AS article_list
                        , c.std_at
                    from    (
                                select
                                    usd_ach_id
                                    , sum(usd_ach_scr) as usd_ach_scr
                                    , sum(rflt_actv_cnt) as rflt_actv_cnt
                                    , sum(usd_ach_scr)/sum(rflt_actv_cnt) as usd_ach_scr_percent
                                    ,   GROUP_CONCAT(REPLACE(IFNULL(article_list, ''), ',', '|') SEPARATOR '|') AS article_list
                                    , uasi.stdt_id
                                    , uasi.std_at
                                    from aidt_lms.usd_ach_src2_info uasi
                                    inner join aidt_lms.tc_cla_mb_info tcmi
                                    on uasi.cla_id = tcmi.cla_id
                                    and uasi.stdt_id = tcmi.stdt_id
                                    and tcmi.actvtn_at = 'Y'
                                where   uasi.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                    and   uasi.cla_id          = #{claId}
                                    and   uasi.textbk_id       = #{textbookId}
                                    <if test="unitNum > 0">
                                        and   uasi.unit_num        = #{unitNum} /* 단원번호 */
                                    </if>
                                    and   uasi.std_dt  = (
                                                    select max(dt.std_dt)
                                                      from aidt_lms.usd_ach_src2_info dt
                                                     where  1=1
                                                       and   dt.cla_id          = #{claId}
                                                       and   dt.textbk_id       = #{textbookId}
                                          )
                                group by usd_ach_id,stdt_id/* ,unit_num    전단원 작업내용 주석 */

                                union all

                                select
                                    b.usd_ach_id
                                    , sum(b.usd_ach_scr) as usd_ach_scr
                                    , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                                    , AVG(b.usd_ach_scr_percent) as usd_ach_scr_percen
                                    , GROUP_CONCAT(REPLACE(IFNULL(b.article_list, ''), ',', '|') SEPARATOR '|') as article_list
                                    , b.stdt_id
                                    , b.std_at
                                from (
                                        select
                                            a.usd_ach_id
                                            , sum(a.usd_ach_scr) as usd_ach_scr
                                            , sum(a.rflt_actv_cnt) as rflt_actv_cnt
                                            , AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent
                                            , a.article_list
                                            , a.iem_cd
                                            , a.iem_id
                                            , a.stdt_id
                                            , a.std_at
                                        from (
                                                select
                                                    a.usd_ach_id
                                                    , b.iem_id
                                                    , b.iem_cd
                                                    , sum(b.usd_ach_scr) as usd_ach_scr
                                                    , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                                                    , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                                                    , a.stdt_id
                                                    , a.std_at
                                                    , b.article_list
                                                from aidt_lms.usd_ach_src2_info a
                                                inner join  aidt_lms.usd_ach_src2_detail b
                                                    on a.id = b.usd_ach_src_id
                                                INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                                                        ON a.cla_id = tcmi.cla_id
                                                       AND a.stdt_id = tcmi.stdt_id
                                                where 1=1
                                                    and a.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation')
                                                    and a.cla_id = #{claId}
                                                    and a.textbk_id = #{textbookId}
                                                    and tcmi.actvtn_at = 'Y'
                                                    <if test="unitNum > 0">
                                                        and   a.unit_num  = #{unitNum} /* 단원번호 */
                                                    </if>
                                                    and   a.std_dt  = (
                                                                        select max(dt.std_dt)
                                                                          from aidt_lms.usd_ach_src2_info dt
                                                                         where  1=1
                                                                           and   dt.cla_id          = #{claId}
                                                                           and   dt.textbk_id       = #{textbookId}
                                                                        )

                                                group by a.usd_ach_id, a.stdt_id, b.iem_cd
                                                ) a
                                        group by a.usd_ach_id
                                ) b
                                group by b.usd_ach_id
                           ) c
                        group by c.usd_ach_id
        ) b on a.code = b.usd_ach_id
        ORDER BY FIELD(code, 'listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting', 'vocabulary', 'grammar', 'pronunciation', 'sentence')
    </select>


    <!-- [교사][영어] 단원별 성취도 조회 -->
    <select id="selectTchDsbdUnitAchievementList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdUnitAchievementList */
        SELECT
            d.unit_num,
            ROUND(AVG(d.usd_ach_scr_percent), 2) AS avg_usd_ach_scr_percent
        FROM (
                 SELECT
                     b.unit_num,
                     IFNULL(b.usd_ach_scr_percent, 0) AS usd_ach_scr_percent
                 FROM (
                          SELECT id, code, val
                          FROM aidt_lcms.meta
                          WHERE 1=1
                            AND name IN ('evaluationArea', 'contentsItem', 'evaluationArea3')
                            AND brand_id = '3'
                            AND code != 'sentence' /*문장 사용 안함*/
                      ) a
              INNER JOIN (
                     /* 학습 이력 + 단원정보 포함 */
                     SELECT
                         usd_ach_id,
                         SUM(c.usd_ach_scr) AS usd_ach_scr,
                         SUM(c.rflt_actv_cnt) AS rflt_actv_cnt,
                         CASE
                             WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                 THEN ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2)
                             WHEN c.usd_ach_id = 'pronunciation'
                                 THEN ROUND(AVG(c.usd_ach_scr_percent), 2)
                             ELSE ROUND((AVG(c.usd_ach_scr_percent) * 100), 2)
                             END AS usd_ach_scr_percent,
                         CASE
                             WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting') THEN
                                 CASE
                                     WHEN ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2) >= 80 THEN 1
                                     WHEN ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2) >= 50 THEN 2
                                     ELSE 3
                                     END
                             WHEN c.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation') THEN
                                 CASE
                                     WHEN c.usd_ach_scr_percent >= 80 THEN 1
                                     WHEN c.usd_ach_scr_percent >= 50 THEN 2
                                     ELSE 3
                                     END
                             END AS dfclt_lvl_ty,
                         GROUP_CONCAT(REPLACE(IFNULL(c.article_list, ''), ',', '|') SEPARATOR '|') AS article_list,
                         c.std_at,
                         c.unit_num
                     FROM (
                              SELECT
                                  usd_ach_id,
                                  SUM(usd_ach_scr) AS usd_ach_scr,
                                  SUM(rflt_actv_cnt) AS rflt_actv_cnt,
                                  SUM(usd_ach_scr) / SUM(rflt_actv_cnt) AS usd_ach_scr_percent,
                                  GROUP_CONCAT(REPLACE(IFNULL(article_list, ''), ',', '|') SEPARATOR '|') AS article_list,
                                  a.stdt_id,
                                  a.std_at,
                                  a.unit_num
                              FROM aidt_lms.usd_ach_src2_info a
                            INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                                    ON a.cla_id = tcmi.cla_id
                                    AND a.stdt_id = tcmi.stdt_id
                              WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                AND a.cla_id = #{claId}
                                AND textbk_id = #{textbookId}
                                AND tcmi.actvtn_at ='Y'
                                <if test="unitNum > 0">
                                    AND unit_num = #{unitNum} /* 단원번호 */
                                </if>
                                AND std_dt = (
                                  SELECT MAX(dt.std_dt)
                                  FROM aidt_lms.usd_ach_src2_info dt
                                  WHERE dt.cla_id = #{claId}
                                    AND dt.textbk_id = #{textbookId}
                              )
                              GROUP BY usd_ach_id, stdt_id, unit_num
                              UNION ALL
                              SELECT
                                  b.usd_ach_id,
                                  SUM(b.usd_ach_scr) AS usd_ach_scr,
                                  SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                                  AVG(b.usd_ach_scr_percent) AS usd_ach_scr_percent,
                                  GROUP_CONCAT(REPLACE(IFNULL(b.article_list, ''), ',', '|') SEPARATOR '|') AS article_list,
                                  b.stdt_id,
                                  b.std_at,
                                  b.unit_num
                              FROM (
                                       SELECT
                                           a.usd_ach_id,
                                           SUM(a.usd_ach_scr) AS usd_ach_scr,
                                           SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                                           AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                                           a.article_list,
                                           a.iem_cd,
                                           a.iem_id,
                                           a.stdt_id,
                                           a.std_at,
                                           a.unit_num
                                       FROM (
                                                SELECT
                                                    a.usd_ach_id,
                                                    b.iem_id,
                                                    b.iem_cd,
                                                    SUM(b.usd_ach_scr) AS usd_ach_scr,
                                                    SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                                                    SUM(b.usd_ach_scr) / SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                                                    a.stdt_id,
                                                    a.std_at,
                                                    b.article_list,
                                                    a.unit_num
                                                FROM aidt_lms.usd_ach_src2_info a
                                                        INNER JOIN aidt_lms.usd_ach_src2_detail b
                                                                ON a.id = b.usd_ach_src_id
                                                        INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                                                                ON a.cla_id = tcmi.cla_id
                                                               AND a.stdt_id = tcmi.stdt_id
                                                               AND tcmi.actvtn_at = 'Y'
                                                WHERE a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                                  AND a.cla_id = #{claId}
                                                  AND a.textbk_id = #{textbookId}
                                                <if test="unitNum > 0">
                                                    AND a.unit_num = #{unitNum} /* 단원번호 */
                                                </if>
                                                  AND a.std_dt = (
                                                    SELECT MAX(dt.std_dt)
                                                    FROM aidt_lms.usd_ach_src2_info dt
                                                    WHERE dt.cla_id = #{claId}
                                                      AND dt.textbk_id = #{textbookId}
                                                )
                                                GROUP BY a.usd_ach_id, a.stdt_id, a.unit_num
                                            ) a
                                       GROUP BY a.usd_ach_id, a.unit_num
                                   ) b
                              GROUP BY b.usd_ach_id, b.unit_num
                          ) c
                     GROUP BY c.usd_ach_id, c.unit_num
                 ) b ON a.code = b.usd_ach_id
             ) d
        GROUP BY d.unit_num
        ORDER BY d.unit_num
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세 (상/중/하) -->
    <select id="selectTchDsbdAreaAchievementCountDetail" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementCountDetail */
        select	#{code} as usd_ach_id
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr, ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
                 , (case
                        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1
                        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 50 then 2
                        when c.rflt_actv_cnt is null and c.usd_ach_scr is null then 0
                        else 3 end) as dfclt_lvl_ty
                from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  a.stdt_id, a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info a
                                where   a.usd_ach_id      = #{code}
                                  and   a.cla_id          = #{claId}
                                  and   a.textbk_id       = #{textbookId}
                                  <if test="unitNum > 0">
                                  and   a.unit_num        = #{unitNum} /* 단원번호 */
                                  </if>

                                    <choose>
                                        <when test="stdDtYmd != null and stdDtYmd != ''">
                                            and DATE_FORMAT(a.std_dt, '%Y%m%d') <![CDATA[ <= ]]> #{stdDtYmd}
                                        </when>

                                        <otherwise>
                                            and a.std_dt = (
                                                            select max(b.std_dt)
                                                              from aidt_lms.usd_ach_src2_info b
                                                             where 1=1
                                                               and b.usd_ach_id = #{code}
                                                               and b.cla_id     = #{claId}
                                                               and b.textbk_id  = #{textbookId}
                                                               <if test="unitNum > 0">
                                                               and b.unit_num   = #{unitNum} /* 단원번호 */
                                                               </if>
                                                            )
                                        </otherwise>
                                     </choose>
                                group by a.stdt_id, a.usd_ach_id
                    ) c on a.stdt_id = c.stdt_id
                where   a.cla_id = #{claId}
                  and   c.rflt_actv_cnt <![CDATA[ > ]]> 0
                AND a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세 (상/중/하) daily -->
    <select id="selectTchDsbdAreaAchievementCountDetail_daily" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementCountDetail_daily - 사용안함 */
        select	#{code} as usd_ach_id
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr, ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
                 , (case
                        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1
                        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 50 then 2
                        when c.rflt_actv_cnt is null and c.usd_ach_scr is null then 0
                        else 3 end) as dfclt_lvl_ty
                from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  a.stdt_id, a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info_daily a
                                where   a.usd_ach_id      = #{code}
                                  and   a.cla_id          = #{claId}
                                  and   a.textbk_id       = #{textbookId}
                                  <if test="unitNum > 0">
                                  and   a.unit_num        = #{unitNum} /* 단원번호 */
                                  </if>
                                 and DATE_FORMAT(a.std_dt, '%Y%m%d') = #{stdDtYmd}
                                group by a.stdt_id, a.usd_ach_id
                    ) c on a.stdt_id = c.stdt_id
                where   a.cla_id = #{claId}
                and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세 (상/중/하) -->
    <select id="selectTchDsbdAreaAchievementCountDetailAll" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementCountDetailAll */
        select	#{evaluationAreaCd} as usd_ach_id
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                    select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr, ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
                    , (case
                            when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1
                            when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2
                            when c.rflt_actv_cnt is null and c.usd_ach_scr is null then 0
                        else 3
                       end) as dfclt_lvl_ty
                    from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  stdt_id, usd_ach_id, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info
                                where   usd_ach_id      = #{evaluationAreaCd}
                                    and   cla_id            = #{claId}
                                    and   textbk_id         =  #{textbookId}
                                    <if test="unitNum > 0">
                                        and   unit_num      = #{unitNum} /* 단원번호 */
                                    </if>
                                group by stdt_id, usd_ach_id
                    ) c on a.stdt_id = c.stdt_id
                    where   a.cla_id = #{claId}
                    and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세(학생 목록) -->
    <select id="selectTchDsbdAreaAchievementStudentList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentList */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       (case
        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1
        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 50 then 2
        else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
        inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
        left join (
        select  a.stdt_id, a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
        from    aidt_lms.usd_ach_src2_info a
        where   a.usd_ach_id        = #{code}
            and   a.cla_id          = #{claId}
            and   a.textbk_id       = #{textbookId}
            <if test="unitNum > 0">
                and   a.unit_num        = #{unitNum} /* 단원번호 */
            </if>

            <choose>
                <when test="stdDtYmd != null and stdDtYmd != ''">
                    and DATE_FORMAT(a.std_dt, '%Y%m%d') <![CDATA[ <= ]]> #{stdDtYmd}
                </when>

                <otherwise>
                    and a.std_dt = (
                                    select max(b.std_dt)
                                      from aidt_lms.usd_ach_src2_info b
                                     where 1=1
                                       and b.usd_ach_id = #{code}
                                       and b.cla_id     = #{claId}
                                       and b.textbk_id  = #{textbookId}
                                       <if test="unitNum > 0">
                                       and b.unit_num   = #{unitNum} /* 단원번호 */
                                       </if>
                                    )
                </otherwise>
            </choose>
        group by a.stdt_id, a.usd_ach_id
        ) c on a.stdt_id = c.stdt_id

        where   a.cla_id =  #{claId}
        and   c.rflt_actv_cnt <![CDATA[ > ]]> 0
        AND a.actvtn_at = 'Y'
    </select>

    <select id="selectTchDsbdAreaAchievementAitutor" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementAitutor */
        SELECT
            c.usd_ach_id,
            SUM(c.usd_ach_scr) AS usd_ach_scr,
            SUM(c.rflt_actv_cnt) AS rflt_actv_cnt,
            ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2) AS usd_ach_scr_percent,
            CASE
                WHEN ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2) >= 80 THEN 1
                WHEN ROUND((SUM(c.usd_ach_scr_percent) * 100 / COUNT(c.stdt_id)), 2) >= 50 THEN 2
                ELSE 3
                END AS dfclt_lvl_ty,
            c.std_at,
            SUM(CASE WHEN c.level = 1 THEN 1 ELSE 0 END) AS gdUsdAchScrCnt,
            SUM(CASE WHEN c.level = 2 THEN 1 ELSE 0 END) AS avUsdAchScrCnt,
            SUM(CASE WHEN c.level = 3 THEN 1 ELSE 0 END) AS bdUsdAchScrCnt
        FROM (
                 SELECT
                     usd_ach_id,
                     SUM(usd_ach_scr) AS usd_ach_scr,
                     SUM(rflt_actv_cnt) AS rflt_actv_cnt,
                     SUM(usd_ach_scr)/SUM(rflt_actv_cnt) AS usd_ach_scr_percent,
                    uasi.stdt_id,
                    uasi.std_at,
                     CASE
                         WHEN SUM(usd_ach_scr)/SUM(rflt_actv_cnt) <![CDATA[ >= ]]> 0.8 THEN 1 -- 상
                         WHEN SUM(usd_ach_scr)/SUM(rflt_actv_cnt) <![CDATA[ >= ]]> 0.5 THEN 2 -- 중
                         ELSE 3 -- 하
                     END AS level
                 FROM aidt_lms.usd_ach_src2_info uasi
                  join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id =  uasi.cla_id and uasi.stdt_id = tcmi.stdt_id
                 WHERE usd_ach_id = #{evaluationAreaCd}
                   AND uasi.cla_id = #{claId}
                   AND uasi.textbk_id = #{textbookId}
                  AND  tcmi.actvtn_at = 'Y'
                <if test="unitNum > 0">
                   AND unit_num = #{unitNum}
                </if>
                   AND std_dt = (
                     SELECT MAX(dt.std_dt)
                     FROM aidt_lms.usd_ach_src2_info dt
                     WHERE dt.usd_ach_id = #{evaluationAreaCd}
                       AND dt.cla_id = #{claId}
                       AND dt.textbk_id = #{textbookId}
                    <if test="unitNum > 0">
                        AND dt.unit_num = #{unitNum}
                    </if>
                 )
                 GROUP BY usd_ach_id, stdt_id
             ) c
        GROUP BY c.usd_ach_id, c.std_at
    </select>

    <select id="findTchDsbdStudentsByAreaAchievementLevel" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStudentsByAreaAchievementLevel */
        SELECT
            a.usd_ach_id,
            a.unit_num,
            a.stdt_id,
            u.flnm,
            ROUND((SUM(a.usd_ach_scr)/SUM(a.rflt_actv_cnt))*100, 2) AS usd_ach_scr_percent,
            CASE
                WHEN SUM(a.usd_ach_scr)/SUM(a.rflt_actv_cnt) <![CDATA[ >= ]]> 0.8 THEN '1' -- 상
                WHEN SUM(a.usd_ach_scr)/SUM(a.rflt_actv_cnt) <![CDATA[ >= ]]> 0.5 THEN '2' -- 중
                ELSE '3' -- 하
            END AS level
        FROM aidt_lms.usd_ach_src2_info a
             LEFT JOIN aidt_lms.`user` u ON u.user_id = a.stdt_id
             INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tcmi.cla_id = a.cla_id AND tcmi.stdt_id = a.stdt_id
        WHERE a.usd_ach_id = #{evaluationAreaCd}
          AND a.cla_id = #{claId}
          AND a.textbk_id = #{textbookId}
          AND tcmi.actvtn_at = 'Y'
        <if test="unitNum > 0">
            AND a.unit_num = #{unitNum}
        </if>
          AND a.std_dt = (
            SELECT MAX(dt.std_dt)
            FROM aidt_lms.usd_ach_src2_info dt
            WHERE dt.usd_ach_id = #{evaluationAreaCd}
              AND dt.cla_id = #{claId}
              AND dt.textbk_id = #{textbookId}
            <if test="unitNum > 0">
                AND dt.unit_num = #{unitNum}
            </if>
        )
        GROUP BY a.usd_ach_id, a.stdt_id, u.flnm
        ORDER BY u.flnm
    </select>

    <select id="findTchDsbdStudentsByAreaAchievementLevel2" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdStudentsByAreaAchievementLevel2 */
        SELECT
            b.usd_ach_id,
            b.unit_num,
            b.stdt_id,
            u.flnm,
            CASE
                WHEN b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100), 2)
                END AS usd_ach_scr_percent,
            CASE
                WHEN b.usd_ach_id = 'pronunciation' THEN
                    CASE
                        WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 80 THEN '1' -- 상
                        WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 50 THEN '2' -- 중
                        ELSE '3' -- 하
                    END
                ELSE
                    CASE
                        WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 0.8 THEN '1' -- 상
                        WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 0.5 THEN '2' -- 중
                        ELSE '3' -- 하
                    END
            END AS level
        FROM (
                 SELECT
                     a.usd_ach_id,
                     SUM(a.usd_ach_scr) AS usd_ach_scr,
                     SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                     AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                     a.iem_cd,
                     a.iem_id,
                     a.stdt_id,
                     a.std_at,
                     a.unit_num
                 FROM (
                          SELECT
                              a.usd_ach_id,
                              b.iem_id,
                              b.iem_cd,
                              SUM(b.usd_ach_scr) AS usd_ach_scr,
                              SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                              SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                              a.stdt_id,
                              a.std_at,
                              a.unit_num
                          FROM aidt_lms.usd_ach_src2_info a
                                INNER JOIN aidt_lms.usd_ach_src2_detail b
                                        ON a.id = b.usd_ach_src_id
                                INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                                        ON a.cla_id = tcmi.cla_id
                                       AND a.stdt_id = tcmi.stdt_id
                                       AND tcmi.actvtn_at = 'Y'
                          WHERE 1=1
                            AND a.usd_ach_id = #{evaluationAreaCd}
                            AND a.cla_id = #{claId}
                            AND a.textbk_id = #{textbookId}
                            <if test="unitNum > 0">
                                AND a.unit_num = #{unitNum}
                            </if>
                            AND a.std_dt = (
                                      SELECT MAX(dt.std_dt)
                                      FROM aidt_lms.usd_ach_src2_info dt
                                      WHERE 1=1
                                        AND dt.usd_ach_id = #{evaluationAreaCd}
                                        AND dt.cla_id = #{claId}
                                        AND dt.textbk_id = #{textbookId}
                                    <if test="unitNum > 0">
                                        AND dt.unit_num = #{unitNum}
                                    </if>
                          )
                          GROUP BY a.usd_ach_id, a.stdt_id
                      ) a
                 GROUP BY a.usd_ach_id, a.stdt_id
             ) b
        LEFT JOIN aidt_lms.`user` u ON u.user_id = b.stdt_id
        GROUP BY b.usd_ach_id, b.stdt_id, u.flnm
        ORDER BY u.flnm
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세(학생 목록) daily -->
    <select id="selectTchDsbdAreaAchievementStudentList_daily" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentList_daily - 사용안함 */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       (case
        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1
        when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2
        else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
        inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
        left join (
        select  a.stdt_id, a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
        from    aidt_lms.usd_ach_src2_info_daily a
        where   a.usd_ach_id        = #{code}
            and   a.cla_id          = #{claId}
            and   a.textbk_id       = #{textbookId}
            <if test="unitNum > 0">
                and   a.unit_num        = #{unitNum} /* 단원번호 */
            </if>
            and DATE_FORMAT(a.std_dt, '%Y%m%d') = #{stdDtYmd}
        group by a.stdt_id, a.usd_ach_id
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id =  #{claId}
        and a.actvtn_at = 'Y'
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 > 영역별 그래프 상세(학생 목록) -->
    <select id="selectTchDsbdAreaAchievementStudentListAll" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentListAll */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       (case
                    when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1
                    when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 50 then 2
                 else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
            inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
            left join (
                        select  a.stdt_id, a.usd_ach_id, sum(a.usd_ach_scr) as usd_ach_scr, sum(a.rflt_actv_cnt) as rflt_actv_cnt
                        from    aidt_lms.usd_ach_src2_info a
                        where   a.usd_ach_id      = #{evaluationAreaCd}
                          and   a.cla_id          = #{claId}
                          and   a.textbk_id       = #{textbookId}
                          <if test="unitNum > 0">
                          and   a.unit_num        = #{unitNum} /* 단원번호 */
                          </if>
                        and a.std_dt = (
                            select max(b.std_dt)
                            from aidt_lms.usd_ach_src2_info b
                            where 1=1
                            and   b.usd_ach_id      = #{evaluationAreaCd}
                            and   b.cla_id          = #{claId}
                            and   b.textbk_id       = #{textbookId}
                            <if test="unitNum > 0">
                            and   b.unit_num        = #{unitNum} /* 단원번호 */
                            </if>
                        )
                        group by a.stdt_id, a.usd_ach_id
            ) c on a.stdt_id = c.stdt_id
        where   a.cla_id =  #{claId}
        and a.actvtn_at = 'Y'
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 그래프 VocabularyCount -->
    <select id="selectTchDsbdStatusVocabularyCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusVocabularyCount */
        select  count(*)
        from    aidt_lms.usd_ach_src2_info a
        where     a.usd_ach_id    = 'vocabulary'
          and     a.cla_id        = #{claId}      /* 클래스 아이디 */
          and     a.textbk_id     = #{textbookId}
          <if test="unitNum > 0">
          and     a.unit_num      = #{unitNum}    /* 단원번호 */
          </if>
          and a.std_dt = (
              select max(b.std_dt)
              from aidt_lms.usd_ach_src2_info b
                where 1=1
                and   b.usd_ach_id    = 'vocabulary'
                and   b.cla_id        = #{claId}
                and   b.textbk_id     = #{textbookId}
                <if test="unitNum > 0">
                and   b.unit_num      = #{unitNum}    /* 단원번호 */
                </if>
        )
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 그래프 VocabularyCount -->
    <select id="selectTchDsbdStatusVocabularyCountAll" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusVocabularyCount */
        select  count(*)
        from    aidt_lms.usd_ach_src2_info
        where  1=1
        <choose>
            <when test="textbookId == '6981' or textbookId == '6982'">
                and usd_ach_id LIKE CONCAT('%', #{evaluationAreaCd}, '%')
            </when>
            <otherwise>
                and usd_ach_id = #{evaluationAreaCd}
            </otherwise>
        </choose>
            and     cla_id        = #{claId}      /* 클래스 아이디 */
            and     textbk_id     = #{textbookId}
            <if test="unitNum > 0">
            and     unit_num      = #{unitNum}    /* 단원번호 */
            </if>
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 그래프 VocabularyList -->
    <select id="selectTchDsbdStatusVocabularyList" parameterType="pagingParam" resultType="camelHashMap">
        /*TchDsbdMapper.selectTchDsbdStatusVocabularyList*/
        with usd_ach_src2_data as (
                        select
                            a.usd_ach_id
                            , b.iem_id
                            , b.iem_cd
                            , sum(b.usd_ach_scr) as usd_ach_scr
                            , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                            , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                            , a.stdt_id
                        from aidt_lms.usd_ach_src2_info a
                            inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                        where     a.usd_ach_id    = 'vocabulary'
                          and     a.cla_id        = #{param.claId}/* 클래스 아이디 */
                          and     a.textbk_id     = #{param.textbookId}
                          <if test="param.unitNum > 0">
                          and     a.unit_num      = #{param.unitNum} /* 단원번호 */
                          </if>
                        and a.std_dt = (
                            select max(c.std_dt)
                            from aidt_lms.usd_ach_src2_info c
                            where 1=1
                                and     c.usd_ach_id    = 'vocabulary'
                                and     c.cla_id        = #{param.claId}/* 클래스 아이디 */
                                and     c.textbk_id     = #{param.textbookId}
                                <if test="param.unitNum > 0">
                                and     c.unit_num      = #{param.unitNum} /* 단원번호 */
                                </if>
                            )
                        group by a.stdt_id, b.iem_cd
        )
        , total_usd_src_data as (
                select avg(a.total_usd_src)*100 as total_usd_src from (select b.usd_ach_id, b.iem_id, b.iem_cd, avg(usd_ach_scr_percent) as total_usd_src from usd_ach_src2_data as b group by b.iem_id) as a group by a.usd_ach_id
        )
        select  count(*) over () as full_count, row_number() over() as row_Num
        ,       usd_ach_id
        ,       round(sum(T.usd_ach_scr_percent), 2) as total_usd_src_temp
        ,       (select round(total_usd_src, 2) from total_usd_src_data) as total_usd_src
        ,       (select  (case when total_usd_src >= 70 then 1 when total_usd_src > 30 then 2 else 3 end) from total_usd_src_data) as total_lvl_ty
        ,       iem_id, iem_cd, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
        ,       ifnull(round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2), 0) as usd_ach_scr_percent
        ,       (case when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) >= 70 then 1 when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        from  usd_ach_src2_data T
        group by iem_id
        <if test="param.sortGbCd != null and param.sortGbCd != ''">
            <choose>
                <when test="param.sortGbCd == 'A1'">
                    order by iem_cd asc
                </when>
                <when test="param.sortGbCd == 'A2'">
                    order by iem_cd desc
                </when>
                <when test="param.sortGbCd == 'B1'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </when>
                <when test="param.sortGbCd == 'B2'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) desc
                </when>
                <otherwise>
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </otherwise>
            </choose>
        </if>
        limit #{pageable.pageSize} offset #{pageable.offset}
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 그래프 VocabularyList -->
    <select id="selectTchDsbdStatusVocabularyListAll" parameterType="pagingParam" resultType="camelHashMap">
        /*TchDsbdMapper.selectTchDsbdStatusVocabularyListAll*/
        with usd_ach_src2_data as (
                                    select
                                        a.usd_ach_id
                                        , b.iem_id
                                        , b.iem_cd
                                        , sum(b.usd_ach_scr) as usd_ach_scr
                                        , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                                        , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                                        , a.stdt_id
                                        , a.meta_id
                                    from aidt_lms.usd_ach_src2_info a
                                    inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                                    where  1=1
                                    <choose>
                                        <when test="textbookId == '6981' or textbookId == '6982'">
                                            and a.usd_ach_id LIKE CONCAT('%', #{evaluationAreaCd}, '%')
                                        </when>
                                        <otherwise>
                                            and a.usd_ach_id = #{evaluationAreaCd}
                                        </otherwise>
                                    </choose>
                                    and     a.cla_id        = #{claId}/* 클래스 아이디 */
                                    and     a.textbk_id     = #{textbookId}
                                    and     a.std_dt        = (
                                                            select max(c.std_dt)
                                                              from aidt_lms.usd_ach_src2_info c
                                                             where 1=1
                                                            <choose>
                                                                <when test="textbookId == '6981' or textbookId == '6982'">
                                                                    and c.usd_ach_id LIKE CONCAT('%', #{evaluationAreaCd}, '%')
                                                                </when>
                                                                <otherwise>
                                                                    and c.usd_ach_id = #{evaluationAreaCd}
                                                                </otherwise>
                                                            </choose>
                                                               and c.cla_id      = #{claId} /* 클래스 아이디 */
                                                               and c.textbk_id   = #{textbookId}
                                                            )
                                    <if test="unitNum > 0">
                                        and     a.unit_num      = #{unitNum} /* 단원번호 */
                                    </if>
                                    group by a.stdt_id, b.iem_id
        )
        , total_usd_src_data as (
                                    select
                                        <choose>
                                            <when test="evaluationAreaCd == 'pronunciation'">
                                                avg(a.total_usd_src) as total_usd_src
                                            </when>
                                            <otherwise>
                                                avg(a.total_usd_src)*100 as total_usd_src
                                            </otherwise>
                                        </choose>
                                    from (
                                            select
                                                b.usd_ach_id,
                                                b.iem_id,
                                                b.iem_cd, avg(usd_ach_scr_percent) as total_usd_src
                                            from usd_ach_src2_data as b
                                            group by b.iem_id
                                   ) as a group by a.usd_ach_id
        )
        select  count(*) over () as full_count, row_number() over() as row_Num
        ,       meta_id
        ,       usd_ach_id
        ,       round(sum(T.usd_ach_scr_percent), 2) as total_usd_src_temp
        <choose>
            <when test="textbookId == '6981' or textbookId == '6982'">
                ,       (select round(avg(total_usd_src), 2) from total_usd_src_data) as total_usd_src
                ,       (select  (case when avg(total_usd_src) >= 80 then 1 when avg(total_usd_src) >= 50 then 2 else 3 end) from total_usd_src_data) as total_lvl_ty
            </when>
             <otherwise>
                 ,       (select round(total_usd_src, 2) from total_usd_src_data) as total_usd_src
                 ,       (select  (case when total_usd_src >= 80 then 1 when total_usd_src >= 50 then 2 else 3 end) from total_usd_src_data) as total_lvl_ty
             </otherwise>
        </choose>
        ,       iem_id, iem_cd, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
             <choose>
                <when test="evaluationAreaCd == 'pronunciation'">
                    ,       ifnull(round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2), 0) as usd_ach_scr_percent
                    ,       (case when round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2) >= 80 then 1 when round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
                </when>
                <otherwise>
                    ,       ifnull(round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2), 0) as usd_ach_scr_percent
                    ,       (case when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) >= 80 then 1 when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) >= 50 then 2 else 3 end) as dfclt_lvl_ty

                </otherwise>
            </choose>
        from  usd_ach_src2_data T
        group by iem_id
        <if test="sortGbCd != null and sortGbCd != ''">
            <choose>
                <when test="sortGbCd == 'A1'">
                    order by iem_cd asc
                </when>
                <when test="sortGbCd == 'A2'">
                    order by iem_cd desc
                </when>
                <when test="sortGbCd == 'B1'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </when>
                <when test="sortGbCd == 'B2'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) desc
                </when>
                <otherwise>
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </otherwise>
            </choose>
        </if>
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 상세(상/중/하) -->
    <select id="selectTchDsbdVocabularyCountDetail" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdVocabularyCountDetail */
        select  (select contents_entry from aidt_lcms.libtext where id = #{iemId}) as iem_cd
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0) as usd_ach_scr, ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cntm
                ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info x
                                    inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                                where   x.usd_ach_id    = #{evaluationAreaCd}
                                  and   x.cla_id        = #{claId}
                                  and   x.textbk_id     = #{textbookId}
                                  <if test="unitNum > 0">
                                  and   x.unit_num      = #{unitNum} /* 단원번호 */
                                  </if>
                                and x.std_dt = (
                                    select max(z.std_dt)
                                    from aidt_lms.usd_ach_src2_info z
                                    where 1=1
                                        and   z.usd_ach_id    = #{evaluationAreaCd}
                                        and   z.cla_id        = #{claId}
                                        and   z.textbk_id     = #{textbookId}
                                        <if test="unitNum > 0">
                                        and   z.unit_num      = #{unitNum} /* 단원번호 */
                                        </if>
                                    )
                                group by x.stdt_id, x.usd_ach_id, y.iem_cd
                ) c on a.stdt_id = c.stdt_id
                where   a.cla_id = #{claId}
                  and   c.rflt_actv_cnt > 0
                  and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 상세(상/중/하) -->
    <select id="selectTchDsbdCountDetailAll" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCountDetailAll */
        select  (select contents_entry from aidt_lcms.libtext where id = #{iemId}) as iem_cd
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
        select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0) as usd_ach_scr, ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
            <choose>
                <when test="evaluationAreaCd == 'pronunciation'">
                    ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 80 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
                </when>
                <otherwise>
                    ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
                </otherwise>
            </choose>
        from    aidt_lms.tc_cla_mb_info a
        inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
        left join (
        select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
        from    aidt_lms.usd_ach_src2_info x
        inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id
        where x.usd_ach_id like CONCAT('%', #{evaluationAreaCd}, '%')
            <if test="iemId != null and iemId != ''">
                and   y.iem_id        = #{iemId}
            </if>
            and   x.cla_id        = #{claId}
            and   x.textbk_id     = #{textbookId}
            and   x.std_dt        = (
                                    select max(c.std_dt)
                                      from aidt_lms.usd_ach_src2_info c
                                     where 1=1
                                       and c.usd_ach_id like CONCAT('%', #{evaluationAreaCd}, '%')
                                       and c.cla_id      = #{claId} /* 클래스 아이디 */
                                       and c.textbk_id   = #{textbookId}
                                )
            <if test="unitNum > 0">
                and   x.unit_num      = #{unitNum} /* 단원번호 */
            </if>
        group by x.stdt_id, x.usd_ach_id, y.iem_cd
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id = #{claId}
            and c.rflt_actv_cnt > 0
            and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 상세(학생 목록) -->
    <select id="selectTchDsbdVocabularyStudentList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdVocabularyStudentList */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
            inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
            left join (
                        select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                        from    aidt_lms.usd_ach_src2_info x
                            inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                        where   x.usd_ach_id    = 'vocabulary'
                          and   x.cla_id        = #{claId}
                          and   x.textbk_id     = #{textbookId}
                          <if test="unitNum > 0">
                          and   x.unit_num      = #{unitNum} /* 단원번호 */
                          </if>
                        and x.std_dt = (
                            select max(z.std_dt)
                            from aidt_lms.usd_ach_src2_info z
                            where 1=1
                                and   z.usd_ach_id    = 'vocabulary'
                                and   z.cla_id        = #{claId}
                                and   z.textbk_id     = #{textbookId}
                                <if test="unitNum > 0">
                                and   z.unit_num      = #{unitNum} /* 단원번호 */
                                </if>
                            )
                        group by x.stdt_id, x.usd_ach_id, y.iem_cd
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id = #{claId}
        and a.actvtn_at = 'Y'
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Vocabulary 상세(학생 목록) -->
    <select id="selectTchDsbdStudentListAll" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStudentListAll */
        select  a.stdt_id, b.flnm
        <choose>
            <when test="evaluationAreaCd == 'pronunciation'">
                ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0) as usd_ach_scr
                ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 80 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
            </when>

            <otherwise>
                ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
                ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 80 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 50 then 2 else 3 end) as dfclt_lvl_ty
            </otherwise>
        </choose>
        ,       ifnull(c.rflt_actv_cnt, 0) as rflt_actv_cnt
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
        inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
        left join (
        select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
        from    aidt_lms.usd_ach_src2_info x
        inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id
        where x.usd_ach_id like CONCAT('%', #{evaluationAreaCd}, '%')
        <if test="iemId != null and iemId != ''">
            and   y.iem_id        = #{iemId}
        </if>
        and   x.cla_id        = #{claId}
        and   x.textbk_id     = #{textbookId}
        and   x.std_dt        = (
                                select max(c.std_dt)
                                  from aidt_lms.usd_ach_src2_info c
                                 where 1=1
                                   and c.usd_ach_id like CONCAT('%', #{evaluationAreaCd}, '%')
                                   and c.cla_id      = #{claId} /* 클래스 아이디 */
                                   and c.textbk_id   = #{textbookId}
                                )
        <if test="unitNum > 0">
            and   x.unit_num      = #{unitNum} /* 단원번호 */
        </if>
        group by x.stdt_id, x.usd_ach_id, y.iem_cd
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id = #{claId}
        and   c.rflt_actv_cnt <![CDATA[ > ]]> 0
        and a.actvtn_at = 'Y'
    </select>

    <select id="selectTchDsbdAreaAchievementAitutor2" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementAitutor2 */
        SELECT
            c.usd_ach_id,
            c.usd_ach_scr,
            c.rflt_actv_cnt AS rflt_actv_cnt,
            CASE
                WHEN c.usd_ach_id = 'pronunciation' THEN ROUND(AVG(c.usd_ach_scr_percent), 2)
                ELSE ROUND((AVG(c.usd_ach_scr_percent) * 100), 2)
            END AS usd_ach_scr_percent,
            CASE
                WHEN c.usd_ach_scr_percent <![CDATA[ >= ]]> 80 THEN 1
                WHEN c.usd_ach_scr_percent <![CDATA[ >= ]]> 50 THEN 2
                ELSE 3
            END AS dfclt_lvl_ty,
            c.std_at
        FROM (
                SELECT
                    b.usd_ach_id,
                    SUM(b.usd_ach_scr) AS usd_ach_scr,
                    SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                    AVG(b.usd_ach_scr_percent) AS usd_ach_scr_percent,
                    b.stdt_id,
                    b.std_at
                FROM (
                    SELECT
                        a.usd_ach_id,
                        SUM(a.usd_ach_scr) AS usd_ach_scr,
                        SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                        AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                        a.iem_cd,
                        a.iem_id,
                        a.stdt_id,
                        a.std_at
                    FROM (
                        SELECT
                            a.usd_ach_id,
                            b.iem_id,
                            b.iem_cd,
                            SUM(b.usd_ach_scr) AS usd_ach_scr,
                            SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                            SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                            a.stdt_id,
                            a.std_at
                        FROM aidt_lms.usd_ach_src2_info a
                        INNER JOIN aidt_lms.usd_ach_src2_detail b
                            ON a.id = b.usd_ach_src_id
                        WHERE 1=1
                        AND a.usd_ach_id = #{evaluationAreaCd}
                        AND a.cla_id = #{claId}
                        AND a.textbk_id = #{textbookId}
                        <if test="unitNum > 0">
                            AND   a.unit_num      = #{unitNum} /* 단원번호 */
                        </if>
                        AND a.std_dt = (
                                        SELECT MAX(dt.std_dt)
                                        FROM aidt_lms.usd_ach_src2_info dt
                                        WHERE 1=1
                                        AND dt.usd_ach_id = #{evaluationAreaCd}
                                        AND dt.cla_id = #{claId}
                                        AND dt.textbk_id = #{textbookId}
                                        <if test="unitNum > 0">
                                            AND   dt.unit_num      = #{unitNum} /* 단원번호 */
                                        </if>
                                    )
                        GROUP BY a.usd_ach_id, a.stdt_id
                    ) a
                    GROUP BY a.usd_ach_id
                ) b
                GROUP BY b.usd_ach_id
            ) c
        GROUP BY c.usd_ach_id
    </select>

    <select id="areaAchievementAitutorCnt" resultType="camelHashMap">
        /* TchDsbdMapper.areaAchievementAitutorCnt */
        SELECT
            SUM(CASE WHEN level = 1 THEN 1 ELSE 0 END) AS gdUsdAchScrCnt,
            SUM(CASE WHEN level = 2 THEN 1 ELSE 0 END) AS avUsdAchScrCnt,
            SUM(CASE WHEN level = 3 THEN 1 ELSE 0 END) AS bdUsdAchScrCnt
        FROM (
            SELECT
                b.usd_ach_id,
                CASE
                    WHEN b.usd_ach_id = 'pronunciation' THEN
                        CASE
                            WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 80 THEN '1' -- 상
                            WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 50 THEN '2' -- 중
                            ELSE '3' -- 하
                        END
                    ELSE
                        CASE
                            WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 0.8 THEN '1' -- 상
                            WHEN AVG(b.usd_ach_scr_percent) <![CDATA[ >= ]]> 0.5 THEN '2' -- 중
                            ELSE '3' -- 하
                        END
                END AS level
            FROM (
                SELECT
                a.usd_ach_id,
                SUM(a.usd_ach_scr) AS usd_ach_scr,
                SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                a.iem_cd,
                a.iem_id,
                a.stdt_id,
                a.std_at
                FROM (
                    SELECT
                        a.usd_ach_id,
                        b.iem_id,
                        b.iem_cd,
                        SUM(b.usd_ach_scr) AS usd_ach_scr,
                        SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                        SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                        a.stdt_id,
                        a.std_at
                    FROM aidt_lms.usd_ach_src2_info a
                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                            ON a.id = b.usd_ach_src_id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                            ON a.cla_id = tcmi.cla_id
                           AND a.stdt_id = tcmi.stdt_id
                           AND tcmi.actvtn_at = 'Y'
                    WHERE 1=1
                    AND a.usd_ach_id = #{evaluationAreaCd}
                    AND a.cla_id = #{claId}
                    AND a.textbk_id = #{textbookId}
                    <if test="unitNum > 0">
                        AND   a.unit_num      = #{unitNum} /* 단원번호 */
                    </if>
                    AND a.std_dt = (
                                SELECT MAX(dt.std_dt)
                                FROM aidt_lms.usd_ach_src2_info dt
                                WHERE 1=1
                                AND dt.usd_ach_id = #{evaluationAreaCd}
                                AND dt.cla_id = #{claId}
                                AND dt.textbk_id = #{textbookId}
                                <if test="unitNum > 0">
                                    AND   dt.unit_num      = #{unitNum} /* 단원번호 */
                                </if>
                    )
                    GROUP BY a.usd_ach_id, a.stdt_id
                ) a
                GROUP BY a.usd_ach_id, a.stdt_id
            ) b
            GROUP BY b.usd_ach_id, b.stdt_id
        ) c
        GROUP BY c.usd_ach_id
    </select>


    <select id="selectTchDsbdStatisticAchievementList1_daily" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatisticAchievementList1_daily 사용안함 */
        WITH RECURSIVE date_range AS (
            SELECT
                MIN(std_dt) AS std_dt
            FROM aidt_lms.usd_ach_src2_info_daily a
            WHERE 1=1
                and   a.cla_id        = #{claId}
                and   a.textbk_id     = #{textbookId}
                and   a.usd_ach_id    = #{evaluationAreaCd}
                <if test="unitNum > 0">
                    and   a.unit_num      = #{unitNum}
                </if>
            UNION ALL
            SELECT DATE_ADD(std_dt, INTERVAL 1 DAY)
            FROM date_range
            WHERE std_dt <![CDATA[<]]> DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) -- 어제 날짜까지
        )
        SELECT
            DATE_FORMAT(d.std_dt, '%Y%m%d') AS stdDt,
            DATE_FORMAT(d.std_dt, '%m/%d') AS stdDtYmd,
            CASE
                WHEN IFNULL(a.usd_ach_scr, 0) = 0 THEN 0
                ELSE ROUND(
                    (SUM(IFNULL(a.usd_ach_scr, 0)) OVER (ORDER BY d.std_dt ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) /
                    (SUM(IFNULL(a.rflt_actv_cnt, 0)) OVER (ORDER BY d.std_dt ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) * 100,
                    2
                )
            END AS usd_ach_scr
        FROM date_range d
        LEFT JOIN (
            SELECT
                DATE_FORMAT(a.std_dt, '%Y%m%d') AS stdDt,
                IFNULL(a.rflt_actv_cnt, 0) AS rflt_actv_cnt,
                IFNULL(a.usd_ach_scr, 0) AS usd_ach_scr
            FROM (
                SELECT
                    SUM(b.usd_ach_scr) AS usd_ach_scr,
                    SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                    ROUND((SUM(b.usd_ach_scr) / SUM(b.rflt_actv_cnt)), 2) AS usd_ach_scr_percent,
                    b.std_dt
                FROM (
                    SELECT
                        SUM(a.usd_ach_scr) AS usd_ach_scr,
                        SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                        a.stdt_id,
                        a.std_dt
                    FROM aidt_lms.usd_ach_src2_info_daily a
                    WHERE 1=1
                        and   a.cla_id        = #{claId}
                        and   a.textbk_id     = #{textbookId}
                        and   a.usd_ach_id    = #{evaluationAreaCd}
                        <if test="unitNum > 0">
                            and   a.unit_num      = #{unitNum}
                        </if>
                    GROUP BY a.stdt_id, a.std_dt
                ) b
                GROUP BY b.std_dt
            ) a
        ) a ON d.std_dt = a.stdDt
        ORDER BY d.std_dt
    </select>

    <select id="selectTchDsbdStatisticAchievementList1_old" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatisticAchievementList1_old - backup 사용 안함. */
        select
              date_format(a.std_dt, '%m/%d') as std_dt
             ,date_format(a.std_dt, '%Y%m%d') as std_dt_ymd
--              , ifnull(a.usd_ach_scr, 0) as usd_ach_scr
             , ifnull(a.rflt_actv_cnt, 0) as rflt_actv_cnt
             , ifnull(a.usd_ach_scr_percent, 0) as usd_ach_scr
        from (
                 select
                     sum(b.usd_ach_scr) as usd_ach_scr
                      , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                      , round((sum(b.usd_ach_scr_percent)*100/count(b.stdt_id)),2) as usd_ach_scr_percent
                      , b.std_dt
                 from (
                          select
                              sum(a.usd_ach_scr) as usd_ach_scr
                               , sum(a.rflt_actv_cnt) as rflt_actv_cnt
                               , sum(a.usd_ach_scr)/sum(a.rflt_actv_cnt) as usd_ach_scr_percent
                               , a.stdt_id
                               , a.std_dt
                          from aidt_lms.usd_ach_src2_info_daily a
                          where   1=1
                            and   a.cla_id        = #{claId}
                            and   a.textbk_id     = #{textbookId}
                            and   a.usd_ach_id    = #{evaluationAreaCd}
                            <if test="unitNum > 0">
                            and   a.unit_num      = #{unitNum}
                            </if>
                          group by stdt_id,std_dt
                      ) b
                 group by b.std_dt
             ) a
    </select>

    <select id="selectTchDsbdStatisticAchievementList1_main" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatisticAchievementList1 */
        SELECT c.stdDt
             , c.stdDtLabel
             , c.stdDtYmd
             , c.rflt_actv_cnt
             , c.usd_ach_scr AS usd_ach_scr_ori
             , c.usd_ach_id
             , IF(a.ed_dt IS NULL, 0, c.usd_ach_scr) AS usd_ach_scr
        FROM (
                 SELECT DATE_FORMAT(b.std_dt, '%Y-%m-%d') AS stdDt
                      , DATE_FORMAT(b.std_dt, '%Y%m%d') AS stdDtYmd
                      , DATE_FORMAT(b.std_dt, '%m/%d') AS stdDtLabel
                      , IFNULL(b.rflt_actv_cnt, 0) AS rflt_actv_cnt
                      , IFNULL(b.usd_ach_scr_percent, 0) AS usd_ach_scr
                      , b.meta_id
                      , b.usd_ach_id
                 FROM (
                          SELECT SUM(a.usd_ach_scr) AS usd_ach_scr
                               , SUM(a.rflt_actv_cnt) AS rflt_actv_cnt
                               , ROUND((SUM(a.usd_ach_scr_percent) * 100 / COUNT(a.stdt_id)), 2) AS usd_ach_scr_percent
                               , a.std_dt
                               , a.meta_id
                               , a.usd_ach_id
                          FROM (
                                   SELECT SUM(a.usd_ach_scr) AS usd_ach_scr
                                        , SUM(a.rflt_actv_cnt) AS rflt_actv_cnt
                                        , SUM(a.usd_ach_scr) / SUM(a.rflt_actv_cnt) AS usd_ach_scr_percent
                                        , a.stdt_id
                                        , a.std_dt
                                        , a.meta_id
                                        , a.usd_ach_id
                                   FROM aidt_lms.usd_ach_src2_info a
                                   WHERE 1 = 1
                                     AND a.cla_id = #{claId}
                                     AND a.textbk_id = #{textbookId}
                                     AND a.usd_ach_id = #{evaluationAreaCd}
                                    <if test="unitNum > 0">
                                        AND a.unit_num = #{unitNum}
                                    </if>
                                    GROUP BY a.std_dt, a.stdt_id
                               ) a
                          GROUP BY a.std_dt
                      ) b
             ) c
        JOIN (
            SELECT DISTINCT
                DATE_FORMAT(ed_dt, '%Y%m%d') AS ed_dt,
                (SELECT code FROM aidt_lcms.meta WHERE id = b.meta_id AND code = #{evaluationAreaCd}) AS code
                <if test="metaId != null and metaId != ''">
                    , unit_meta_id
                </if>
            FROM (
                -- 학습자료
                SELECT
                    DATE_FORMAT(sdrd.eak_ed_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sdri ON ti.id = sdri.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail sdrd
                    ON sdri.id = sdrd.dta_result_id
                    AND sdrd.eak_at = 'Y'
                    AND sdrd.mrk_ty <![CDATA[<>]]> 3
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = sdrd.dta_iem_id
                    AND amm.sub_id = sdrd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = sdrd.dta_iem_id
                    AND amm2.sub_id = sdrd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                -- 평가
                SELECT
                    DATE_FORMAT(ei.evl_cp_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.evl_info ei
                JOIN aidt_lms.evl_result_info eri
                    ON ei.id = eri.evl_id
                    AND eri.eak_stts_cd = 5
                    AND eri.mrk_cp_at = 'Y'
                    AND ei.rpt_othbc_at = 'Y'
                JOIN aidt_lms.evl_result_detail erd
                    ON eri.id = erd.evl_result_id
                    AND erd.eak_at = 'Y'
                    AND erd.mrk_ty <![CDATA[<>]]> 3
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = erd.evl_iem_id
                    AND amm.sub_id = erd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = erd.evl_iem_id
                    AND amm2.sub_id = erd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ei.cla_id = #{claId}
                AND ei.textbook_id = #{textbookId}

                UNION

                -- 과제
                SELECT
                    DATE_FORMAT(ti.task_prg_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.task_info ti
                JOIN aidt_lms.task_result_info tri
                    ON ti.id = tri.task_id
                    AND tri.subm_at = 'Y'
                    AND ti.rpt_othbc_at = 'Y'
                JOIN aidt_lms.task_result_detail trd
                    ON tri.id = trd.task_result_id
                    AND trd.eak_at = 'Y'
                    AND trd.mrk_ty <![CDATA[<>]]> 3
                    AND trd.mrk_cp_at = 'Y'
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = trd.task_iem_id
                    AND amm.sub_id = trd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = trd.task_iem_id
                    AND amm2.sub_id = trd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                -- 자기주도학습
                SELECT
                    DATE_FORMAT(ssri.std_ed_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.slf_std_info ssi
                JOIN aidt_lms.slf_std_result_info ssri ON ssi.id = ssri.std_id AND ssi.ed_at = 'Y'
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = ssri.module_id
                    AND amm.sub_id = ssri.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = ssri.module_id
                    AND amm2.sub_id = ssri.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ssi.cla_id = #{claId}
                AND ssi.textbk_id = #{textbookId}
            ) b
            WHERE ed_dt IS NOT NULL
        ) a ON a.ed_dt = c.stdDtYmd AND a.code = c.usd_ach_id
        <if test="metaId != null and metaId != ''">
            AND a.unit_meta_id = c.meta_id
        </if>
        order by c.stdDt
    </select>

    <select id="selectTchDsbdStatisticAchievementList1" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatisticAchievementList1 */
        SELECT c.stdDt
             , c.stdDtLabel
             , c.stdDtYmd
             , c.rflt_actv_cnt
             , c.usd_ach_scr AS usd_ach_scr_ori
             , c.usd_ach_id
             , IF(a.ed_dt IS NULL, 0, c.usd_ach_scr) AS usd_ach_scr
        FROM (
                 SELECT DATE_FORMAT(b.std_dt, '%Y-%m-%d') AS stdDt
                      , DATE_FORMAT(b.std_dt, '%Y%m%d') AS stdDtYmd
                      , DATE_FORMAT(b.std_dt, '%m/%d') AS stdDtLabel
                      , IFNULL(b.rflt_actv_cnt, 0) AS rflt_actv_cnt
                      , IFNULL(b.usd_ach_scr_percent, 0) AS usd_ach_scr
                      , b.meta_id
                      , b.usd_ach_id
                 FROM (
                          SELECT SUM(a.usd_ach_scr) AS usd_ach_scr
                               , SUM(a.rflt_actv_cnt) AS rflt_actv_cnt
                               , ROUND(SUM(a.usd_ach_scr) OVER(ORDER BY std_dt) * 100/ SUM(a.rflt_actv_cnt) OVER(ORDER BY std_dt), 2) AS usd_ach_scr_percent
                               , a.std_dt
                               , a.meta_id
                               , a.usd_ach_id
                          FROM (
                                   SELECT SUM(a.usd_ach_scr) AS usd_ach_scr
                                        , SUM(a.rflt_actv_cnt) AS rflt_actv_cnt
                                        , SUM(a.usd_ach_scr) / SUM(a.rflt_actv_cnt) AS usd_ach_scr_percent
                                        , a.stdt_id
                                        , a.std_dt
                                        , a.meta_id
                                        , a.usd_ach_id
                                   FROM aidt_lms.usd_ach_src2_info a
                                   WHERE 1 = 1
                                     AND a.cla_id = #{claId}
                                     AND a.textbk_id = #{textbookId}
                                     AND a.usd_ach_id = #{evaluationAreaCd}
                                    <if test="unitNum > 0">
                                        AND a.unit_num = #{unitNum}
                                    </if>
                                    GROUP BY a.std_dt, a.stdt_id
                               ) a
                          GROUP BY a.std_dt
                      ) b
             ) c
        JOIN (
            SELECT DISTINCT
                DATE_FORMAT(ed_dt, '%Y%m%d') AS ed_dt,
                (SELECT code FROM aidt_lcms.meta WHERE id = b.meta_id AND code = #{evaluationAreaCd}) AS code
                <if test="metaId != null and metaId != ''">
                    , unit_meta_id
                </if>
            FROM (
                -- 학습자료
                SELECT
                    CASE WHEN tch_errata_chg_at  = 'Y' THEN sdrd.tch_errata_chg_dt
                         ELSE IFNULL(DATE_FORMAT(sdrd.eak_ed_dt, '%Y-%m-%d'), DATE_FORMAT(sdrd.mdfy_dt, '%Y-%m-%d')) END AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sdri ON ti.id = sdri.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail sdrd
                    ON sdri.id = sdrd.dta_result_id
                    AND sdrd.eak_at = 'Y'
                    AND sdrd.mrk_ty <![CDATA[<>]]> 3
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = sdrd.dta_iem_id
                    AND amm.sub_id = sdrd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = sdrd.dta_iem_id
                    AND amm2.sub_id = sdrd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                -- 평가
                SELECT
                    DATE_FORMAT(
                         CASE
                           WHEN ei.rpt_othbc_dt IS NULL THEN ei.mrk_cp_dt
                           WHEN ei.mrk_cp_dt > ei.rpt_othbc_dt THEN ei.mrk_cp_dt
                           ELSE ei.rpt_othbc_dt
                         END,
                         '%Y-%m-%d'
                    ) AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.evl_info ei
                JOIN aidt_lms.evl_result_info eri
                    ON ei.id = eri.evl_id
                    AND ei.evl_stts_cd = 5  /* 채점완료 */
                    AND eri.mrk_cp_at = 'Y' /* 채점 완료 여부 */
                    AND ei.rpt_othbc_at = 'Y'
                JOIN aidt_lms.evl_result_detail erd
                    ON eri.id = erd.evl_result_id
                    AND erd.eak_at = 'Y'
                    AND erd.mrk_ty <![CDATA[<>]]> 3
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = erd.evl_iem_id
                    AND amm.sub_id = erd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = erd.evl_iem_id
                    AND amm2.sub_id = erd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ei.cla_id = #{claId}
                AND ei.textbook_id = #{textbookId}

                UNION

                -- 과제
                SELECT
                    DATE_FORMAT(
                         CASE
                           WHEN ti.rpt_othbc_dt IS NULL THEN ti.mrk_cp_dt
                           WHEN ti.mrk_cp_dt > ti.rpt_othbc_dt THEN ti.mrk_cp_dt
                           ELSE ti.rpt_othbc_dt
                         END,
                         '%Y-%m-%d'
                    ) AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.task_info ti
                JOIN aidt_lms.task_result_info tri
                    ON ti.id = tri.task_id
                    AND ti.task_stts_cd = 5     /* 채점완료 */
                    AND tri.subm_at = 'Y'       /* 제출 여부 */
                    AND ti.rpt_othbc_at = 'Y'
                JOIN aidt_lms.task_result_detail trd
                    ON tri.id = trd.task_result_id
                    AND trd.eak_at = 'Y'
                    AND trd.mrk_ty <![CDATA[<>]]> 3
                    AND trd.mrk_cp_at = 'Y'
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = trd.task_iem_id
                    AND amm.sub_id = trd.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = trd.task_iem_id
                    AND amm2.sub_id = trd.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ti.cla_id = #{claId}
                AND ti.textbk_id = #{textbookId}

                UNION

                -- 자기주도학습
                SELECT
                    DATE_FORMAT(ssri.std_ed_dt, '%Y-%m-%d') AS ed_dt,
                    amm.meta_id,
                    amm2.meta_id as unit_meta_id
                FROM aidt_lms.slf_std_info ssi
                JOIN aidt_lms.slf_std_result_info ssri ON ssi.id = ssri.std_id AND ssi.ed_at = 'Y'
                INNER JOIN aidt_lcms.article_meta_map amm
                    ON amm.article_id = ssri.module_id
                    AND amm.sub_id = ssri.sub_id
                    AND amm.meta_name = 'evaluationArea'
                    AND amm.meta_id = (SELECT id FROM aidt_lcms.meta WHERE id = amm.meta_id AND code = #{evaluationAreaCd})
                INNER JOIN aidt_lcms.article_meta_map amm2
                    ON amm2.article_id = ssri.module_id
                    AND amm2.sub_id = ssri.sub_id
                    AND amm2.meta_name = 'studyMap1'
                <if test="metaId != null and metaId != ''">
                    AND amm2.meta_id = #{metaId}
                </if>
                WHERE ssi.cla_id = #{claId}
                AND ssi.textbk_id = #{textbookId}
            ) b
            WHERE ed_dt IS NOT NULL
        ) a ON a.ed_dt = c.stdDtYmd AND a.code = c.usd_ach_id
        <if test="metaId != null and metaId != ''">
            AND a.unit_meta_id = c.meta_id
        </if>
        order by c.stdDt
    </select>

    <select id="selectTchDsbdStatisticAchievementList2" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatisticAchievementList2 */
        select
            b.usd_ach_id
--              , ifnull(sum(b.usd_ach_scr),0) as usd_ach_scr
             , ifnull(sum(b.rflt_actv_cnt),0) as rflt_actv_cnt
             , ifnull(
                case
                    when b.usd_ach_id = 'pronunciation' then round(avg(b.usd_ach_scr_percent), 2)
                    else round((avg(b.usd_ach_scr_percent) * 100),2)
                    end, 0
               ) as usd_ach_scr
             , b.stdt_id
             , date_format(b.std_dt, '%m/%d')
        from (
                 select
                     a.usd_ach_id
                      , sum(a.usd_ach_scr) as usd_ach_scr
                      , sum(a.rflt_actv_cnt) as rflt_actv_cnt
                      , AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent
                      , a.stdt_id
                      , a.std_dt
                 from (
                          select
                              a.usd_ach_id
                               , b.iem_id
                               , sum(b.usd_ach_scr) as usd_ach_scr
                               , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                               , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                               , a.stdt_id
                               , a.std_dt
                          from aidt_lms.usd_ach_src2_info a
                                   inner join  aidt_lms.usd_ach_src2_detail b
                                               on a.id = b.usd_ach_src_id
                          where 1=1
                            and a.usd_ach_id = #{evaluationAreaCd}
                            and a.cla_id = #{claId}
                            and a.textbk_id = #{textbookId}
                            <if test="unitNum > 0">
                                and   a.unit_num      = #{unitNum}
                            </if>
                          group by a.stdt_id, b.iem_cd, a.std_dt
                      ) a
                 group by  a.iem_id,a.std_dt
             ) b
        group by b.std_dt
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Grammar 그래프 GrammarCount -->
    <select id="selectTchDsbdStatusGrammarCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusGrammarCount */
        select  count(*)
        from    aidt_lms.usd_ach_src2_info a
        where   a.usd_ach_id    = 'grammar'
          and   a.cla_id        = #{claId}/* 클래스 아이디 */
          and   a.textbk_id     = #{textbookId}
        <if test="unitNum > 0">
          and   a.unit_num      = #{unitNum} /* 단원번호 */
        </if>
        and a.std_dt = (
            select max(b.std_dt)
            from aidt_lms.usd_ach_src2_info b
            where 1=1
                and   b.usd_ach_id    = 'grammar'
                and   b.cla_id        = #{claId}
                and   b.textbk_id     = #{textbookId}
                <if test="unitNum > 0">
                and   b.unit_num      = #{unitNum} /* 단원번호 */
                </if>
            )
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Grammar 그래프 GrammarList -->
    <select id="selectTchDsbdStatusGrammarList" parameterType="pagingParam" resultType="camelHashMap">
        with usd_ach_src2_data as (
                            select
                                a.usd_ach_id
                                , b.iem_id
                                , b.iem_cd
                                , sum(b.usd_ach_scr) as usd_ach_scr
                                , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                                , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                                , a.stdt_id
                            from aidt_lms.usd_ach_src2_info a
                                inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                            where     a.usd_ach_id    = 'grammar'
                              and     a.cla_id        = #{param.claId}/* 클래스 아이디 */
                              and     a.textbk_id     = #{param.textbookId}
                              <if test="param.unitNum > 0">
                              and     a.unit_num      = #{param.unitNum} /* 단원번호 */
                              </if>
                            and a.std_dt = (
                                select max(c.std_dt)
                                from aidt_lms.usd_ach_src2_info c
                                where 1=1
                                    and     c.usd_ach_id    = 'grammar'
                                    and     c.cla_id        = #{param.claId}/* 클래스 아이디 */
                                    and     c.textbk_id     = #{param.textbookId}
                                    <if test="param.unitNum > 0">
                                    and     c.unit_num      = #{param.unitNum} /* 단원번호 */
                                    </if>
                                )
                            group by a.stdt_id, b.iem_cd
        )
       , total_usd_src_data as (
                    select avg(a.total_usd_src)*100 as total_usd_src from (select b.usd_ach_id, b.iem_id, b.iem_cd, avg(usd_ach_scr_percent) as total_usd_src from usd_ach_src2_data as b group by b.iem_id) as a group by a.usd_ach_id
        )
        select  count(*) over () as full_count, row_number() over() as row_Num
        ,       usd_ach_id
        ,       round(sum(T.usd_ach_scr_percent), 2) as total_usd_src_temp
        ,       (select round(total_usd_src, 2) from total_usd_src_data) as total_usd_src
        ,       (select  (case when total_usd_src >= 80 then 1 when total_usd_src > 50 then 2 else 3 end) from total_usd_src_data) as total_lvl_ty
        ,       iem_id, iem_cd, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
        ,       ifnull(round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2), 0) as usd_ach_scr_percent
        ,       (case when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) >= 80 then 1 when round((sum(T.usd_ach_scr_percent)*100/count(T.stdt_id)),2) > 50 then 2 else 3 end) as dfclt_lvl_ty
        from  usd_ach_src2_data T
        group by iem_id
        <if test="param.sortGbCd != null and param.sortGbCd != ''">
            <choose>
                <when test="param.sortGbCd == 'A1'">
                    order by iem_cd asc
                </when>
                <when test="param.sortGbCd == 'A2'">
                    order by iem_cd desc
                </when>
                <when test="param.sortGbCd == 'B1'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </when>
                <when test="param.sortGbCd == 'B2'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) desc
                </when>
                <otherwise>
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt))*100,2) asc
                </otherwise>
            </choose>
        </if>
        limit #{pageable.pageSize} offset #{pageable.offset}
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Grammar 그래프 상세(상/중/하) -->
    <select id="selectTchDsbdGrammarCountDetail" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdGrammarCountDetail */
        select  (select val from aidt_lcms.meta where id = #{iemId}) as iem_cd
        ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
        ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
        ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2),0) as usd_ach_scr, ifnull(c.rflt_actv_cnt,0) as rflt_actv_cnt
                ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info x
                                    inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                                where   x.usd_ach_id    = 'grammar'
                                  and   x.cla_id        = #{claId}
                                  and   x.textbk_id     = #{textbookId}
                                  <if test="unitNum > 0">
                                  and   x.unit_num      = #{unitNum} /* 단원번호 */
                                  </if>
                                and x.std_dt = (
                                    select max(z.std_dt)
                                    from aidt_lms.usd_ach_src2_info z
                                    where 1=1
                                        and   z.usd_ach_id    = 'grammar'
                                        and   z.cla_id        = #{claId}
                                        and   z.textbk_id     = #{textbookId}
                                        <if test="unitNum > 0">
                                        and   z.unit_num      = #{unitNum} /* 단원번호 */
                                        </if>
                                    )
                                group by x.stdt_id, x.usd_ach_id, y.iem_cd
                ) c on a.stdt_id = c.stdt_id
                where   a.cla_id = #{claId}
                and   c.rflt_actv_cnt > 0
                and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Grammar 그래프 상세(학생 목록) -->
    <select id="selectTchDsbdGrammarStudentList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdGrammarStudentList */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt,0) as rflt_actv_cnt
        ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
            inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
            left join (
                        select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                        from    aidt_lms.usd_ach_src2_info x
                            inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                        where   x.usd_ach_id    = 'grammar'
                          and   x.cla_id        = #{claId}
                          and   x.textbk_id     = #{textbookId}
                          <if test="unitNum > 0">
                          and   x.unit_num      = #{unitNum} /* 단원번호 */
                          </if>
                        and x.std_dt = (
                            select max(z.std_dt)
                            from aidt_lms.usd_ach_src2_info z
                            where 1=1
                                and   z.usd_ach_id    = 'grammar'
                                and   z.cla_id        = #{claId}
                                and   z.textbk_id     = #{textbookId}
                                <if test="unitNum > 0">
                                and   z.unit_num      = #{unitNum} /* 단원번호 */
                                </if>
                            )
                        group by x.stdt_id, x.usd_ach_id, y.iem_cd
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id = #{claId}
        and a.actvtn_at = 'Y'
    </select>


    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Pronunciation 그래프 PronunciationCount  -->
    <select id="selectTchDsbdStatusPronunciationCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusPronunciationCount */
        select  count(*)
        from    aidt_lms.usd_ach_src2_info a
        where     a.usd_ach_id    = 'pronunciation'
          and     a.cla_id        = #{claId}/* 클래스 아이디 */
          and     a.textbk_id     = #{textbookId}
          <if test="unitNum > 0">
          and     a.unit_num      = #{unitNum} /* 단원번호 */
          </if>
          and a.std_dt = (
              select max(b.std_dt)
              from aidt_lms.usd_ach_src2_info b
              where 1=1
                and   b.usd_ach_id    = 'pronunciation'
                and   b.cla_id        = #{claId}
                and   b.textbk_id     = #{textbookId}
                <if test="unitNum > 0">
                and   b.unit_num      = #{unitNum} /* 단원번호 */
                </if>
              )
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Pronunciation 그래프 PronunciationList  -->
    <select id="selectTchDsbdStatusPronunciationList" parameterType="pagingParam" resultType="camelHashMap">
        with usd_ach_src2_data as (
                        select
                            a.usd_ach_id
                            , b.iem_id
                            , b.iem_cd
                            , sum(b.usd_ach_scr) as usd_ach_scr
                            , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                            , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                            , a.stdt_id
                        from aidt_lms.usd_ach_src2_info a
                            inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                        where     a.usd_ach_id    = 'pronunciation'
                          and     a.cla_id        = #{param.claId}/* 클래스 아이디 */
                          and     a.textbk_id     = #{param.textbookId}
                          <if test="param.unitNum > 0">
                          and     a.unit_num      = #{param.unitNum} /* 단원번호 */
                          </if>
                        and a.std_dt = (
                            select max(c.std_dt)
                            from aidt_lms.usd_ach_src2_info c
                            where 1=1
                                and     c.usd_ach_id    = 'pronunciation'
                                and     c.cla_id        = #{param.claId}/* 클래스 아이디 */
                                and     c.textbk_id     = #{param.textbookId}
                                <if test="param.unitNum > 0">
                                and     c.unit_num      = #{param.unitNum} /* 단원번호 */
                                </if>
                            )
                        group by a.stdt_id, b.iem_cd
        )
        , total_usd_src_data as (
                    select avg(a.total_usd_src) as total_usd_src from (select b.usd_ach_id, b.iem_id, b.iem_cd, avg(usd_ach_scr_percent) as total_usd_src from usd_ach_src2_data as b group by b.iem_id) as a group by a.usd_ach_id
        )
        select  count(*) over () as full_count, row_number() over() as row_Num
        ,       usd_ach_id
        ,       round(sum(T.usd_ach_scr_percent), 2) as total_usd_src_temp
        ,       (select round(total_usd_src, 2) from total_usd_src_data) as total_usd_src
        ,       (select  (case when total_usd_src >= 70 then 1 when total_usd_src > 30 then 2 else 3 end) from total_usd_src_data) as total_lvl_ty
        ,       iem_id, iem_cd, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt
        ,       ifnull(round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2), 0) as usd_ach_scr_percent
        ,       (case when round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2) >= 70 then 1 when round((sum(T.usd_ach_scr_percent)/count(T.stdt_id)),2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        from  usd_ach_src2_data T
        group by iem_id
        <if test="param.sortGbCd != null and param.sortGbCd != ''">
            <choose>
                <when test="param.sortGbCd == 'A1'">
                    order by iem_cd asc
                </when>
                <when test="param.sortGbCd == 'A2'">
                    order by iem_cd desc
                </when>
                <when test="param.sortGbCd == 'B1'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt)),2) asc
                </when>
                <when test="param.sortGbCd == 'B2'">
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt)),2) desc
                </when>
                <otherwise>
                    order by round((sum(usd_ach_scr)/sum(rflt_actv_cnt)),2) asc
                </otherwise>
            </choose>
        </if>
        limit #{pageable.pageSize} offset #{pageable.offset}
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Pronunciation 그래프 (상/중/하) -->
    <select id="selectTchDsbdPronunciationCountDetail" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdPronunciationCountDetail */
        select  (select contents_entry from aidt_lcms.libtext where id = #{iemId}) as iem_cd
         ,       ifnull(sum(case when dfclt_lvl_ty = 1 then 1 else 0 end), 0) as upper
         ,       ifnull(sum(case when dfclt_lvl_ty = 2 then 1 else 0 end), 0) as middle
         ,       ifnull(sum(case when dfclt_lvl_ty = 3 then 1 else 0 end), 0) as lower
        from    (
                select  a.stdt_id, b.flnm, ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2),0) as usd_ach_scr, ifnull(c.rflt_actv_cnt,0) as rflt_actv_cnt
                ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt),2) > 30 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.tc_cla_mb_info a
                    inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                    left join (
                                select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                                from    aidt_lms.usd_ach_src2_info x
                                    inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                                where   x.usd_ach_id    = 'pronunciation'
                                  and   x.cla_id        = #{claId}
                                  and   x.textbk_id     = #{textbookId}
                                  <if test="unitNum > 0">
                                      and   x.unit_num      = #{unitNum} /* 단원번호 */
                                  </if>
                                and x.std_dt = (
                                    select max(z.std_dt)
                                    from aidt_lms.usd_ach_src2_info z
                                    where 1=1
                                        and   z.usd_ach_id    = 'pronunciation'
                                        and   z.cla_id        = #{claId}
                                        and   z.textbk_id     = #{textbookId}
                                    <if test="unitNum > 0">
                                        and   z.unit_num      = #{unitNum} /* 단원번호 */
                                    </if>
                                )
                                group by x.stdt_id, x.usd_ach_id, y.iem_cd
                ) c on a.stdt_id = c.stdt_id
                where   a.cla_id = #{claId}
                  and   c.rflt_actv_cnt > 0
                  and a.actvtn_at = 'Y'
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 단어/문법/발음 > Pronunciation 그래프 상세(학생 목록) -->
    <select id="selectTchDsbdPronunciationStudentList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdPronunciationStudentList */
        select  a.stdt_id, b.flnm
        ,       ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0) as usd_ach_scr
        ,       ifnull(c.rflt_actv_cnt,0) as rflt_actv_cnt
        ,       (case when round((c.usd_ach_scr/c.rflt_actv_cnt),2) >= 70 then 1 when round((c.usd_ach_scr/c.rflt_actv_cnt),2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        ,       (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end) as study_yn
        from    aidt_lms.tc_cla_mb_info a
            inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
            left join (
                        select  x.stdt_id, x.usd_ach_id, sum(y.usd_ach_scr) as usd_ach_scr, sum(y.rflt_actv_cnt) as rflt_actv_cnt
                        from    aidt_lms.usd_ach_src2_info x
                            inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id and y.iem_id = #{iemId}
                        where   x.usd_ach_id    = 'pronunciation'
                          and   x.cla_id        = #{claId}
                          and   x.textbk_id     = #{textbookId}
                          <if test="unitNum > 0">
                              and   x.unit_num      = #{unitNum} /* 단원번호 */
                          </if>
                        and x.std_dt = (
                            select max(z.std_dt)
                            from aidt_lms.usd_ach_src2_info z
                            where 1=1
                                and   z.usd_ach_id    = 'pronunciation'
                                and   z.cla_id        = #{claId}
                                and   x.textbk_id     = #{textbookId}
                                <if test="unitNum > 0">
                                and   z.unit_num      = #{unitNum} /* 단원번호 */
                                </if>
                            )
                        group by x.stdt_id, x.usd_ach_id, y.iem_cd
        ) c on a.stdt_id = c.stdt_id
        where   a.cla_id = #{claId}
        and   c.rflt_actv_cnt > 0
        and a.actvtn_at = 'Y'
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 성취 기준 AchievementStandardCount -->
    <select id="selectTchDsbdStdMapAchievementStandardCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStdMapAchievementStandardCount */
        select count(*)
        from    (
                select  a.unit_num, a.meta_id, a.kwg_main_id, sum(a.kwg_ach_num) as kwg_ach_num, sum(a.kwg_main_tot_exm_num) as kwg_tot_num
                from    aidt_lms.usd_ach_src2_kwg a
                where   a.kwg_main_cd = 'achievementStandard'
                  and   a.cla_id      = #{claId}
                  and   a.textbk_id   = #{textbookId}
                <if test="unitNum > 0">
                  and   a.unit_num    = #{unitNum}
                </if>
                  and a.std_dt = (
                  select max(b.std_dt)
                  from aidt_lms.usd_ach_src2_kwg b
                  where 1=1
                    and   b.kwg_main_cd = 'achievementStandard'
                    and   b.cla_id      = #{claId}
                    and   b.textbk_id   = #{textbookId}
                    <if test="unitNum > 0">
                    and   b.unit_num    = #{unitNum}
                    </if>
                  )
                group by a.unit_num, a.meta_id, a.kwg_main_id
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 성취 기준 AchievementStandardList -->
    <select id="selectTchDsbdStdMapAchievementStandardList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapAchievementStandardList */
        WITH temp AS (
            SELECT
                T1.id AS meta_id,
                T1.parent_id,
                T1.code,
                T1.parent_ac_nm,
                T1.ac_nm,
                T1.code_seq,
                CASE
                    WHEN T1.depth = 3 THEN CONCAT('[', T1.parent_ac_nm, '] ', T1.ac_nm)
                    ELSE T1.ac_nm
                    END AS full_ac_nm,
                T1.depth,
                T1.study_map_cd,
                CASE
                    WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '-'
                    ELSE IFNULL(ROUND((SUM(kwg_ach_num)/SUM(kwg_tot_num))*100, 2), '-')
                    END AS usd_scr,
                IFNULL(kwg_tot_num, 0) AS kwg_tot_count,
                /*CASE
                    WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '0'
                    ELSE IFNULL(kwg_tot_num, 0)
                    END AS kwg_tot_count, -- 2024/07/17 성취도가 없어도 관련학습은 노출*/
                T2.kwg_tot_num,
                T2.kwg_ach_num,
                T1.ac_cd
            FROM (
                    SELECT
                        a.id,
                        a.code,
                        '' AS ac_cd,
                        a.val AS ac_nm,
                        a.depth,
                        a.parent_id,
                        '' AS parent_ac_nm,
                        c.code AS study_map_cd,
                        CASE
                            WHEN a.code LIKE '%-reception-%' THEN 1
                            WHEN a.code LIKE '%-production-%' THEN 2
                            ELSE 3
                        END AS code_seq
                    FROM aidt_lcms.meta a
                    INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                    INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                    WHERE a.name = 'achievementStandard'
                    AND a.is_active = 1
                    AND c.is_active = 1
                    AND a.depth IN (3, 4)
                    AND EXISTS (
                                SELECT
                                    1
                                FROM aidt_lcms.meta m
                                inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                                inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='achievementStandard'
                                WHERE 1=1
                                AND a.code like concat(m2.code, '%')
                    )
                    <if test="unitNum > 0">
                        and  c.code like concat(#{unitCode}, '%')
                    </if>
                    GROUP BY a.code

                    UNION ALL

                    SELECT
                        d.id,
                        d.code,
                        d.val AS ac_cd,
                        e.val1 AS ac_nm,
                        d.depth,
                        f.parent_id,
                        f.val AS parent_ac_nm,
                        '' AS study_map_cd,
                        CASE
                            WHEN a.code LIKE '%-reception-%' THEN 1
                            WHEN a.code LIKE '%-production-%' THEN 2
                            ELSE 3
                        END AS code_seq
                    FROM aidt_lcms.meta a
                    INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                    INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                    INNER JOIN aidt_lcms.meta d ON a.parent_id = d.id
                    INNER JOIN aidt_lcms.meta_extension e ON d.meta_extension_id = e.meta_extension_id
                    INNER JOIN aidt_lcms.meta f ON d.parent_id = f.id
                    WHERE a.name = 'achievementStandard'
                    AND a.is_active = 1
                    AND a.depth IN (3, 4)
                    AND EXISTS (
                                SELECT
                                    1
                                FROM aidt_lcms.meta m
                                inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                                inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='achievementStandard'
                                WHERE 1=1
                                AND a.code like concat(m2.code, '%')
                    )
                    <if test="unitNum > 0">
                        AND   c.code like concat(#{unitCode}, '%')
                    </if>
                    GROUP BY d.code
        ) T1
        LEFT JOIN (
            SELECT
                a.unit_num,
                a.meta_id,
                a.kwg_main_id,
                SUM(a.kwg_ach_num) AS kwg_ach_num,
                SUM(a.kwg_main_tot_exm_num) AS kwg_tot_num
            FROM aidt_lms.usd_ach_src2_kwg a
            WHERE   a.kwg_main_cd = 'achievementStandard'
              and   a.cla_id      = #{claId}
              and   a.textbk_id   = #{textbookId}
            <if test="unitNum > 0">
              and   a.unit_num    = #{unitNum}
            </if>
              and a.std_dt = (
                  select max(b.std_dt)
                  from aidt_lms.usd_ach_src2_kwg b
                  where  1=1
                    and   b.kwg_main_cd = 'achievementStandard'
                    and   b.cla_id      = #{claId}
                    and   b.textbk_id   = #{textbookId}
                    <if test="unitNum > 0">
                    and   b.unit_num    = #{unitNum}
                    </if>
              )
            GROUP BY a.kwg_main_id
        ) T2 ON T1.id = T2.kwg_main_id
        GROUP BY T1.parent_id, T1.study_map_cd, T1.ac_cd, T1.depth, T1.code
        ORDER BY T1.code_seq, T1.code, T1.depth
        )
        SELECT
            A.meta_id,
            A.parent_id,
            A.code,
            A.parent_ac_nm,
            A.ac_cd,
            A.ac_nm,
            A.full_ac_nm,
            A.depth,
            A.study_map_cd,
            /*   A.kwg_tot_num, */
            /*   A.kwg_ach_num, */
            A.kwg_tot_count,
            C.val,
            CASE
                WHEN A.depth = 3 AND B.avg_usd_scr IS NOT NULL THEN
                    CASE
                        WHEN B.avg_usd_scr = '-' THEN '-'
                        ELSE ROUND(B.avg_usd_scr, 0)
                    END
                WHEN A.depth = 3 AND B.avg_usd_scr IS NULL THEN '-'
                WHEN A.usd_scr = '-' THEN '-'
                ELSE ROUND(CAST(A.usd_scr AS DECIMAL(10,2)), 0)
            END AS usd_scr,
            CASE
                WHEN A.depth = 3 AND  B.avg_usd_scr IS NOT NULL THEN B.avg_usd_scr
                WHEN  A.depth = 3 AND  B.avg_usd_scr IS NULL THEN '-'
                ELSE  A.usd_scr
            END AS original_usd_scr
        FROM temp A
        LEFT JOIN (
                SELECT
                    parent_id,
                    ROUND(SUM(usd_scr) / COUNT(*),2) AS avg_usd_scr
                FROM temp
                WHERE depth = 4
                AND usd_scr NOT IN ('-', '0')
                GROUP BY parent_id
        ) B ON A.meta_id = B.parent_id
        left join aidt_lcms.meta C
            on A.meta_id = C.id
        ORDER BY A.code_seq, A.code, A.depth;
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 의사소통 CommunicationCount -->
    <select id="selectTchDsbdStdMapCommunicationCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStdMapCommunicationCount */
        select count(*)
        from    (
                select  a.unit_num, a.meta_id, a.kwg_main_id, sum(a.kwg_ach_num) as kwg_ach_num, sum(a.kwg_main_tot_exm_num) as kwg_tot_num
                from    aidt_lms.usd_ach_src2_kwg a
                where   a.kwg_main_cd = 'communication'
                  and   a.cla_id      = #{claId}
                  and   a.textbk_id   = #{textbookId}
                <if test="unitNum > 0">
                  and   a.unit_num    = #{unitNum}
                </if>
                  and a.std_dt = (
                      select max(b.std_dt)
                      from aidt_lms.usd_ach_src2_kwg b
                      where   1=1
                        and   b.kwg_main_cd = 'communication'
                        and   b.cla_id      = #{claId}
                        and   b.textbk_id   = #{textbookId}
                        <if test="unitNum > 0">
                        and   b.unit_num    = #{unitNum}
                        </if>
                  )
                group by a.unit_num, a.meta_id, a.kwg_main_id
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 의사소통 CommunicationList -->
    <select id="selectTchDsbdStdMapCommunicationList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapCommunicationList */
        WITH temp AS (
            SELECT
                T1.id AS meta_id,
                T1.parent_id,
                T1.code,
                T1.parent_ac_nm,
                T1.ac_nm,
                T1.code_seq,
                (case
                when T1.depth = 2 then concat('[', T1.ac_nm ,']')
                else T1.ac_nm
                end) as full_co_nm,
                T1.depth,
                T1.study_map_cd,
                CASE
                    WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '-'
                    ELSE IFNULL(ROUND((SUM(kwg_ach_num)/SUM(kwg_tot_num))*100, 2), '-')
                    END AS usd_scr,
                CASE
                    WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '0'
                    ELSE IFNULL(kwg_tot_num, 0)
                END AS kwg_tot_count,
                T2.kwg_tot_num,
                T2.kwg_ach_num
            FROM (
                SELECT
                    a.id,
                    a.code,
                    a.val AS ac_nm,
                    a.depth,
                    a.parent_id,
                    '' AS parent_ac_nm,
                    c.code AS study_map_cd,
                    CASE
                        WHEN a.code LIKE '%-reception-%' THEN 1
                        WHEN a.code LIKE '%-production-%' THEN 2
                        ELSE 3
                    END AS code_seq
                FROM aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                WHERE a.name = 'communication'
                AND a.is_active = 1
                AND a.depth IN (2, 3)
                AND EXISTS (
                            SELECT
                                1
                            FROM aidt_lcms.meta m
                            inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                            inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='communication'
                            WHERE 1=1
                            AND a.code like concat(m2.code, '%')
                )
                <if test="unitNum > 0">
                    and  c.code like concat(#{unitCode}, '%')
                </if>
                GROUP BY a.code

                UNION ALL

                SELECT
                    d.id,
                    d.code,
                    e.val1 AS ac_nm,
                    d.depth,
                    f.parent_id,
                    f.val AS parent_ac_nm,
                    '' AS study_map_cd,
                    CASE
                        WHEN a.code LIKE '%-reception-%' THEN 1
                        WHEN a.code LIKE '%-production-%' THEN 2
                        ELSE 3
                    END AS code_seq
                FROM aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                INNER JOIN aidt_lcms.meta d ON a.parent_id = d.id
                INNER JOIN aidt_lcms.meta_extension e ON d.meta_extension_id = e.meta_extension_id
                INNER JOIN aidt_lcms.meta f ON d.parent_id = f.id
                WHERE a.name = 'communication'
                AND a.is_active = 1
                AND a.depth IN (2, 3)
                AND EXISTS (
                            SELECT
                                1
                            FROM aidt_lcms.meta m
                            inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                            inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='communication'
                            WHERE 1=1
                            AND a.code like concat(m2.code, '%')
                )
                <if test="unitNum > 0">
                    AND   c.code like concat(#{unitCode}, '%')
                </if>
                GROUP BY d.code
            ) T1
        LEFT JOIN (
            SELECT
                a.unit_num,
                a.meta_id,
                a.kwg_main_id,
                SUM(a.kwg_ach_num) AS kwg_ach_num,
                SUM(a.kwg_main_tot_exm_num) AS kwg_tot_num
            FROM aidt_lms.usd_ach_src2_kwg a
            WHERE   a.kwg_main_cd = 'communication'
              and   a.cla_id      = #{claId}
              and   a.textbk_id   = #{textbookId}
            <if test="unitNum > 0">
              and   a.unit_num  = #{unitNum}
            </if>
              and a.std_dt = (
                  select max(b.std_dt)
                  from aidt_lms.usd_ach_src2_kwg b
                  where   1=1
                    and   b.kwg_main_cd = 'communication'
                    and   b.cla_id      = #{claId}
                    and   b.textbk_id   = #{textbookId}
                    <if test="unitNum > 0">
                    and   b.unit_num  = #{unitNum}
                    </if>
              )
            GROUP BY a.kwg_main_id
            ) T2 ON T1.id = T2.kwg_main_id
            GROUP BY T1.parent_id, T1.study_map_cd, T1.ac_nm, T1.depth
            ORDER BY T1.code_seq, T1.code, T1.depth
        )

        SELECT
            A.meta_id,
            A.parent_id,
            A.code,
            A.ac_nm as co_nm,
            A.full_co_nm,
            A.depth,
            A.study_map_cd,
            /*   A.kwg_tot_num, */
            /*   A.kwg_ach_num, */
            A.kwg_tot_count,
            case
                when A.depth = 2 and  B.avg_usd_scr is not null then B.avg_usd_scr
                when  A.depth = 2 and  B.avg_usd_scr is null then '-'
                else  A.usd_scr
            end as usd_scr
        FROM temp A
        LEFT JOIN (
            SELECT
                parent_id,
                ROUND(SUM(usd_scr) / COUNT(*),2) AS avg_usd_scr
            FROM temp
            WHERE depth = 3
            AND usd_scr NOT IN ('-', '0')
            GROUP BY parent_id
        ) B ON A.meta_id = B.parent_id
        ORDER BY A.code_seq, A.code, A.depth;
    </select>

    <select id="selectTchDsbdStdMapMaterialCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStdMapMaterialCount */
        select count(*)
        from    (
        select  a.unit_num, a.meta_id, a.kwg_main_id, sum(a.kwg_ach_num) as kwg_ach_num, sum(a.kwg_main_tot_exm_num) as kwg_tot_num
        from    aidt_lms.usd_ach_src2_kwg a
        where   a.kwg_main_cd = 'material'
          and   a.cla_id      = #{claId}
          and   a.textbk_id   = #{textbookId}
        <if test="unitNum > 0">
            and   a.unit_num    = #{unitNum}
        </if>
          and a.std_dt = (
              select max(b.std_dt)
              from aidt_lms.usd_ach_src2_kwg b
              where   1=1
                and   b.kwg_main_cd = 'material'
                and   b.cla_id      = #{claId}
                and   b.textbk_id   = #{textbookId}
                <if test="unitNum > 0">
                and   b.unit_num    = #{unitNum}
                </if>
          )
        group by a.unit_num, a.meta_id, a.kwg_main_id
        ) T
    </select>

    <select id="selectTchDsbdStdMapMaterialList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapMaterialList */
        WITH temp AS (
            SELECT
            T1.id AS meta_id,
            T1.parent_id,
            T1.code,
            T1.parent_ac_nm,
            T1.ac_nm,
            T1.code_seq,
            (case
            when T1.depth = 2 then concat('[', T1.ac_nm ,']')
            else T1.ac_nm
            end) as full_ma_nm,
            T1.depth,
            T1.study_map_cd,
            CASE
                WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '-'
                ELSE IFNULL(ROUND((SUM(kwg_ach_num)/SUM(kwg_tot_num))*100, 2), '-')
            END AS usd_scr,
            CASE
                WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '0'
                ELSE IFNULL(kwg_tot_num, 0)
            END AS kwg_tot_count,
            T2.kwg_tot_num,
            T2.kwg_ach_num
        FROM (
            SELECT
                a.id,
                a.code,
                a.val AS ac_nm,
                a.depth,
                a.parent_id,
                '' AS parent_ac_nm,
                c.code AS study_map_cd,
                CASE
                    WHEN a.code LIKE '%-reception-%' THEN 1
                    WHEN a.code LIKE '%-production-%' THEN 2
                    ELSE 3
                END AS code_seq
            FROM aidt_lcms.meta a
            INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
            INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
            WHERE a.name = 'material'
            AND a.is_active = 1
            AND a.depth IN (2, 3, 4)
            AND EXISTS (
                        SELECT
                            1
                        FROM aidt_lcms.meta m
                        inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                        inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='material'
                        WHERE 1=1
                        AND a.code like concat(m2.code, '%')
            )
            <if test="unitNum > 0">
                and  c.code like concat(#{unitCode}, '%')
            </if>
            GROUP BY a.code

            UNION ALL

            SELECT
                d.id,
                d.code,
                e.val1 AS ac_nm,
                d.depth,
                f.parent_id,
                f.val AS parent_ac_nm,
                '' AS study_map_cd,
                CASE
                    WHEN a.code LIKE '%-reception-%' THEN 1
                    WHEN a.code LIKE '%-production-%' THEN 2
                    ELSE 3
                END AS code_seq
            FROM aidt_lcms.meta a
            INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
            INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
            INNER JOIN aidt_lcms.meta d ON a.parent_id = d.id
            INNER JOIN aidt_lcms.meta_extension e ON d.meta_extension_id = e.meta_extension_id
            INNER JOIN aidt_lcms.meta f ON d.parent_id = f.id
            WHERE a.name = 'material'
            AND a.is_active = 1
            AND a.depth IN (2, 3, 4)
            AND EXISTS (
                        SELECT
                            1
                        FROM aidt_lcms.meta m
                        inner join aidt_lcms.textbook tb on m.id = tb.curriBook and tb.id = #{textbookId}
                        inner join aidt_lcms.meta m2 on m.`val` = m2.`val` and m2.name ='material'
                        WHERE 1=1
                        AND a.code like concat(m2.code, '%')
            )
            <if test="unitNum > 0">
                AND   c.code like concat(#{unitCode}, '%')
            </if>
            GROUP BY d.code
        ) T1
        LEFT JOIN (
            SELECT
                a.unit_num,
                a.meta_id,
                a.kwg_main_id,
                SUM(a.kwg_ach_num) AS kwg_ach_num,
                SUM(a.kwg_main_tot_exm_num) AS kwg_tot_num
            FROM aidt_lms.usd_ach_src2_kwg a
            WHERE   a.kwg_main_cd = 'material'
              and   a.cla_id      = #{claId}
              and   a.textbk_id   = #{textbookId}
            <if test="unitNum > 0">
              and   a.unit_num  = #{unitNum}
            </if>
              and a.std_dt = (
                  select max(b.std_dt)
                  from aidt_lms.usd_ach_src2_kwg b
                  where   1=1
                    and   b.kwg_main_cd = 'material'
                    and   b.cla_id      = #{claId}
                    and   b.textbk_id   = #{textbookId}
                    <if test="unitNum > 0">
                    and   b.unit_num  = #{unitNum}
                    </if>
              )
            GROUP BY a.kwg_main_id
        ) T2 ON T1.id = T2.kwg_main_id
        GROUP BY T1.parent_id, T1.study_map_cd, T1.ac_nm, T1.depth
        ORDER BY T1.code_seq, T1.code, T1.depth
        ), depthTemp as(
            SELECT
                A.meta_id,
                A.parent_id,
                A.code,
                A.ac_nm as ma_nm,
                A.full_ma_nm,
                A.depth,
                A.study_map_cd,
                /* A.kwg_tot_num, */
                /* A.kwg_ach_num, */
                A.kwg_tot_count,
                A.code_seq,
                case
                    when A.depth = 3 and B.avg_usd_scr is not null then B.avg_usd_scr
                    when A.depth = 3 and B.avg_usd_scr is null then '-'
                    else A.usd_scr
                end as usd_scr
            FROM temp A
            LEFT JOIN (
                SELECT
                    parent_id,
                    ROUND(SUM(usd_scr) / COUNT(*),2) AS avg_usd_scr
                FROM temp
                WHERE depth = 4
                AND usd_scr NOT IN ('-', '0')
                GROUP BY parent_id
            ) B ON A.meta_id = B.parent_id
        )
        SELECT
            A.meta_id,
            A.parent_id,
            A.code,
            A.ma_nm,
            A.full_ma_nm,
            A.depth,
            A.study_map_cd,
            A.kwg_tot_count,
            case
                when A.depth = 2 and  B.avg_usd_scr is not null then B.avg_usd_scr
                when  A.depth = 2 and  B.avg_usd_scr is null then '-'
                else  A.usd_scr
            end as usd_scr
        FROM depthTemp A
        LEFT JOIN (
            SELECT
                parent_id,
                ROUND(SUM(usd_scr) / COUNT(*),2) AS avg_usd_scr
            FROM depthTemp
            WHERE depth = 3
            AND usd_scr NOT IN ('-', '0')
            GROUP BY parent_id
        ) B ON A.meta_id = B.parent_id
        ORDER BY A.code_seq, A.code, A.depth;
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 언어 형식 LanguageFormatCount -->
    <select id="selectTchDsbdStdMapLanguageFormatCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStdMapLanguageFormatCount */
        select count(*)
        from    (
                select  a.unit_num, a.meta_id, a.kwg_main_id, sum(a.kwg_ach_num) as kwg_ach_num, sum(a.kwg_main_tot_exm_num) as kwg_tot_num
                from    aidt_lms.usd_ach_src2_kwg a
                where   a.kwg_main_cd = 'languageFormat'
                  and   a.cla_id      = #{claId}
                  and   a.textbk_id   = #{textbookId}
                <if test="unitNum > 0">
                  and   a.unit_num    = #{unitNum}
                </if>
                  and a.std_dt = (
                      select max(b.std_dt)
                      from aidt_lms.usd_ach_src2_kwg b
                      where   1=1
                        and   b.kwg_main_cd = 'languageFormat'
                        and   b.cla_id      = #{claId}
                        and   b.textbk_id   = #{textbookId}
                        <if test="unitNum > 0">
                        and   b.unit_num    = #{unitNum}
                        </if>
                  )
                group by a.unit_num, a.meta_id, a.kwg_main_id
        ) T
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 언어 형식 LanguageFormatList -->
    <select id="selectTchDsbdStdMapLanguageFormatList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapLanguageFormatList */
        WITH matched_patterns AS (
            SELECT DISTINCT
                SUBSTRING_INDEX(m2.code, '-', 1) AS code_pattern
            FROM aidt_lcms.meta m
            INNER JOIN aidt_lcms.textbook tb ON m.id = tb.curriBook AND tb.id = #{textbookId}
            INNER JOIN aidt_lcms.meta m2 ON m.val = m2.val AND m2.name = 'languageFormat'
        ),
             first_query AS (
                 SELECT
                     a.id,
                     a.code,
                     a.val AS ac_nm,
                     a.depth,
                     a.parent_id,
                     '' AS parent_ac_nm,
                     c.code AS study_map_cd,
                     CASE
                         WHEN a.code LIKE '%-reception-%' THEN 1
                         WHEN a.code LIKE '%-production-%' THEN 2
                         ELSE 3
                         END AS code_seq
                 FROM aidt_lcms.meta a
                          INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                          INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                          INNER JOIN matched_patterns mp ON SUBSTRING_INDEX(a.code, '-', 1) = mp.code_pattern
                 WHERE a.name = 'languageFormat'
                   AND a.is_active = 1
                   AND a.depth IN (2, 3, 4)
                 GROUP BY a.code
             ),
             second_query AS (
                 SELECT
                     d.id,
                     d.code,
                     e.val1 AS ac_nm,
                     d.depth,
                     f.parent_id,
                     f.val AS parent_ac_nm,
                     '' AS study_map_cd,
                     CASE
                         WHEN a.code LIKE '%-reception-%' THEN 1
                         WHEN a.code LIKE '%-production-%' THEN 2
                         ELSE 3
                         END AS code_seq
                 FROM aidt_lcms.meta a
                          INNER JOIN aidt_lcms.meta_meta_map b ON a.id = b.meta_id_b
                          INNER JOIN aidt_lcms.meta c ON b.meta_id_a = c.id
                          INNER JOIN aidt_lcms.meta d ON a.parent_id = d.id
                          INNER JOIN aidt_lcms.meta_extension e ON d.meta_extension_id = e.meta_extension_id
                          INNER JOIN aidt_lcms.meta f ON d.parent_id = f.id
                          INNER JOIN matched_patterns mp ON SUBSTRING_INDEX(a.code, '-', 1) = mp.code_pattern
                 WHERE a.name = 'languageFormat'
                   AND a.is_active = 1
                   AND a.depth IN (2, 3, 4)
                 GROUP BY d.code
             ),
             combined_data AS (
                 SELECT * FROM first_query
                 UNION ALL
                 SELECT * FROM second_query
             ),
             temp AS (
                 SELECT
                     T1.id AS meta_id,
                     T1.parent_id,
                     T1.code,
                     T1.parent_ac_nm,
                     T1.ac_nm,
                     T1.code_seq,
                     (CASE
                          WHEN T1.depth = 2 THEN CONCAT('[', T1.ac_nm ,']')
                          ELSE T1.ac_nm
                         END) AS full_la_nm,
                     T1.depth,
                     T1.study_map_cd,
                     CASE
                         WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '-'
                         ELSE IFNULL(ROUND((SUM(kwg_ach_num)/SUM(kwg_tot_num))*100, 2), '-')
                         END AS usd_scr,
                     CASE
                         WHEN IFNULL(ROUND((kwg_ach_num/kwg_tot_num)*100, 2), '-') = 0 THEN '0'
                         ELSE IFNULL(kwg_tot_num, 0)
                         END AS kwg_tot_count,
                     T2.kwg_tot_num,
                     T2.kwg_ach_num
                 FROM combined_data T1
                          LEFT JOIN (
                     SELECT
                         a.unit_num,
                         a.meta_id,
                         a.kwg_main_id,
                         SUM(a.kwg_ach_num) AS kwg_ach_num,
                         SUM(a.kwg_main_tot_exm_num) AS kwg_tot_num
                     FROM aidt_lms.usd_ach_src2_kwg a
                     WHERE a.kwg_main_cd = 'languageFormat'
                        and a.cla_id      = #{claId}
                        and a.textbk_id   = #{textbookId}
                        <if test="unitNum > 0">
                            and a.unit_num    = #{unitNum}
                        </if>
                       AND a.std_dt = (
                         SELECT MAX(b.std_dt)
                         FROM aidt_lms.usd_ach_src2_kwg b
                         WHERE b.kwg_main_cd = 'languageFormat'
                         and b.cla_id      = #{claId}
                         and b.textbk_id   = #{textbookId}
                         <if test="unitNum > 0">
                            and b.unit_num    = #{unitNum}
                         </if>
                     )
                     GROUP BY a.kwg_main_id
                 ) T2 ON T1.id = T2.kwg_main_id
                 GROUP BY T1.parent_id, T1.study_map_cd, T1.ac_nm, T1.depth
                 ORDER BY T1.code_seq, T1.code, T1.depth
             )

        SELECT
            A.meta_id,
            A.parent_id,
            A.code,
            A.ac_nm AS la_nm,
            A.full_la_nm,
            A.depth,
            A.study_map_cd,
            A.kwg_tot_count,
            CASE
                WHEN A.depth = 3 AND B.avg_usd_scr IS NOT NULL THEN B.avg_usd_scr
                WHEN A.depth = 3 AND B.avg_usd_scr IS NULL THEN '-'
                ELSE A.usd_scr
            END AS usd_scr
        FROM temp A
        LEFT JOIN (
            SELECT
                meta_id,
                parent_id,
                ROUND(SUM(usd_scr) / COUNT(*),2) AS avg_usd_scr
            FROM temp
            WHERE depth IN (3,4)
            AND usd_scr NOT IN ('-', '0')
            GROUP BY meta_id
            ) B ON A.meta_id = B.meta_id
        ORDER BY A.code_seq, A.code, A.depth;
    </select>


    <select id="findStntCnt" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findStntCnt */
        select ifnull(count(*), 0) as stnt_cnt from aidt_lms.tc_cla_mb_info
        where cla_id= #{claId}
        and actvtn_at = 'Y'
    </select>

    <!--학습맵 이해도 (개념) : 선수 지식요인(개념) 이해도 정보 -->
    <!-- 현재 사용안함-->
    <select id="selectTchDsbdStdMapKwgList" parameterType="map" resultType="camelHashMap">
        select  /*TchDsbdMapper.selectTchDsbdStdMapKwgList*/
            A.val2              as kwg_main_id,
            B.val               as kwg_nm,
            ifnull(D.usd_scr,0) as kwg_usd_scr
        from
        (
        SELECT
            a.meta_id,
            a.id,
            a.val,
            a.val1,
            /* a.val2_org, */
            numbers.n as sort_num,
            (
            WITH RECURSIVE UNIT_INFO AS (
            SELECT
                id,
                parent_id,
                /* id_path_nm, */
                id_path,
                depth
             FROM aidt_lcms.v_curri_tree a
            WHERE a.textbk_id = #{textbookId}
             and a.id = SUBSTRING_INDEX(SUBSTRING_INDEX(a.val2,',',numbers.n),',',-1)  /* 학습맵(지식요인-studyMap_1) 값 */
            UNION ALL
            SELECT
                a.id,
                a.parent_id,
                /* a.id_path_nm, */
                a.id_path,
                a.depth
              FROM aidt_lcms.v_curri_tree a
             INNER JOIN UNIT_INFO b ON a.id = b.parent_id  and a.textbk_id = #{textbookId}
            )
            SELECT id FROM UNIT_INFO WHERE 1=1 and depth = 1
            ) as prev_meta_id,
            SUBSTRING_INDEX (SUBSTRING_INDEX(a.val2,',',numbers.n),',',-1) as val2
        FROM
            (
            WITH RECURSIVE cte AS (
            SELECT 1 AS n
            UNION ALL
            SELECT n + 1 FROM cte WHERE n <![CDATA[ < ]]>  10
            )
            select n from cte
            ) numbers
        INNER JOIN (
        select
            #{metaId} as meta_id, /* 2 단원 meta_id */
            b.id,
            b.val,
            a.val1,         /* 교육부 표준교육체계 코드 */
            /* a.val2 as val2_org, */
            replace(a.val2,'#^|',',') as val2 /* 선수학습 */
        from
            aidt_lcms.meta_extension a
        inner join aidt_lcms.meta b
           on a.meta_extension_id = b.meta_extension_id
        where b.meta_extension_id in (
        select
            b.meta_extension_id
            from aidt_lcms.meta a
        inner join aidt_lcms.meta b
           on a.id = #{metaId}   /* 2 단원 meta_id */
          and b.name = 'studyMap_1'
          and b.code like concat(a.code,'-%')
          )
        ) a
        ON CHAR_LENGTH(a.val2) - CHAR_LENGTH(REPLACE(a.val2,',','')) >= numbers.n-1
        ) A
        left join aidt_lcms.meta B
          on A.val2 = B.id
        left join aidt_lms.std_usd_unit_kwg_day_hist C
          on A.meta_id = C.meta_id
         and A.id = C.kwg_main_id
         and C.textbk_id = #{textbookId}
         and C.cla_id = #{claId}
         and C.std_dt = (
                        select max(std_dt)
                          from aidt_lms.std_usd_unit_kwg_day_hist
                         where textbk_id = C.textbk_id
                           and cla_id =  C.cla_id
                           and meta_id = C.meta_id
                           and kwg_main_id = C.kwg_main_id
                           and unit_num = C.unit_num
                        )
        left join aidt_lms.std_usd_unit_kwg_day_hist D
          on A.prev_meta_id = D.meta_id
         and A.val2 = D.kwg_main_id
         and D.textbk_id = #{textbookId}
         and D.cla_id = #{claId}
         and D.std_dt = (
                        select max(std_dt)
                          from aidt_lms.std_usd_unit_kwg_day_hist
                          where textbk_id = D.textbk_id
                            and cla_id =  D.cla_id
                            and meta_id = D.meta_id
                            and kwg_main_id = D.kwg_main_id
                            and unit_num = D.unit_num
                        )
        order by A.id, A.sort_num
    </select>

    <select id="findTchDsbdStatusAreaAchievementDetailInfo" parameterType="map" resultType="camelHashMap">
        /*TchDsbdMapper.findTchDsbdStatusAreaAchievementDetailInfo*/
        select 	'-' as stdt_id,
                  amm.article_id,
                  amm.sub_id,
                    case
                        when amm.sub_id <![CDATA[ <> ]]> 0 then s.thumbnail
                        else a.thumbnail
                    end as thumbnail,
                  /*ifnull (smy.thumbnail,a.thumbnail ) as thumbnail,*/
                  count(*) as rfltActvCnt, /* count에 의해서 1건으로 처리됨 */
                  m.code as articleCategory, /* 교과 아티클을 먼저 보이도록 순서 변경 */
                  m.id as meta_id
        from 	aidt_lcms.article a
                    join aidt_lcms.article_meta_map amm
                         on a.id = amm.article_id and amm.sub_id = #{subId} and amm.meta_name = 'articleCategory'
                    join aidt_lcms.meta m on amm.meta_id = m.id
                    left join aidt_lcms.setsummary s on a.id = s.article_id and s.sub_id = amm.sub_id
        where 1=1
          and a.id = #{articleId}
    </select>

    <select id="findTchDsbdStatusStudyMapDetail" parameterType="map" resultType="camelHashMap">
        /*TchDsbdMapper.findTchDsbdStatusStudyMapDetail*/
        SELECT
            a.unit_num
            , a.meta_id
            , a.kwg_main_id
            , SUM(a.kwg_ach_num) AS kwg_ach_num
            , SUM(a.kwg_main_tot_exm_num) AS kwg_tot_num
            , (SELECT val FROM aidt_lcms.meta WHERE id = a.meta_id) AS unit_nm
        FROM aidt_lms.usd_ach_src2_kwg a
        WHERE a.kwg_main_cd = #{studyMapCd}
          AND a.cla_id = #{claId}
          AND a.textbk_id = #{textbkId}
        <if test="unitNum != 0">
          AND a.unit_num = #{unitNum}
        </if>
          and a.std_dt = (
              select max(b.std_dt)
              from aidt_lms.usd_ach_src2_kwg b
              where   1=1
                and   b.kwg_main_cd = #{studyMapCd}
                and   b.cla_id      = #{claId}
                and   b.textbk_id   = #{textbkId}
                <if test="unitNum != 0">
                    AND b.unit_num = #{unitNum}
                </if>
          )
        <choose>
            <when test="metaId != null and metaId != ''">
                AND a.kwg_main_id = #{metaId}
                <if test="unitNum != 0">
                    GROUP BY a.unit_num, a.meta_id, a.kwg_main_id
                </if>
                <if test="unitNum == 0">
                    GROUP BY a.kwg_main_id
                </if>
            </when>
            <otherwise>
                <if test="unitNum != 0">
                    GROUP BY a.unit_num, a.meta_id
                </if>
                <if test="unitNum == 0">
                    GROUP BY a.kwg_main_id
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="findTchDsbdStatusStudyMapDetail_list" parameterType="map" resultType="camelHashMap">
            /*TchDsbdMapper.findTchDsbdStatusStudyMapDetail_list*/
            select   t.unitNum
                    ,t.stdt_id
                    ,t.article_id
                    ,t.sub_id
                    ,t.thumbnail
            from (
                    select (
                            select unit_num from
                                                (select row_number() over (order by b.`code`) as unit_num
                                                        , b.id
                                                   from aidt_lcms.meta a
                                                       inner join aidt_lcms.meta b
                                                          on a.`code` = b.description
                                                         and b.is_active = 1
                                                         and b.name = 'studyMap1'
                                                       inner join aidt_lcms.meta c
                                                          on c.id = b.parent_id
                                                         and c.is_active = 1
                                                       left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                                   where 1 = 1
                                                     and ifnull(d.val1,'1') = '1'
                                                     and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                                     and a.is_active = 1) s
                             where id = achInfo.meta_id) as unitNum
                            ,achInfo.stdt_id
                            ,achInfo.article_id
                            ,achInfo.sub_id
                            ,achInfo.thumbnail
                        from aidt_lms.ach_cac_src_info achInfo
                        where 1=1
                        and  achInfo.textbk_id = #{textbkId}
                        and  achInfo.cla_id = #{claId}
                    <if test="metaId != null and metaId != '' ">
                        and achInfo.kwg_main_id = #{metaId}
                    </if>
                    <if test="studyMapCd != null and studyMapCd != '' ">
                        and std_clsf = #{studyMapCd}
                    </if>
                    <if test="userId != null and userId != '' ">
                        and  #{userId} = (select user_id from aidt_lms.tc_cla_info where 1=1 and cla_id = #{claId})
                    </if>
                       and achInfo.errata is not null
                ) as t
             where 1=1
        <if test="unitNum != null and unitNum != '' and unitNum != 0">
            and t.unitNum = #{unitNum}
        </if>
            group by t.article_id, t.sub_id
    </select>


    <select id="findTchDsbdTargetArticle" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdTargetArticle */
        select nullif(a.article_list, '') as articleList, a.usd_clsf_cd
        from aidt_lms.usd_ach_src2_info a
        where a.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                 and   a.cla_id          = #{claId}
                                 and   a.textbk_id       = #{textbkId}
                                 <if test="unitNum > 0">
                                 and   a.unit_num        = #{unitNum} /* 단원번호 */
                                 </if>
                                 and   LOWER(a.usd_ach_id) = LOWER(#{evaluationAreaCd})
                                and a.std_dt = (
                                    select max(b.std_dt)
                                      from aidt_lms.usd_ach_src2_info b
                                     where 1=1
                                       and   b.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                       and   b.cla_id          = #{claId}
                                       and   b.textbk_id       = #{textbkId}
                                       <if test="unitNum > 0">
                                       and   b.unit_num        = #{unitNum} /* 단원번호 */
                                       </if>
                                       and   LOWER(b.usd_ach_id) = LOWER(#{evaluationAreaCd})
                                    )

    </select>

    <select id="selectTchDsbdStatusMathStnCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusMathStnCount */
        select
            count(1) as totalStntCount
        from(
                select
                    round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
                    , (case
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
                    else 3
                    end
                    ) as dfclt_lvl_ty
                    , c.flnm
                from aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                    left join aidt_lcms.meta m on m.id = suui.meta_id
                    inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
                where 1=1
                and suui.textbk_id = #{textbookId}
                and suui.cla_id = #{claId}
                and suui.std_at = 'Y'
                <if test="unitNum > 0">and unit_num = #{unitNum} /* 단원번호 */
                </if>
                group by suui
                .stdt_id
                order by usd_scr desc
        ) a
    </select>

    <select id="selectTchDsbdStatusMathBestStntList" resultType="camelHashMap" parameterType="map">
        /* tchDsbdMapper.selectTchDsbdStatusMathBestStntList */
        select
            round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
             , (case
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
                    else 3
            end
            ) as dfclt_lvl_ty
             , c.flnm
             , suui.stdt_id
        from 	aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                    left join aidt_lcms.meta m on m.id = suui.meta_id
                    inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
        where 	1=1
          and 	suui.textbk_id = #{textbookId}
          and     suui.cla_id =  #{claId}
          and     suui.std_at = 'Y'
        <if test="unitNum > 0">
            and unit_num = #{unitNum} /* 단원번호 */
        </if>
        group by suui.stdt_id
        having dfclt_lvl_ty = 1
        order by usd_scr desc
    </select>

    <select id="selectTchDsbdStatusMathBestStntCount" resultType="java.lang.Integer">
        /* tchDsbdMapper.selectTchDsbdStatusMathBestStntCount */
        select
            count(1) as bestStntCnt
        from(
            select
            round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
            , (case
            when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
            when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
            else 3
            end
            ) as dfclt_lvl_ty
            , c.flnm
            from aidt_lms.std_usd_unit_info suui
            join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
            left join aidt_lcms.meta m on m.id = suui.meta_id
            inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
            where 1=1
            and suui.textbk_id = #{textbookId}
            and suui.cla_id = #{claId}
            and suui.std_at = 'Y'
            <if test="unitNum > 0">and unit_num = #{unitNum} /* 단원번호 */
            </if>
            group by suui
            .stdt_id
            having dfclt_lvl_ty = 1
            order by usd_scr desc
        ) a
    </select>

    <select id="selectTchDsbdStatusMathMddStntList" resultType="camelHashMap" parameterType="map">
        /* tchDsbdMapper.selectTchDsbdStatusMathBestStntList */
        select
            round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
             , (case
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
                    else 3
            end
            ) as dfclt_lvl_ty
             , c.flnm
        from 	aidt_lms.std_usd_unit_info suui
                    join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
                    left join aidt_lcms.meta m on m.id = suui.meta_id
                    inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
        where 	1=1
          and 	suui.textbk_id = #{textbookId}
          and     suui.cla_id =  #{claId}
          and     suui.std_at = 'Y'
        <if test="unitNum > 0">
            and unit_num = #{unitNum} /* 단원번호 */
        </if>
        group by suui.stdt_id
        having dfclt_lvl_ty = 2
        order by usd_scr desc
    </select>

    <select id="selectTchDsbdStatusMathMddSStntCount" resultType="java.lang.Integer">
        /* tchDsbdMapper.selectTchDsbdStatusMathBestStntCount */
        select
            count(1) as mddStntCnt
        from(
            select
            round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
            , (case
            when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
            when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
            else 3
            end
            ) as dfclt_lvl_ty
            , c.flnm
            from aidt_lms.std_usd_unit_info suui
            join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
            left join aidt_lcms.meta m on m.id = suui.meta_id
            inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
            where 1=1
            and suui.textbk_id = #{textbookId}
            and suui.cla_id = #{claId}
            and suui.std_at = 'Y'
            <if test="unitNum > 0">and unit_num = #{unitNum} /* 단원번호 */
            </if>
            group by suui
            .stdt_id
            having dfclt_lvl_ty = 2
            order by usd_scr desc
        ) a
    </select>

    <select id="selectTchDsbdStatusMathWorstStntList" resultType="camelHashMap" parameterType="map">
        /* tchDsbdMapper.selectTchDsbdStatusMathWorstStntList */
        select
            round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
            , (case
                when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
                when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
                else 3
                end
            ) as dfclt_lvl_ty
            , c.flnm
            , suui.stdt_id
        from 	aidt_lms.std_usd_unit_info suui
        join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
        left join aidt_lcms.meta m on m.id = suui.meta_id
        inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
        where 	1=1
        and 	suui.textbk_id = #{textbookId}
        and     suui.cla_id =  #{claId}
        and     suui.std_at = 'Y'
        <if test="unitNum > 0">
            and unit_num = #{unitNum} /* 단원번호 */
        </if>
        group by suui.stdt_id
        having dfclt_lvl_ty = 3
        order by usd_scr desc
    </select>

    <select id="selectTchDsbdStatusMathWorstStntCount" resultType="java.lang.Integer">
        /*tchDsbdMapper.selectTchDsbdStatusMathWorstStntCount*/
        select
            count(1) as total_students_with_dfclt_lvl_ty_1
        from (
            select
                round((sum(usd_scr)/count(suui.stdt_id)),2) as usdAchScr
                , (case
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) >= 70 then 1
                    when round((sum(usd_scr)/count(suui.stdt_id)),2) > 30 then 2
                    else 3
                end
                ) as dfclt_lvl_ty
                , c.flnm
            from aidt_lms.std_usd_unit_info suui
            join aidt_lms.tc_cla_mb_info tcmi on tcmi.cla_id = suui.cla_id and tcmi.stdt_id = suui.stdt_id and tcmi.actvtn_at = 'Y'
            left join aidt_lcms.meta m on m.id = suui.meta_id
            inner join aidt_lms.stdt_reg_info c on suui.stdt_id = c.user_id
            where 1=1
            and suui.textbk_id = #{textbookId}
            and suui.cla_id = #{claId}
            and suui.std_at = 'Y'
            <if test="unitNum > 0">
                and unit_num = #{unitNum} /* 단원번호 */
            </if>
            group by suui.stdt_id
            having dfclt_lvl_ty = 3
            order by usd_scr desc
        ) a
    </select>

    <select id="selectTchDsbdStatusAreaAchievementCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementCount */
        WITH student_scores AS (
                SELECT
                    c.usd_ach_id,
                    c.stdt_id,
                    c.flnm,
                    ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.usd_ach_id)),2) AS usdAchScr,
                    (CASE
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) >= 70 THEN 1
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) > 30 THEN 2
                    ELSE 3
                    END) AS dfclt_lvl_ty
                FROM (
                        SELECT
                            a.usd_ach_id,
                            SUM(a.usd_ach_scr)*100/SUM(a.rflt_actv_cnt) AS usd_ach_scr_percent,
                            a.stdt_id,
                            b.flnm
                        FROM aidt_lms.usd_ach_src2_info a
                        INNER JOIN aidt_lms.stdt_reg_info b ON a.stdt_id = b.user_id
                        WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                        AND   cla_id          = #{claId}
                        AND   textbk_id       = #{textbookId}
                        <if test="unitNum > 0">
                            AND   unit_num     = #{unitNum} /* 단원번호 */
                        </if>
                        GROUP BY usd_ach_id, stdt_id

                        UNION ALL

                        SELECT
                            b.usd_ach_id,
                            CASE
                            WHEN b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                            ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100),2)
                            END AS usd_ach_scr_percent,
                            b.stdt_id,
                            b.flnm
                        FROM (
                            SELECT
                                a.usd_ach_id,
                                SUM(a.usd_ach_scr) AS usd_ach_scr,
                                SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                                AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                                a.article_list,
                                a.iem_cd,
                                a.iem_id,
                                a.stdt_id,
                                a.flnm
                            FROM (
                                    SELECT
                                        a.usd_ach_id,
                                        b.iem_id,
                                        b.iem_cd,
                                        SUM(b.usd_ach_scr) AS usd_ach_scr,
                                        SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                                        SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                                        a.stdt_id,
                                        b.article_list,
                                        c.flnm
                                    FROM aidt_lms.usd_ach_src2_info a
                                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                                        ON a.id = b.usd_ach_src_id
                                    INNER JOIN aidt_lms.stdt_reg_info c
                                        ON a.stdt_id = c.user_id
                                    WHERE 1=1
                                    AND a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                    AND a.cla_id = #{claId}
                                    AND a.textbk_id = #{textbookId}
                                    <if test="unitNum > 0">
                                        AND a.unit_num = #{unitNum} /* 단원번호 */
                                    </if>
                                    GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                            ) a
                        GROUP BY a.usd_ach_id, a.iem_id, a.stdt_id
                        ) b
                        GROUP BY b.usd_ach_id, b.stdt_id
                ) c
                GROUP BY c.stdt_id
        )
        SELECT
            COUNT(*) as totalStntCount
        FROM student_scores
    </select>

    <select id="selectTchDsbdStatusAreaAchievementBestStntList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementBestStntList */
        WITH student_scores AS (
                SELECT
                    c.usd_ach_id,
                    c.stdt_id,
                    c.flnm,
                    ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.usd_ach_id)),2) AS usdAchScr,
                    (CASE
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) >= 70 THEN 1
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) > 30 THEN 2
                    ELSE 3
                    END) AS dfclt_lvl_ty
                FROM (
                        SELECT
                            a.usd_ach_id,
                            SUM(a.usd_ach_scr)*100/SUM(a.rflt_actv_cnt) AS usd_ach_scr_percent,
                            a.stdt_id,
                            b.flnm
                        FROM aidt_lms.usd_ach_src2_info a
                        INNER JOIN aidt_lms.stdt_reg_info b ON a.stdt_id = b.user_id
                        WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                        AND   cla_id          = #{claId}
                        AND   textbk_id       = #{textbookId}
                        <if test="unitNum > 0">
                            AND   unit_num     = #{unitNum} /* 단원번호 */
                        </if>
                        GROUP BY usd_ach_id, stdt_id

                        UNION ALL

                        SELECT
                            b.usd_ach_id,
                            CASE
                            WHEN b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                            ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100),2)
                            END AS usd_ach_scr_percent,
                            b.stdt_id,
                            b.flnm
                            FROM (
                            SELECT
                            a.usd_ach_id,
                            SUM(a.usd_ach_scr) AS usd_ach_scr,
                            SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                            AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                            a.article_list,
                            a.iem_cd,
                            a.iem_id,
                            a.stdt_id,
                            a.flnm
                        FROM (
                                SELECT
                                    a.usd_ach_id,
                                    b.iem_id,
                                    b.iem_cd,
                                    SUM(b.usd_ach_scr) AS usd_ach_scr,
                                    SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                                    SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                                    a.stdt_id,
                                    b.article_list,
                                    c.flnm
                                FROM aidt_lms.usd_ach_src2_info a
                                INNER JOIN aidt_lms.usd_ach_src2_detail b
                                    ON a.id = b.usd_ach_src_id
                                INNER JOIN aidt_lms.stdt_reg_info c
                                    ON a.stdt_id = c.user_id
                                WHERE 1=1
                                AND a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                AND a.cla_id = #{claId}
                                AND a.textbk_id = #{textbookId}
                                <if test="unitNum > 0">
                                    AND a.unit_num = #{unitNum} /* 단원번호 */
                                </if>
                                GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                        ) a
                        GROUP BY a.usd_ach_id, a.iem_id, a.stdt_id
                        ) b
                        GROUP BY b.usd_ach_id, b.stdt_id
                ) c
                GROUP BY c.stdt_id
                HAVING dfclt_lvl_ty = 1
        )
        SELECT
            usd_ach_id,
            flnm,
            stdt_id,
            usdAchScr,
            dfclt_lvl_ty,
            COUNT(*) OVER() as bestStntCnt
        FROM student_scores
        ORDER BY usdAchScr DESC
        LIMIT 3;
    </select>

    <!-- 단원의 학생별 성취도 조회 -->
    <select id="selectTchDsbdStatusAreaAchievementStntInfo" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementStntInfo */
        select
            b.stdt_id
             ,       ifnull(sum(b.usd_ach_scr), 0) as usd_ach_scr
             ,       ifnull(sum(b.rflt_actv_cnt), 0) as rflt_actv_cnt
             ,       ifnull(round(avg(b.usd_ach_scr_percent), 2), 0) as usd_ach_scr_percent
             ,        case
                          when avg(b.usd_ach_scr_percent) >= 80 then 1
                          when avg(b.usd_ach_scr_percent) >= 50 then 2
                          else 3
                     end as dfclt_lvl_ty
             ,       ifnull(b.std_at, 'N') as std_at
        from (
                 select  id, code, val
                 from    aidt_lcms.meta
                 where 1=1
                   and name in ('evaluationArea','contentsItem','evaluationArea3')
                   and brand_id = '3'
                   and code != 'sentence' /*문장 사용 안함*/
             ) a
                 inner join (
            /* 학습 이력 + 단원정보 포함 */
            select
                usd_ach_id
                 , sum(c.usd_ach_scr) as usd_ach_scr
                 , sum(c.rflt_actv_cnt) as rflt_actv_cnt
                 ,  case
                        when c.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting') then round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        when c.usd_ach_id = 'pronunciation' then round(avg(c.usd_ach_scr_percent), 2)
                        else round((avg(c.usd_ach_scr_percent) * 100),2)
                    end as usd_ach_scr_percent
                 , c.std_at
                 , c.stdt_id
            from    (
                        select
                            usd_ach_id
                             , sum(usd_ach_scr) as usd_ach_scr
                             , sum(rflt_actv_cnt) as rflt_actv_cnt
                             , sum(usd_ach_scr)/sum(rflt_actv_cnt) as usd_ach_scr_percent
                             , a.stdt_id
                             , a.std_at
                         from aidt_lms.usd_ach_src2_info a
                    inner join aidt_lms.tc_cla_mb_info tcmi
                            on a.cla_id = tcmi.cla_id
                           and a.stdt_id = tcmi.stdt_id
                           and tcmi.actvtn_at = 'Y'
                        where   usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                          and   a.cla_id      = #{claId}
                          and   a.textbk_id   = #{textbookId}
                        <if test="unitNum > 0">
                            and unit_num = #{unitNum} /* 단원번호 */
                        </if>
                          and   std_dt  = (
                            select max(dt.std_dt)
                            from aidt_lms.usd_ach_src2_info dt
                            where  1=1
                              and   dt.cla_id          = #{claId}
                              and   dt.textbk_id       = #{textbookId}
                        )

                        group by usd_ach_id,stdt_id

                        union all

                        select
                            b.usd_ach_id
                             , sum(b.usd_ach_scr) as usd_ach_scr
                             , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                             , AVG(b.usd_ach_scr_percent) as usd_ach_scr_percen
                             , b.stdt_id
                             , b.std_at
                        from (
                                 select
                                     a.usd_ach_id
                                      , sum(a.usd_ach_scr) as usd_ach_scr
                                      , sum(a.rflt_actv_cnt) as rflt_actv_cnt
                                      , AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent
                                      , a.iem_cd
                                      , a.iem_id
                                      , a.stdt_id
                                      , a.std_at
                                 from (
                                          select
                                              a.usd_ach_id
                                               , b.iem_id
                                               , b.iem_cd
                                               , sum(b.usd_ach_scr) as usd_ach_scr
                                               , sum(b.rflt_actv_cnt) as rflt_actv_cnt
                                               , sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent
                                               , a.stdt_id
                                               , a.std_at
                                          from aidt_lms.usd_ach_src2_info a
                                        inner join  aidt_lms.usd_ach_src2_detail b
                                                on a.id = b.usd_ach_src_id
                                        INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                                                ON a.cla_id = tcmi.cla_id
                                               AND a.stdt_id = tcmi.stdt_id
                                               AND tcmi.actvtn_at = 'Y'
                                          where 1=1
                                            and a.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation')
                                            and a.cla_id      = #{claId}
                                            and a.textbk_id   = #{textbookId}
                                            <if test="unitNum > 0">
                                                and a.unit_num = #{unitNum} /* 단원번호 */
                                            </if>
                                            and   a.std_dt  = (
                                              select max(dt.std_dt)
                                              from aidt_lms.usd_ach_src2_info dt
                                              where  1=1
                                                and   dt.cla_id          = #{claId}
                                                and   dt.textbk_id       = #{textbookId}
                                          )
                                          group by a.usd_ach_id, a.stdt_id
                                      ) a
                                 group by a.usd_ach_id, a.stdt_id
                             ) b
                        group by b.usd_ach_id, b.stdt_id
                    ) c
            group by c.usd_ach_id, c.stdt_id
        ) b on a.code = b.usd_ach_id
        group by b.stdt_id
        order by b.stdt_id
    </select>


    <select id="selectTchDsbdStatusAreaAchievementWorstStntList" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementWorstStntList */
        WITH student_scores AS (
                SELECT
                    c.usd_ach_id,
                    c.stdt_id,
                    c.flnm,
                    ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.usd_ach_id)),2) AS usdAchScr,
                    (CASE
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) >= 70 THEN 1
                    WHEN ROUND((SUM(c.usd_ach_scr_percent)/COUNT(c.stdt_id)),2) > 30 THEN 2
                    ELSE 3
                    END) AS dfclt_lvl_ty
                FROM (
                        SELECT
                            a.usd_ach_id,
                            SUM(a.usd_ach_scr)*100/SUM(a.rflt_actv_cnt) AS usd_ach_scr_percent,
                            a.stdt_id,
                            b.flnm
                        FROM aidt_lms.usd_ach_src2_info a
                        INNER JOIN aidt_lms.stdt_reg_info b ON a.stdt_id = b.user_id
                        WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                        AND   a.cla_id          = #{claId}
                        AND   textbk_id       = #{textbookId}
                        <if test="unitNum > 0">
                            AND   unit_num     = #{unitNum} /* 단원번호 */
                        </if>
                        GROUP BY usd_ach_id, stdt_id

                        UNION ALL

                        SELECT
                            b.usd_ach_id,
                            CASE
                            WHEN b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                            ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100),2)
                            END AS usd_ach_scr_percent,
                            b.stdt_id,
                            b.flnm
                        FROM (
                                SELECT
                                    a.usd_ach_id,
                                    SUM(a.usd_ach_scr) AS usd_ach_scr,
                                    SUM(a.rflt_actv_cnt) AS rflt_actv_cnt,
                                    AVG(a.usd_ach_scr_percent) AS usd_ach_scr_percent,
                                    a.article_list,
                                    a.iem_cd,
                                    a.iem_id,
                                    a.stdt_id,
                                    a.flnm
                                FROM (
                                SELECT
                                    a.usd_ach_id,
                                    b.iem_id,
                                    b.iem_cd,
                                    SUM(b.usd_ach_scr) AS usd_ach_scr,
                                    SUM(b.rflt_actv_cnt) AS rflt_actv_cnt,
                                    SUM(b.usd_ach_scr)/SUM(b.rflt_actv_cnt) AS usd_ach_scr_percent,
                                    a.stdt_id,
                                    b.article_list,
                                    c.flnm
                                FROM aidt_lms.usd_ach_src2_info a
                                INNER JOIN aidt_lms.usd_ach_src2_detail b
                                    ON a.id = b.usd_ach_src_id
                                INNER JOIN aidt_lms.stdt_reg_info c
                                    ON a.stdt_id = c.user_id
                                WHERE 1=1
                                AND a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                AND a.cla_id = #{claId}
                                AND a.textbk_id = #{textbookId}
                                <if test="unitNum > 0">
                                    AND a.unit_num = #{unitNum} /* 단원번호 */
                                </if>
                                GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                ) a
                                GROUP BY a.usd_ach_id, a.iem_id, a.stdt_id
                        ) b
                        GROUP BY b.usd_ach_id, b.stdt_id
                ) c
                GROUP BY c.stdt_id
                HAVING dfclt_lvl_ty = 3
        )
        SELECT
            usd_ach_id,
            flnm,
            stdt_id,
            usdAchScr,
            dfclt_lvl_ty,
            COUNT(*) OVER() as worstStntCnt
        FROM student_scores
        ORDER BY usdAchScr DESC
        LIMIT 3;
    </select>



    <select id="selectTchDsbdStatusAreaAchievementBestStntCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementBestStntCount */
        select count(*) as bestStntCnt
        from (
                 select
                     c.stdt_id as stdt_id,
                     c.usd_ach_id,
                     round((sum(c.usd_ach_scr_percent)/count(c.usd_ach_id)), 2) as usd_ach_scr_percent,
                     (case
                          when round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)), 2) >= 70 then 1
                          when round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)), 2) > 30 then 2
                          else 3
                         end) as dfclt_lvl_ty,
                     c.flnm
                 from (
                          select
                              a.usd_ach_id,
                              sum(a.usd_ach_scr) * 100 / sum(a.rflt_actv_cnt) as usd_ach_scr_percent,
                              a.stdt_id,
                              b.flnm
                          from aidt_lms.usd_ach_src2_info a
                                   inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                          where a.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            and a.cla_id = #{claId}
                            and a.textbk_id = #{textbookId}
                            <if test="unitNum > 0">
                                and a.unit_num = #{unitNum} /* 단원번호 */
                            </if>
                          group by a.usd_ach_id, a.stdt_id

                          union all

                          select
                              b.usd_ach_id,
                              CASE
                                  when b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                                  ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100), 2)
                                  END AS usd_ach_scr_percent,
                              b.stdt_id,
                              b.flnm
                          from (
                                   select
                                       a.usd_ach_id,
                                       sum(a.usd_ach_scr) as usd_ach_scr,
                                       sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                       AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                       a.article_list,
                                       a.iem_cd,
                                       a.iem_id,
                                       a.stdt_id,
                                       a.flnm
                                   from (
                                            select
                                                a.usd_ach_id,
                                                b.iem_id,
                                                b.iem_cd,
                                                sum(b.usd_ach_scr) as usd_ach_scr,
                                                sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                                sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent,
                                                a.stdt_id,
                                                b.article_list,
                                                c.flnm
                                            from aidt_lms.usd_ach_src2_info a
                                                     inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                                                     inner join aidt_lms.stdt_reg_info c on a.stdt_id = c.user_id
                                            where a.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation')
                                            and a.cla_id = #{claId}
                                            and a.textbk_id = #{textbookId}
                                            <if test="unitNum > 0">
                                                and a.unit_num = #{unitNum} /* 단원번호 */
                                            </if>
                                            group by a.usd_ach_id, a.stdt_id, b.iem_cd
                                        ) a
                                   group by a.usd_ach_id, a.iem_id, a.stdt_id
                               ) b
                          group by b.usd_ach_id, b.stdt_id
                      ) as c
                 group by c.stdt_id
                 having dfclt_lvl_ty = 1
             ) as students
    </select>

    <select id="selectTchDsbdStatusAreaAchievementWorstStntCount" resultType="java.lang.Integer">
        /* TchDsbdMapper.selectTchDsbdStatusAreaAchievementWorstStntCount */
        select count(*) as total_students_with_dfclt_lvl_ty_1
        from (
                 select
                     c.stdt_id as stdt_id,
                     c.usd_ach_id,
                     round((sum(c.usd_ach_scr_percent)/count(c.usd_ach_id)), 2) as usd_ach_scr_percent,
                     (case
                          when round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)), 2) >= 70 then 1
                          when round((sum(c.usd_ach_scr_percent)/count(c.stdt_id)), 2) > 30 then 2
                          else 3
                         end) as dfclt_lvl_ty,
                     c.flnm
                 from (
                          select
                              a.usd_ach_id,
                              sum(a.usd_ach_scr) * 100 / sum(a.rflt_actv_cnt) as usd_ach_scr_percent,
                              a.stdt_id,
                              b.flnm
                          from aidt_lms.usd_ach_src2_info a
                                   inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                          where a.usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            and a.cla_id = #{claId}
                            and a.textbk_id = #{textbookId}
                            <if test="unitNum > 0">
                                and a.unit_num = #{unitNum} /* 단원번호 */
                            </if>
                          group by a.usd_ach_id, a.stdt_id

                          union all

                          select
                              b.usd_ach_id,
                              CASE
                                  when b.usd_ach_id = 'pronunciation' THEN ROUND(AVG(b.usd_ach_scr_percent), 2)
                                  ELSE ROUND((AVG(b.usd_ach_scr_percent) * 100), 2)
                                  END AS usd_ach_scr_percent,
                              b.stdt_id,
                              b.flnm
                          from (
                                   select
                                       a.usd_ach_id,
                                       sum(a.usd_ach_scr) as usd_ach_scr,
                                       sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                       AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                       a.article_list,
                                       a.iem_cd,
                                       a.iem_id,
                                       a.stdt_id,
                                       a.flnm
                                   from (
                                            select
                                                a.usd_ach_id,
                                                b.iem_id,
                                                b.iem_cd,
                                                sum(b.usd_ach_scr) as usd_ach_scr,
                                                sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                                sum(b.usd_ach_scr)/sum(b.rflt_actv_cnt) as usd_ach_scr_percent,
                                                a.stdt_id,
                                                b.article_list,
                                                c.flnm
                                            from aidt_lms.usd_ach_src2_info a
                                                     inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                                                     inner join aidt_lms.stdt_reg_info c on a.stdt_id = c.user_id
                                            where a.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation')
                                            and a.cla_id = #{claId}
                                            and a.textbk_id = #{textbookId}
                                            <if test="unitNum > 0">
                                                and a.unit_num = #{unitNum} /* 단원번호 */
                                            </if>
                                            group by a.usd_ach_id, a.stdt_id, b.iem_cd
                                        ) a
                                   group by a.usd_ach_id, a.iem_id, a.stdt_id
                               ) b
                          group by b.usd_ach_id, b.stdt_id
                      ) as c
                 group by c.stdt_id
                 having dfclt_lvl_ty = 3
             ) as students
    </select>

    <select id="selectTchDsbdEvalList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdEvalList */
        select
            COUNT(*) over () AS full_count
            , ei.id as evlId
            , ei.evl_nm
            , DATE_FORMAT(ei.evl_prg_dt, "%Y-%m-%d %H:%i:%s") as rcntEvlDt
            , DATE_FORMAT(ei.evl_cp_dt, "%Y-%m-%d %H:%i:%s") as endDt
            , ei.eam_mth
            , aidt_lms.F_CODE_NM('eam_mth', ei.eam_mth) as eam_mth
            , ei.eam_trget
            , (select convert(count(1), CHAR) from aidt_lms.evl_result_info eri where eri.evl_id = ei.id) as evlTotalStntCnt
            , case evl_stts_cd
            when 1 then 0
            else (select convert(count(1), CHAR) from aidt_lms.evl_result_info eri where eri.evl_id = ei.id and eri.subm_at = 'Y')
            end as evlAttendStntCnt
            , case evl_stts_cd
            when 1 then '-'
            else if(evl_stts_cd >= 2 and evl_stts_cd <![CDATA[<]]> 5, '1', '2')
            end as mrkSttsCd
            , case evl_stts_cd
            when 1 then '-'
            else if(evl_stts_cd >= 2 and evl_stts_cd <![CDATA[<]]> 5, '채점필요', '채점완료')
            end as mrkSttsNm
        from   aidt_lms.evl_info ei
        where  1=1
        and    ei.cla_id = #{claId}
        and    ei.textbook_id = #{textbookId}
        /*and    ei.tmpr_strg_at = 'N'*/
        and    ei.evl_stts_cd = '2'
        order by
        case when ei.evl_stts_cd > 1 then evl_prg_dt END desc
    </select>

    <select id="selectTchDsbdTaskList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdTaskList */
        select
            COUNT(*) over () AS full_count
            , ti.id as taskId
            , ti.task_nm
            , task_stts_cd
            , aidt_lms.F_CODE_NM('task_stts_cd', task_stts_cd) as task_stts_nm
            , DATE_FORMAT(ti.task_prg_dt, "%Y-%m-%d %H:%i:%s") as rcntTaskDt
            , DATE_FORMAT(ti.task_cp_dt, "%Y-%m-%d %H:%i:%s") as endDt
            , ti.eam_mth
            , aidt_lms.F_CODE_NM('eam_mth', ti.eam_mth) as eam_mth_nm
            , ti.eam_trget
            , case task_stts_cd
            when 1 then '-'
            else (select convert(count(1), CHAR) from aidt_lms.task_result_info tri where tri.task_id = ti.id)
            end as taskTotalStntCnt
            , case task_stts_cd
            when 1 then '-'
            else (select convert(count(1), CHAR) from aidt_lms.task_result_info tri where tri.task_id = ti.id and tri.subm_at = 'Y')
            end as taskAttendStntCnt
            , case task_stts_cd
            when 1 then '-'
            else if(task_stts_cd >= 2 and task_stts_cd <![CDATA[<]]> 5, '1', '2')
            end as mrkSttsCd
            , case task_stts_cd
            when 1 then '-'
            else if(task_stts_cd >= 2 and task_stts_cd <![CDATA[<]]> 5, '채점필요', '채점완료')
            end as mrkSttsNm
            , case when task_cp_dt <![CDATA[<]]> now() then 'Y' else 'N' end as taskExpiredYn
        from   aidt_lms.task_info ti
        where  1=1
        and    ti.cla_id = #{claId}
        and    ti.textbk_id = #{textbookId}
        and    ti.task_stts_cd = '2'
        order by
        case when ti.task_stts_cd > 1 then task_prg_dt END desc
    </select>

    <select id="findTchDsbdEvlTaskList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdList */
        select x.gb
             , x.id
             , x.name
             , x.rcntDt
             , x.endDt
             , x.totalStntCnt
             , x.attendStntCnt
        from (select 'evl'                                                                                       as gb
                   , ei.id                                                                                       as id
                   , ei.evl_nm                                                                                   as name
                   , DATE_FORMAT(ei.evl_prg_dt, "%Y-%m-%d %H:%i:%s")                                             as rcntDt
                   , DATE_FORMAT(ei.evl_cp_dt, "%Y-%m-%d %H:%i:%s")                                              as endDt
                   , (select convert(count(1), CHAR) from aidt_lms.evl_result_info eri where eri.evl_id = ei.id) as totalStntCnt
                   , (select convert(count(1), CHAR)
                      from aidt_lms.evl_result_info eri
                      where eri.evl_id = ei.id
                        and eri.subm_at = 'Y')                                                                   as attendStntCnt
              from aidt_lms.evl_info ei
              where 1=1
                and ei.cla_id = #{claId}
                and ei.textbook_id = #{textbookId}
                and ei.evl_stts_cd = '2'
              union all
              select 'task'                                                                                        as gb
                   , ti.id                                                                                         as id
                   , ti.task_nm                                                                                    as name
                   , DATE_FORMAT(ti.task_prg_dt, "%Y-%m-%d %H:%i:%s")                                              as rcntDt
                   , DATE_FORMAT(ti.task_cp_dt, "%Y-%m-%d %H:%i:%s")                                               as endDt
                   , (select convert(count(1), CHAR)
                      from aidt_lms.task_result_info tri
                      where tri.task_id = ti.id)                                                                   as totalStntCnt
                   , (select convert(count(1), CHAR)
                      from aidt_lms.task_result_info tri
                      where tri.task_id = ti.id
                        and tri.subm_at = 'Y')                                                                     as attendStntCnt
              from aidt_lms.task_info ti
              where 1=1
                and ti.cla_id = #{claId}
                and ti.textbk_id = #{textbookId}
                and ti.task_stts_cd = '2') x
        order by x.rcntDt desc
    </select>

    <!-- 공지사항 홈 리스트 조회 -->
    <select id="selectHomeNoticeList" resultType="camelHashMap">
        /* TchDsbdMapper.selectNoticeList */
        select
            id as notice_id
             , nt_conts  /* 공지사항 내용 */
             , notice_yn /* 공지사항 고정 여부 */
             , DATE_FORMAT(reg_dt, '%Y-%m-%d %H:%i') as reg_dt /* 등록일 */
             , DATE_FORMAT(mdfy_dt, '%Y-%m-%d %H:%i') AS mdfy_dt /* 수정일 */
        from aidt_lms.tc_notice_brd
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
        ORDER BY
            notice_yn DESC, /* Y가 N보다 먼저 오도록 정렬 */
            CASE
                WHEN notice_yn = 'Y' THEN mdfy_dt /* 고정 공지는 수정일 기준 */
                ELSE reg_dt /* 일반 공지는 등록일 기준 */
                END DESC;
    </select>

    <!-- 공지사항 팝업 리스트 조회 -->
    <select id="selectPopupNoticeList" resultType="camelHashMap">
        /* TchDsbdMapper.selectNoticeList */
        select
            id as notice_id
             , nt_conts
             , notice_yn
             , DATE_FORMAT(reg_dt, '%Y-%m-%d %H:%i') as reg_dt
        from aidt_lms.tc_notice_brd
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
        order by
            notice_yn = 'Y' DESC,  /* notice_yn = 'Y'인 것을 우선 */
            reg_dt DESC            /* 그 다음 최신순 */
    </select>

    <!-- 공지사항 등록 -->
    <insert id="insertNotice" parameterType="map">
        insert into aidt_lms.tc_notice_brd
            (
             wrter_id
             , cla_id
             , textbk_id
             , nt_conts
             , rgtr
             , reg_dt
             , mdfr
             , mdfy_dt
            )
        values
            (
             #{userId}
             , #{claId}
             , #{textbookId}
             , #{ntConts}
             , #{userId}
             , NOW()
             , #{userId}
             , NOW()
           )
    </insert>

    <!-- 공지사항 핀 고정 업데이트 -->
    <update id="updateNoticePin" parameterType="map">
        update aidt_lms.tc_notice_brd
        set
            notice_yn = #{noticeYn}
          , mdfr = #{userId}
          , mdfy_dt = NOW()
        where 1=1
          and id = #{noticeId}
    </update>

    <!-- 공지사항 삭제 -->
    <delete id="deleteNotice" parameterType="map">
        delete from aidt_lms.tc_notice_brd
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
          and id = #{noticeId}
    </delete>

    <!-- 접속학생통계 조회 -->
    <select id="selectStatisticParticipant" resultType="camelHashMap">
        /* TchDsbdMapper.selectStatisticParticipant */
        select tcp.stnt_id
             , tcp.cla_id
             , tcp.textbk_id
             , tcp.wrter_id
          from aidt_lms.tc_cls_participant tcp
                   join
               aidt_lms.tc_cla_mb_info tcmi on tcp.cla_id = tcmi.cla_id
                   and tcp.stnt_id      = tcmi.stdt_id
                   and tcp.cla_id       = #{claId}
                   and tcp.textbk_id    = #{textbookId}
                   <if test="stntId != null and stntId != '' ">
                    and tcp.stnt_id = #{stntId}
                   </if>
                   and tcmi.actvtn_at   = 'Y'
    </select>

    <select id="selectStatisticParticipant_back" resultType="camelHashMap">
        /* TchDsbdMapper.selectStatisticParticipant */
        select
              wrter_id
            , cla_id
            , textbk_id
            , stnt_id
        from aidt_lms.tc_cls_participant
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
        <if test="stntId != null and stntId != ''">
          and stnt_id = #{stntId}
        </if>
        group by wrter_id, cla_id, textbk_id, stnt_id
    </select>

    <!-- 접속학생통계 등록 -->
    <insert id="insertStatisticParticipant" parameterType="map">
        insert into aidt_lms.tc_cls_participant
        (
          wrter_id
        , cla_id
        , textbk_id
        , stnt_id
        , rgtr
        , reg_dt
        , mdfr
        , mdfy_dt
        )
        values
            (
              #{userId}
            , #{claId}
            , #{textbookId}
            , #{stntId}
            , #{userId}
            , NOW()
            , #{userId}
            , NOW()
            )
    </insert>

    <!-- 접속학생통계 업데이트 -->
    <update id="updateStatisticParticipant" parameterType="map">
        update aidt_lms.tc_cls_participant
        set
           mdfr = #{userId}
          , mdfy_dt = NOW()
        where 1=1
        and cla_id = #{claId}
        and textbk_id = #{textbookId}
        <if test="stntId != null and stntId != ''">
            and stnt_id = #{stntId}
        </if>
    </update>

    <!-- 접속학생통계 삭제 -->
    <delete id="deleteStatisticParticipant" parameterType="map">
        delete from aidt_lms.tc_cls_participant
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
    </delete>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 성취 기준(수학) -->
    <select id="selectTchDsbdStdMapMathAchievementStandardList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapMathAchievementStandardList */
        select
            c.val as contentAreaNm,
            a.achStdCd,
            a.achStdNm,
            a.meta_id,
            a.kwg_main_info,
            a.avg_usd_scr
        from
        (
            select
                a.val4 as achStdCd, /* 성취기준 코드 */
                a.val5 as achStdNm, /* 성취기준 명 */
                a.meta_id,
                GROUP_CONCAT(json_object('kwgMainId',a.kwg_main_id,'kwgMainNm',a.kwg_main_nm,'usdScr',ifnull(round(b.usd_scr,0),'-')) order by a.ordNum SEPARATOR '|') as kwg_main_info,
                ifnull(round(avg(b.usd_scr),0),'-') as avg_usd_scr
            from
                (
                    with recursive curriculum as (
                        select
                            b.id,
                            b.parent_id,
                            b.`code`,
                            b.name,
                            b.val,
                            cast(b.id as char(1000) character set utf8) as pk_path,
                            cast(b.`code` as char(1000) character set utf8) as id_path,
                            (b.depth -1) as depth,
                            b.meta_extension_id
                        from
                            aidt_lcms.meta a
                            inner join aidt_lcms.meta b
                               on a.`code` = b.description
                                   and b.is_active = 1
                                   and b.name = 'studyMap1'
                            inner join aidt_lcms.meta c
                               on c.id = b.parent_id
                                   and c.is_active = 1
                        where
                            1=1
                            and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbookId})
                            and a.is_active = 1
                            <if test="metaId > 0">
                            and b.id = #{metaId} /* 단원별 */
                            </if>
                        union all
                        select
                            b.id,
                            b.parent_id,
                            b.`code`,
                            b.name,
                            b.val,
                            concat(c.pk_path, ',', b.id) as pk_path,
                            concat(c.id_path, ' > ', b.`code`) as id_path,
                            1 + c.depth as depth,
                            b.meta_extension_id
                        from
                            aidt_lcms.meta b
                            inner join curriculum c
                               on c.id = b.parent_id
                                   and b.is_active = 1
                        where
                            b.name <![CDATA[<>]]> 'studyMap_2'
                    )
                    select
                        row_number() over () as ordNum,
                        me.val4,
                        me.val5,
                        CAST(SUBSTRING_INDEX(cc.pk_path,',',1) as unsigned) as meta_id, /* 대단원 ID */
                        cc.id as kwg_main_id,  /* 지식요인 ID */
                        cc.val as kwg_main_nm /* 지식요인 명 */
                    from
                        curriculum cc
                        left join aidt_lcms.meta_extension me
                            on cc.meta_extension_id = me.meta_extension_id
                    where 1=1
                        and cc.meta_extension_id is not null
                        <if test="textbookId == 1342">
                            /* 공통수학2 도형의 방정식 - 평행이동을 이용한 활용, 대칭이동을 이용한 활용 학습맵 제외 */
                            and cc.id not in (
                            25908, 25914
                            )
                        </if>
                        <if test="textbookId == 1152">
                            /* 중등수학1 ( 문자와 식 - 일차식의 덧셈의 원리, 일차식의 뺄셈의 원리 ) ( 좌표평면과 그래프 - 다양한 상황에 대한 그래프의 표현 ) ( 기본도형 - 작도 ) ( 통계 - 통계적 탐구 문제 설정, 공학 도구를 이용한 자료의 정리 및 해석 ) 학습맵 제외 */
                            and cc.id not in (
                            945, 41914, 959, 983, 41932, 1026
                            )
                        </if>
                    order by
                        cc.id_path
                ) a
                left join (
                    with max_std_dt as (
                        select max(std_dt) as maxStdDt
                        from aidt_lms.std_usd_unit_kwg_day_hist a
                        where 1=1
                            and a.textbk_id = #{textbookId}
                            and a.cla_id = #{claId}
                    )
                    select
                        b.meta_id,
                        b.kwg_main_id,
                        b.usd_scr
                    from aidt_lms.std_usd_unit_kwg_day_hist b
                    where 1=1
                      and b.std_dt = (select maxStdDt from max_std_dt)
                      and b.textbk_id = #{textbookId}
                      and b.cla_id = #{claId}
                ) b
                  on a.meta_id = b.meta_id
                      and a.kwg_main_id = b.kwg_main_id
            group by a.val4, a.val5, a.meta_id
        ) a
        left join aidt_lcms.meta_meta_map b
            on a.meta_id = b.meta_id_a
        left join aidt_lcms.meta c
            on b.meta_name_b = 'contentarea' and b.meta_id_b = c.id	/* 영역 */
    </select>

    <select id="targetStntCnt_back" parameterType="map" resultType="java.lang.Integer">
        /* TchDsbdMaidt_lms.targetStntCnt */
        select count(*)
          from aidt_lms.tc_cls_enrollment tce
                   join aidt_lms.tc_cla_mb_info tcmi on tce.cla_id = tcmi.cla_id and tce.stnt_id = tcmi.stdt_id and
                                                        tce.cla_id = #{claId}
              and tce.textbk_id = #{textbookId}
              and tce.wrter_id = #{userId}
              and tcmi.actvtn_at = 'Y'
    </select>


    <select id="targetStntCnt" parameterType="map" resultType="java.lang.Integer">
        /* TchDsbdMaidt_lms.targetStntCnt */
        select count(*) as targetStntCnt
          from aidt_lms.tc_cls_enrollment
         where 1=1
           and cla_id = #{claId}
           and textbk_id= #{textbookId}
    </select>

    <!-- 메모 등록 -->
    <insert id="insertMemo" parameterType="map">
        insert into aidt_lms.tc_class_memo
        (
          wrter_id
        , cla_id
        , textbk_id
        , memo_conts
        , rgtr
        , reg_dt
        , mdfr
        , mdfy_dt
        )
        values
            (
              #{userId}
            , #{claId}
            , #{textbookId}
            , #{memoConts}
            , #{userId}
            , NOW()
            , #{userId}
            , NOW()
            )
    </insert>

    <!-- 메모 리스트 조회 -->
    <select id="selectMemoList" resultType="camelHashMap">
        /* TchDsbdMapper.selectMemoList */
        select
            id as memo_id
             , memo_conts  /* 메모 내용 */
             , DATE_FORMAT(reg_dt, '%Y-%m-%d %H:%i') as reg_dt /* 등록일 */
             , DATE_FORMAT(mdfy_dt, '%Y-%m-%d %H:%i') as mdfy_dt /* 수정일 */
             , reg_dt as reg_dt_full
             , mdfy_dt as mdfy_dt_full
        from aidt_lms.tc_class_memo
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
        order by
            mdfy_dt_full desc, reg_dt_full DESC;
    </select>

    <!-- 메모 삭제 -->
    <delete id="deleteMemo" parameterType="map">
        delete from aidt_lms.tc_class_memo
        where 1=1
          and cla_id = #{claId}
          and textbk_id = #{textbookId}
          and id = #{memoId}
    </delete>

    <!-- 메모 수정 -->
    <update id="updateMemo" parameterType="map">
        /* TchDsbdMapper.updateMemo */
        UPDATE aidt_lms.tc_class_memo
        SET memo_conts = #{memoConts},
            mdfr = #{userId},
            mdfy_dt = NOW()
        WHERE id = #{memoId}
          AND cla_id = #{claId}
          AND textbk_id = #{textbookId}
          AND wrter_id = #{userId}
    </update>

    <!-- 단일 메모 조회 -->
    <select id="selectMemo" resultType="camelHashMap" parameterType="map">
        /* TchDsbdMapper.selectMemo */
        select
            id as memo_id
             , memo_conts  /* 메모 내용 */
             , DATE_FORMAT(reg_dt, '%Y-%m-%d %H:%i') as reg_dt /* 등록일 */
             ,DATE_FORMAT(mdfy_dt, '%Y-%m-%d %H:%i') as mdfy_dt /* 수정일 */
             , reg_dt as reg_dt_full
             , mdfy_dt as mdfy_dt_full
              ,rgtr /* 작성자 */
        from aidt_lms.tc_class_memo
         WHERE id = #{memoId}
          AND cla_id = #{claId}
          AND textbk_id = #{textbookId}
          AND wrter_id = #{userId}

    </select>

    <select id="selectTchDsbdCalendarEventsList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCalendarEventsList */
        select * from (
            -- 수업
            with dailylessons as (
                select
                    std.id as id,
                    min(std.std_st_dt) as stdt,
                    max(std.std_ed_dt) as eddt,
                    date(std.reg_dt) as reg_dt,
                    group_concat(distinct std.crcul_id order by std.std_st_dt) as daily_crcul_ids,
                    (
                        select count(stdt_id)
                        from aidt_lms.tc_cla_mb_info
                        where user_id = #{userId}
                        and cla_id = #{claId}
                        and actvtn_at = 'Y'
                    ) as target_cnt,
                    -- 참여 인원은 해당 날짜의 모든 차시에 대한 참여 인원을 구함
                    (
                        select count(distinct r.mamoym_id)
                        from aidt_lms.std_dta_result_info r
                        inner join aidt_lms.tab_info t
                            on r.textbk_tab_id = t.id
                        where t.textbk_id = #{textbookId}
                            and t.wrter_id = #{userId}
                            and t.cla_id = #{claId}
                            and t.crcul_id in (
                                select distinct std2.crcul_id
                                from aidt_lms.std_recode_info std2
                                where date(std2.std_st_dt) = date(std.std_st_dt)
                                and std2.cla_id = #{claId}
                                and std2.textbk_id = #{textbookId}
                                and std2.std_st_dt is not null
                                and std2.std_ed_dt is not null
                            )
                            and t.tab_add_at = 'N'
                            and t.setcategory = (
                                select id
                                from aidt_lcms.meta
                                where name = 'setCategory'
                                and code = 'textbook'
                            )
                    ) as submit_cnt
            from aidt_lms.std_recode_info std
            where 1=1
             and std.cla_id = #{claId}
             and std.textbk_id = #{textbookId}
             and std.std_st_dt is not null
             and std.std_ed_dt is not null
        <if test="stntId != null and stntId != ''">
             and std.reg_dt >= (
                select min(reg_dt)
                  from aidt_lms.tc_cla_mb_info
                 where cla_id =  #{claId}
                   and stdt_id = #{stntId}
                   and actvtn_at = 'Y')
        </if>
            group by date(std.std_st_dt)
        )
        select
            '1' as trgt_se_cd,
            dl.id,
            dl.daily_crcul_ids as trgtId,
            '' as name,
            '' as eam_mth,
            '' as tmpr_strg_at,
            0 as stts_cd,
            '' as stts_name,
            date_format(dl.stdt, "%Y-%m-%d %H:%i:%s") as stdt,
            date_format(dl.eddt, "%Y-%m-%d %H:%i:%s") as eddt,
            reg_dt,
            dl.target_cnt,
            dl.submit_cnt,
            '' as sets_id
        from dailylessons dl

        union all

        -- 평가
        select
            '3' as trgt_se_cd, /* 대상구분(1: 학습, 2: 과제, 3: 평가) */
            ei.id as id,  /* 수업/평과/과제 id*/
            ei.id as trgtId,  /* 평가 id*/
            ei.evl_nm as name, /*평과/과제 명*/
            (select code_nm from aidt_lms.se_code a where a.code_cd = ei.eam_mth and a.code_gb_cd = 'eam_mth') as eam_mth,
            ei.tmpr_strg_at as tmpr_strg_at,  /*임시 저장 여부*/
            ei.evl_stts_cd as stts_cd,  /*평가/과제 상태*/
            case
                when ei.evl_stts_cd = 2 then convert(aidt_lms.f_code_nm('evl_stts_cd', ei.evl_stts_cd), char)
                when (select if(count(1) = sum(if(erd.mrk_ty = 3, 1, 0) = 1), 'T', 'F')
                      from aidt_lms.evl_result_info eri
                               join aidt_lms.evl_result_detail erd on eri.id = erd.evl_result_id
                      where eri.evl_id = ei.id
                      group by eri.evl_id) = 'F'
                    then (select case when count(case when eri2.eak_stts_cd != 5 then 1 end) > 0
                                          then convert('채점 필요', char)
                                      else convert('채점 완료', char)
                                     end
                          from aidt_lms.evl_result_info eri2
                          where eri2.evl_id = ei.id)
                else convert('채점 불필요', char)
                end as stts_name,  /* 채점 여부*/
            date_format(ei.evl_prg_dt, "%Y-%m-%d") as stDt,       /* 시작일 */
            date_format(ei.evl_cp_dt, "%Y-%m-%d") as edDt,         /* 종료일 */
            date_format(ei.reg_dt, "%Y-%m-%d") as reg_dt,
            coalesce((select count(1) from aidt_lms.evl_result_info eri3
                      where eri3.evl_id = ei.id group by eri3.evl_id), 0) as target_cnt, /* 참여 인원 */
            coalesce((select count(1) from aidt_lms.evl_result_info eri4
                      where eri4.evl_id = ei.id and eri4.subm_at = 'Y'
                      group by eri4.evl_id), 0) as submit_cnt,      /* 제출 인원 */
            ei.sets_id as sets_id
        from aidt_lms.evl_info ei
        where 1=1
          and ei.cla_id = #{claId}
          and ei.textbook_id = #{textbookId}
          and ei.evl_prg_dt is not null
          and ei.evl_cp_dt is not null
        <if test="stntId != null and stntId != ''">
          and ei.reg_dt >= (
            select min(reg_dt)
              from aidt_lms.tc_cla_mb_info
             where cla_id =  #{claId}
               and stdt_id = #{stntId}
               and actvtn_at = 'Y')
        </if>
        union all

        -- 과제
        select
            '2' as trgt_se_cd, /* 대상구분(1: 학습, 2: 과제, 3: 평가) */
            ti.id as id,
            ti.id as trgtId,
            ti.task_nm as name,
            (select code_nm from aidt_lms.se_code a where a.code_cd = ti.eam_mth and a.code_gb_cd = 'eam_mth') as eam_mth,
            ti.tmpr_strg_at as tmpr_strg_at,
            ti.task_stts_cd as stts_cd,
            case
                when ti.task_stts_cd = 2 then convert(aidt_lms.f_code_nm('task_stts_cd', ti.task_stts_cd), char)
                when (select if(count(1) = sum(if(trd.mrk_ty = 3, 1, 0) = 1), 'T', 'F')
                      from aidt_lms.task_result_info tri
                               join aidt_lms.task_result_detail trd on tri.id = trd.task_result_id
                      where tri.task_id = ti.id
                      group by tri.task_id) = 'F'
                    then (select case when count(case when tri2.eak_stts_cd != 5 then 1 end) > 0
                                          then convert('채점 필요', char)
                                      else convert('채점 완료', char)
                                     end
                          from aidt_lms.task_result_info tri2
                          where tri2.task_id = ti.id)
                else convert('채점 불필요', char)
                end as stts_name,
            date_format(ti.task_prg_dt, "%Y-%m-%d") as stDt,
            date_format(ti.task_cp_dt, "%Y-%m-%d") as edDt,
            date_format(ti.reg_dt, "%Y-%m-%d") as reg_dt,
            coalesce((select count(1) from aidt_lms.task_result_info tri3
                      where tri3.task_id = ti.id group by tri3.task_id), 0) as target_cnt,
            coalesce((select count(1) from aidt_lms.task_result_info tri4
                      where tri4.task_id = ti.id and tri4.subm_at = 'Y'
                      group by tri4.task_id), 0) as submit_cnt,
            ifnull(ti.sets_id, '') as sets_id
        from aidt_lms.task_info ti
        <if test="stntId != null and stntId != ''">
            /*처방과제 필요 조건*/
            inner join aidt_lms.task_result_info tri on ti.id = tri.task_id
        </if>
        where 1=1
         <if test="stntId != null and stntId != ''">
            /*처방과제 필요 조건*/
            and tri.mamoym_id = #{stntId}
         </if>
          and ti.cla_id = #{claId}
          and ti.textbk_id = #{textbookId}
          and ti.task_prg_dt is not null
          and ti.task_cp_dt is not null
        <if test="stntId != null and stntId != ''">
            and ti.reg_dt >= (
             select min(reg_dt)
               from aidt_lms.tc_cla_mb_info
              where cla_id =  #{claId}
                and stdt_id = #{stntId}
                and actvtn_at = 'Y')
        </if>

        union all

        /* 게시판 과제 */
        select
            '4' as trgt_se_cd,
            cb.ntt_id as id,
            cb.ntt_id as trgtId,
            cb.ntt_sj as name,
            '' as eam_mth,
            '' as tmpr_strg_at,
            0 as stts_cd,
            <choose>
                <when test="stntId != null and stntId != ''">
                    convert(cbs.subm_at, char) as stts_name,
                </when>
                <otherwise>
                    '' as stts_name,
                </otherwise>
            </choose>
            date_format(cb.ntce_bgnde, "%Y-%m-%d %H:%i:%s") as stdt,
            date_format(cb.ntce_endde, "%Y-%m-%d %H:%i:%s") as eddt,
            date_format(cb.reg_dt, "%Y-%m-%d %H:%i:%s") as reg_dt,
            count(cbs.mamoym_id) as target_cnt,
            sum(if(cbs.subm_at = 'Y', 1, 0)) as submit_cnt,
            '' as sets_id
        from aidt_lms.cla_bbsmaster cbm
            join aidt_lms.cla_bbs cb
                on cbm.bbs_id = cb.bbs_id
            join aidt_lms.cla_bbs_stnt cbs
                on cb.ntt_id = cbs.ntt_id
        where cbm.cla_id = #{claId}
          and cbm.textbk_id = #{textbookId}
        <if test="stntId != null and stntId != ''">
          and cbs.mamoym_id = #{stntId}
          and cb.reg_dt >= (
            select min(reg_dt)
            from aidt_lms.tc_cla_mb_info
            where cla_id =  #{claId}
              and stdt_id = #{stntId}
              and actvtn_at = 'Y'
          )
        </if>
        group by cb.ntt_id, date(cb.ntce_bgnde)

        ) a
        where 1=1
          and trgt_se_cd in (<foreach item="item" collection="trgtSeCd" separator=",">#{item}</foreach>)
        AND (
        (DATE_FORMAT(stDt, '%Y%m') = CONCAT(#{year}, #{month}))  -- 시작일이 해당 월
        OR (DATE_FORMAT(edDt, '%Y%m') = CONCAT(#{year}, #{month}))  -- 종료일이 해당 월
        OR (stDt <![CDATA[<]]> CONCAT(#{year}, '-', #{month}, '-01') AND edDt <![CDATA[>]]> LAST_DAY(STR_TO_DATE(CONCAT(#{year}, '-', #{month}, '-01'), '%Y-%m-%d')))  -- 기간이 해당 월을 포함
        )
        order by trgt_se_cd, reg_dt
    </select>

    <select id="selectLeaningSummaryStatisticsEng" resultType="camelHashMap" parameterType="map">
        /* TchDsbdMapper.selectLeaningSummaryStatisticsEng */
        WITH current_period_data AS (
            -- 1. 평가
            SELECT
                3 AS trgt_se_cd,
                c.evl_id AS trgt_id,
                0 AS tab_id,
                a.cla_id,
                c.mamoym_id AS stdt_id,
                d.evl_iem_id AS article_id,
                d.sub_id,
                IF(d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL, 1, 0) AS is_study,
                IFNULL(d.errata, 4) AS errata,
                d.eak_st_dt AS start_time,
                d.eak_ed_dt AS end_time,
                TIMESTAMPDIFF(SECOND, d.eak_st_dt, d.eak_ed_dt) AS study_seconds,
                d.mrk_ty,
                (SELECT m.id
                 FROM aidt_lcms.article_meta_map amm
                          JOIN aidt_lcms.meta m ON m.id = amm.meta_id
                 WHERE amm.article_id = d.evl_iem_id
                   AND amm.sub_id = d.sub_id
                   AND amm.meta_name = 'articleType') AS articleType_cd,
                (SELECT m.val
                 FROM aidt_lcms.article_meta_map amm
                          JOIN aidt_lcms.meta m ON m.id = amm.meta_id
                 WHERE amm.article_id = d.evl_iem_id
                   AND amm.sub_id = d.sub_id
                   AND amm.meta_name = 'articleType') AS articleType
            FROM aidt_lms.evl_info a
                     INNER JOIN aidt_lms.evl_result_info c ON a.id = c.evl_id AND c.subm_at = 'Y'
                     INNER JOIN aidt_lms.evl_result_detail d ON c.id = d.evl_result_id AND d.eak_at = 'Y'
            WHERE 1=1
            <if test="userId != null and userId != ''">
                AND c.mamoym_id = #{userId}
            </if>
                AND a.cla_id = #{claId}
                AND a.textbook_id = #{textbookId}
                AND (
                    (
                    a.evl_prg_dt IS NOT NULL AND a.evl_cp_dt IS NOT NULL
                    AND DATE(a.evl_prg_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(a.evl_cp_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                    OR
                    (
                    a.pd_evl_st_dt IS NOT NULL AND a.pd_evl_ed_dt IS NOT NULL
                    AND DATE(a.pd_evl_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(a.pd_evl_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                )
                AND 3 IN(<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

        UNION ALL

        -- 2. 과제
        SELECT
            2 AS trgt_se_cd,
            c.task_id AS trgt_id,
            0 AS tab_id,
            a.cla_id,
            c.mamoym_id AS stdt_id,
            d.task_iem_id AS article_id,
            d.sub_id,
            IF(d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL, 1, 0) AS is_study,
            IFNULL(d.errata, 4) AS errata,
            d.eak_st_dt AS start_time,
            d.eak_ed_dt AS end_time,
            TIMESTAMPDIFF(SECOND, d.eak_st_dt, d.eak_ed_dt) AS study_seconds,
            d.mrk_ty,
            (SELECT m.id
             FROM aidt_lcms.article_meta_map amm
                      JOIN aidt_lcms.meta m ON m.id = amm.meta_id
             WHERE amm.article_id = d.task_iem_id
               AND amm.sub_id = d.sub_id
               AND amm.meta_name = 'articleType') AS articleType_cd,
            (SELECT m.val
             FROM aidt_lcms.article_meta_map amm
                      JOIN aidt_lcms.meta m ON m.id = amm.meta_id
             WHERE amm.article_id = d.task_iem_id
               AND amm.sub_id = d.sub_id
               AND amm.meta_name = 'articleType') AS articleType
        FROM aidt_lms.task_info a
                 INNER JOIN aidt_lms.task_result_info c ON a.id = c.task_id AND c.subm_at = 'Y'
                 INNER JOIN aidt_lms.task_result_detail d ON c.id = d.task_result_id AND d.eak_at = 'Y'
        WHERE 1=1
            <if test="userId != null and userId != ''">
                AND c.mamoym_id = #{userId}
            </if>
            AND a.cla_id = #{claId}
            AND a.textbk_id = #{textbookId}
            AND (
                (
                a.task_prg_dt IS NOT NULL AND a.task_cp_dt IS NOT NULL
                AND DATE(a.task_prg_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(a.task_cp_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
                )
                OR
                (
                a.pd_evl_st_dt IS NOT NULL AND a.pd_evl_ed_dt IS NOT NULL
                AND DATE(a.pd_evl_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(a.pd_evl_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
                )
            )
            AND 2 IN (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

        UNION ALL

        -- 3. 학습자료
        SELECT
            1 AS trgt_se_cd,
            a.crcul_id AS trgt_id,
            a.id AS tab_id,
            a.cla_id,
            c.mamoym_id AS stdt_id,
            d.dta_iem_id AS article_id,
            d.sub_id,
            IF(d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL OR d.tch_errata_chg_at = 'Y', 1, 0) AS is_study,
            IFNULL(d.errata, 4) AS errata,
            (CASE
                WHEN ROW_NUMBER() OVER (PARTITION BY c.mamoym_id ORDER BY d.dta_iem_id) = 1
                THEN (
                    SELECT MIN(std_st_dt)
                    FROM aidt_lms.std_recode_info
                    WHERE 1=1
                    AND cla_id = a.cla_id
                    AND DATE(std_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(std_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                )
                ELSE NULL
            END) AS start_time,
            (CASE
                WHEN ROW_NUMBER() OVER (PARTITION BY c.mamoym_id ORDER BY d.dta_iem_id) = 1
                THEN (
                    SELECT MAX(std_ed_dt)
                    FROM aidt_lms.std_recode_info
                    WHERE 1=1
                    AND cla_id = a.cla_id
                    AND DATE(std_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(std_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                )
                ELSE NULL
            END) AS end_time,
            (case
                when row_number() over (partition by c.mamoym_id order by d.dta_iem_id) = 1
                    then (
                        select sum(timestampdiff(second, std_st_dt, std_ed_dt))
                        from aidt_lms.std_recode_info
                        where crcul_id = a.crcul_id
                        and cla_id = a.cla_id
                        and DATE(std_st_dt) <![CDATA[>=]]>
                        <choose>
                            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                            <otherwise>#{startDate}</otherwise>
                        </choose>
                        AND DATE(std_ed_dt) <![CDATA[<=]]>
                        <choose>
                            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                            <otherwise>#{endDate}</otherwise>
                        </choose>
                    )
                else null
            end) as study_seconds,
            d.mrk_ty,
            (SELECT m.id
            FROM aidt_lcms.article_meta_map amm
            JOIN aidt_lcms.meta m ON m.id = amm.meta_id
            WHERE amm.article_id = d.dta_iem_id
            AND amm.sub_id = d.sub_id
            AND amm.meta_name = 'articleType'
            ) AS articleType_cd,
            (SELECT m.val
            FROM aidt_lcms.article_meta_map amm
            JOIN aidt_lcms.meta m ON m.id = amm.meta_id
            WHERE amm.article_id = d.dta_iem_id
            AND amm.sub_id = d.sub_id
            AND amm.meta_name = 'articleType'
            ) AS articleType
        FROM aidt_lms.tab_info a
        INNER JOIN aidt_lms.std_dta_result_info c
            ON a.id = c.textbk_tab_id
        INNER JOIN aidt_lms.std_dta_result_detail d
            ON c.id = d.dta_result_id AND d.eak_at = 'Y'
        WHERE 1=1
        <if test="userId != null and userId != ''">
            AND c.mamoym_id = #{userId}
        </if>
        AND a.cla_id = #{claId}
        AND a.textbk_id = #{textbookId}
        AND DATE(d.eak_st_dt) <![CDATA[>=]]>
        <choose>
            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
            <otherwise>#{startDate}</otherwise>
        </choose>
        AND DATE(d.eak_ed_dt) <![CDATA[<=]]>
        <choose>
            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
            <otherwise>#{endDate}</otherwise>
        </choose>
        AND 1 IN (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

        UNION ALL

        -- 4. 자기주도학습 (선택학습/AI학습)
        SELECT
            4 AS trgt_se_cd,
            a.id AS trgt_id,
            0 AS tab_id,
            a.cla_id,
            a.stdt_id,
            c.module_id AS article_id,
            0 AS sub_id,
            IF(c.sub_mit_anw IS NOT NULL OR c.sub_mit_anw_url IS NOT NULL, 1, 0) AS is_study,
            IFNULL(c.errata, 4) AS errata,
            c.std_st_dt AS start_time,
            c.std_ed_dt AS end_time,
            TIMESTAMPDIFF(SECOND, c.std_st_dt, c.std_ed_dt) AS study_seconds,
            NULL AS mrk_ty,
            (SELECT m.id
             FROM aidt_lcms.article_meta_map amm
                      JOIN aidt_lcms.meta m ON m.id = amm.meta_id
             WHERE amm.article_id = c.module_id
               AND amm.sub_id = c.sub_id
               AND amm.meta_name = 'articleType'
             ) AS articleType_cd,
            (SELECT m.val
             FROM aidt_lcms.article_meta_map amm
                      JOIN aidt_lcms.meta m ON m.id = amm.meta_id
             WHERE amm.article_id = c.module_id
               AND amm.sub_id = c.sub_id
               AND amm.meta_name = 'articleType'
             ) AS articleType
        FROM aidt_lms.slf_std_info a
                 INNER JOIN aidt_lms.slf_std_result_info c
                            ON a.id = c.std_id AND c.std_at = 'Y' AND a.ed_at = 'Y'
        WHERE 1=1
        <if test="userId != null and userId != ''">
            and a.stdt_id = #{userId}
        </if>
          AND a.cla_id = #{claId}
          AND a.textbk_id = #{textbookId}
          AND DATE(c.std_st_dt) <![CDATA[>=]]>
            <choose>
                <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                <otherwise>#{startDate}</otherwise>
            </choose>
            AND DATE(c.std_ed_dt) <![CDATA[<=]]>
            <choose>
                <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                <otherwise>#{endDate}</otherwise>
            </choose>
          AND 4 IN (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
        ),
        -- 학습 기록 날짜 CTE
        study_dates AS (
            -- 학습자료의 날짜 데이터
            SELECT
            '1' AS trgt_se_cd,
            DATE(sri.std_ed_dt) AS study_date,
            crcul_id as trgt_id
            FROM aidt_lms.std_recode_info sri
                inner join current_period_data cpd on sri.crcul_id = cpd.trgt_id
            WHERE sri.cla_id = #{claId}
            AND DATE(sri.std_st_dt) <![CDATA[>=]]> #{startDate}
            AND DATE(sri.std_ed_dt) <![CDATA[<=]]> #{endDate}

            UNION

            -- 과제, 평가, 자기주도학습의 날짜 데이터
            SELECT
            cpd.trgt_se_cd,
            COALESCE(DATE(cpd.end_time), DATE(cpd.start_time)) AS study_date,
            trgt_id
            FROM current_period_data cpd
            WHERE cpd.trgt_se_cd IN (2, 3, 4)
            AND COALESCE(DATE(cpd.end_time), DATE(cpd.start_time)) IS NOT NULL
        ),
        -- 학습 유형별 통계
        type_stats AS (
            SELECT
                cpd.stdt_id,
                cpd.trgt_se_cd,
                -- 학생별, 학습 유형별 총 학습 시간
                SUM(CASE WHEN cpd.study_seconds IS NOT NULL THEN cpd.study_seconds ELSE 0 END) AS type_study_seconds,
                -- 학습일: 동일한 날짜는 한 번만 카운트
                (
                SELECT COUNT(DISTINCT study_date)
                FROM study_dates sd
                WHERE sd.trgt_se_cd = cpd.trgt_se_cd
                ) AS type_study_days,
                -- 풀이 수: 해결한 문제 수
                SUM(
                    CASE
                        WHEN cpd.articleType_cd != 20 AND (
                        (cpd.trgt_se_cd = 1 AND cpd.is_study = 1) OR
                        (cpd.trgt_se_cd IN (2, 3)) OR
                        (cpd.trgt_se_cd = 4)
                        ) THEN 1
                        ELSE 0
                    END
                ) AS type_solved_problems,
                -- 문항(21) 유형 풀이 수
                SUM(
                    CASE
                        WHEN cpd.articleType_cd = 21 AND (
                        (cpd.trgt_se_cd = 1 AND cpd.is_study = 1) OR
                        (cpd.trgt_se_cd IN (2, 3)) OR
                        (cpd.trgt_se_cd = 4)
                        ) THEN 1
                        ELSE 0
                    END
                ) AS type_question_count,
                -- 활동(22) 유형 풀이 수
                SUM(
                    CASE
                        WHEN cpd.articleType_cd = 22 AND (
                        (cpd.trgt_se_cd = 1 AND cpd.is_study = 1) OR
                        (cpd.trgt_se_cd IN (2, 3)) OR
                        (cpd.trgt_se_cd = 4)
                        ) THEN 1
                        ELSE 0
                    END
                ) AS type_activity_count,
                -- 정답 맞은 수
                SUM(
                    CASE
                        WHEN cpd.trgt_se_cd = 1 AND cpd.is_study = 1 AND cpd.mrk_ty <![CDATA[<>]]> 3 THEN
                            CASE
                                WHEN cpd.errata = 1 THEN 1
                                WHEN cpd.errata = 3 THEN 0.5
                                ELSE 0
                            END
                        WHEN cpd.trgt_se_cd IN (2, 3) AND cpd.mrk_ty <![CDATA[<>]]> 3  THEN
                            CASE
                                WHEN cpd.errata = 1 THEN 1
                                WHEN cpd.errata = 3 THEN 0.5
                                ELSE 0
                            END
                        WHEN cpd.trgt_se_cd = 4 AND cpd.errata = 1 AND (cpd.articleType_cd != 20 AND cpd.articleType_cd != 22) THEN 1
                        ELSE 0
                    END
                ) AS type_correct_count,
                -- 정답 가능 문제 수
                SUM(
                    CASE
                        WHEN cpd.trgt_se_cd = 1 AND cpd.is_study = 1 AND cpd.mrk_ty <![CDATA[<>]]> 3 and cpd.errata <![CDATA[<>]]> 4 THEN 1
                        WHEN cpd.trgt_se_cd IN (2, 3) AND cpd.mrk_ty <![CDATA[<>]]> 3 and cpd.errata <![CDATA[<>]]> 4 THEN 1
                        WHEN cpd.trgt_se_cd = 4 AND (cpd.articleType_cd != 20 AND cpd.articleType_cd != 22) THEN 1
                        ELSE 0
                    END
                ) AS type_answerable_count
            FROM current_period_data cpd
            GROUP BY cpd.stdt_id, cpd.trgt_se_cd
        ),
        -- 학생별 통합 통계
        current_stats AS (
            SELECT
                stdt_id,
                -- 학생별 총 학습 시간
                SUM(type_study_seconds) AS avg_study_seconds,
                -- 학생별 총 학습일
                (
                SELECT COUNT(DISTINCT study_date)
                FROM study_dates
                ) AS total_study_days,
                -- 학생별 총 풀이 수
                SUM(type_solved_problems) AS total_solved_problems,
                -- 학생별 총 문항 유형 풀이 수
                SUM(type_question_count) AS question_count,
                -- 학생별 총 활동 유형 풀이 수
                SUM(type_activity_count) AS activity_count,
                -- 학생별 정답률
                CASE
                    WHEN SUM(type_answerable_count) > 0
                    THEN ROUND(SUM(type_correct_count) / SUM(type_answerable_count) * 100, 2)
                    ELSE 0
                END AS correct_rate,
                SUM(type_answerable_count) as type_answerable_count,
                SUM(type_correct_count) as type_correct_count
            FROM type_stats
            GROUP BY stdt_id
        ),

        -- 전체 학급 통계
        class_stats AS (
        SELECT
            stdt_id,
            -- 평균 학습 시간
            AVG(avg_study_seconds) AS avg_study_seconds,
            -- 평균 학습일
            ROUND(AVG(total_study_days), 2) AS total_study_days,
            -- 평균 풀이 수
            ROUND(AVG(total_solved_problems),2) AS total_solved_problems,
            -- 문항 유형 풀이 수
            SUM(question_count) AS question_count,
            -- 활동 유형 풀이 수
            SUM(activity_count) AS activity_count,
            -- 평균 정답률
            ROUND(CASE
                WHEN SUM(type_answerable_count) > 0
                THEN ROUND(SUM(type_correct_count) / SUM(type_answerable_count) * 100, 2)
                ELSE 0
            END, 2) AS correct_rate
        FROM current_stats
        )

        -- 최종 결과: 전체 학급 통계 출력
        SELECT
            stdt_id,
            -- 평균 학습 시간 (초 단위를 시:분 형식으로 변환)
            ifnull(DATE_FORMAT(SEC_TO_TIME(avg_study_seconds), '%H:%i'), '00:00') AS avg_study_time,
            -- 평균 풀이 수
            ifnull(total_solved_problems, 0) as total_solved_problems,
            -- 문항 유형 풀이 수
            ifnull(question_count, 0) as question_count,
            -- 활동 유형 풀이 수
            ifnull(activity_count, 0) as activity_count,
            -- 평균 학습 일
            ifnull(total_study_days, 0) as total_study_days,
            -- 정답률
            ifnull(correct_rate, 0) as correct_rate
        FROM class_stats;
    </select>

    <select id="selectLeaningSummaryStatisticsMath" resultType="camelHashMap">
        /* TchDsbdMapper.selectLeaningSummaryStatisticsMath */
        with current_period_data as (
            /* 평가 - 현재 기간 */
            select 3 as trgt_se_cd,
                   0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                   c.evl_id as trgt_id,
                   0 as tab_id,
                   a.cla_id,
                   c.mamoym_id as stdt_id,
                   d.evl_iem_id as article_id,
                   d.sub_id,
                   if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null, 1, 0) as is_study,
                   ifnull(d.errata, 4) as errata,
                   d.eak_st_dt as start_time,
                   d.eak_ed_dt as end_time,
                   timestampdiff(second, d.eak_st_dt, d.eak_ed_dt) as study_seconds,
                   d.mrk_ty
            from aidt_lms.evl_info a
                     inner join aidt_lms.evl_result_info c
                                on a.id = c.evl_id and c.subm_at = 'Y'
                     inner join aidt_lms.evl_result_detail d
                                on c.id = d.evl_result_id and d.eak_at = 'Y'
            where 1=1
                <if test="userId != null and userId != ''">
                    and c.mamoym_id = #{userId}
                </if>
                and a.cla_id = #{claId}
                and a.textbook_id = #{textbookId}
                AND (
                        (
                        a.evl_prg_dt IS NOT NULL AND a.evl_cp_dt IS NOT NULL
                        AND DATE(a.evl_prg_dt) <![CDATA[>=]]>
                        <choose>
                            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                            <otherwise>#{startDate}</otherwise>
                        </choose>
                        AND DATE(a.evl_cp_dt) <![CDATA[<=]]>
                        <choose>
                            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                            <otherwise>#{endDate}</otherwise>
                        </choose>
                        )
                        OR
                        (
                        a.pd_evl_st_dt IS NOT NULL AND a.pd_evl_ed_dt IS NOT NULL
                        AND DATE(a.pd_evl_st_dt) <![CDATA[>=]]>
                        <choose>
                            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                            <otherwise>#{startDate}</otherwise>
                        </choose>
                        AND DATE(a.pd_evl_ed_dt) <![CDATA[<=]]>
                        <choose>
                            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                            <otherwise>#{endDate}</otherwise>
                        </choose>
                        )
                    )
                and 3 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

            union all

            /* 과제 - 현재 기간 */
            select 2 as trgt_se_cd,
                   0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                   c.task_id as trgt_id,
                   0 as tab_id,
                   a.cla_id,
                   c.mamoym_id as stdt_id,
                   d.task_iem_id as article_id,
                   d.sub_id,
                   if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null, 1, 0) as is_study,
                   ifnull(d.errata, 4) as errata,
                   d.eak_st_dt as start_time,
                   d.eak_ed_dt as end_time,
                   timestampdiff(second, d.eak_st_dt, d.eak_ed_dt) as study_seconds,
                   d.mrk_ty
            from aidt_lms.task_info a
                     inner join aidt_lms.task_result_info c
                                on a.id = c.task_id and c.subm_at = 'Y'
                     inner join aidt_lms.task_result_detail d
                                on c.id = d.task_result_id and d.eak_at = 'Y'
            where 1=1
                <if test="userId != null and userId != ''">
                    and c.mamoym_id = #{userId}
                </if>
                and a.cla_id = #{claId}
                and a.textbk_id = #{textbookId}
                AND (
                        (
                        a.task_prg_dt IS NOT NULL AND a.task_cp_dt IS NOT NULL
                        AND DATE(a.task_prg_dt) <![CDATA[>=]]>
                        <choose>
                            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                            <otherwise>#{startDate}</otherwise>
                        </choose>
                        AND DATE(a.task_cp_dt) <![CDATA[<=]]>
                        <choose>
                            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                            <otherwise>#{endDate}</otherwise>
                        </choose>
                        )
                        OR
                        (
                        a.pd_evl_st_dt IS NOT NULL AND a.pd_evl_ed_dt IS NOT NULL
                        AND DATE(a.pd_evl_st_dt) <![CDATA[>=]]>
                        <choose>
                            <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                            <otherwise>#{startDate}</otherwise>
                        </choose>
                        AND DATE(a.pd_evl_ed_dt) <![CDATA[<=]]>
                        <choose>
                            <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                            <otherwise>#{endDate}</otherwise>
                        </choose>
                        )
                    )
                and 2 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

            union all

            /* 학습자료 - 현재 기간 */
            select 1 as trgt_se_cd,
                   0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                   a.crcul_id as trgt_id,
                   a.id as tab_id,
                   a.cla_id,
                   c.mamoym_id as stdt_id,
                   d.dta_iem_id as article_id,
                   d.sub_id,
                   if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y', 1, 0) as is_study,
                   ifnull(d.errata, 4) as errata,
                   (case
                        when row_number() over (partition by c.mamoym_id order by d.dta_iem_id) = 1
                        then (
                                select min(std_st_dt)
                                from aidt_lms.std_recode_info
                                where tab_id = a.id
                                  and cla_id = a.cla_id
                                  AND DATE(std_st_dt) <![CDATA[>=]]>
                                    <choose>
                                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                                        <otherwise>#{startDate}</otherwise>
                                    </choose>
                                    AND DATE(std_ed_dt) <![CDATA[<=]]>
                                    <choose>
                                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                                        <otherwise>#{endDate}</otherwise>
                                    </choose>
                           )
                        else null
                    end) as start_time,
                    (case
                        when row_number() over (partition by c.mamoym_id order by d.dta_iem_id) = 1
                        then (
                            select max(std_ed_dt)
                            from aidt_lms.std_recode_info
                            where tab_id = a.id
                            and cla_id = a.cla_id
                            AND DATE(std_st_dt) <![CDATA[>=]]>
                            <choose>
                                <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                                <otherwise>#{startDate}</otherwise>
                            </choose>
                            AND DATE(std_ed_dt) <![CDATA[<=]]>
                            <choose>
                                <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                                <otherwise>#{endDate}</otherwise>
                            </choose>
                        )
                        else null
                    end) as end_time,
                    (case
                        when row_number() over (partition by c.mamoym_id order by d.dta_iem_id) = 1
                            then (
                                select sum(timestampdiff(second, std_st_dt, std_ed_dt))
                                from aidt_lms.std_recode_info
                                where crcul_id = a.crcul_id
                                and cla_id = a.cla_id
                                AND DATE(std_st_dt) <![CDATA[>=]]>
                                <choose>
                                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                                    <otherwise>#{startDate}</otherwise>
                                </choose>
                                AND DATE(std_ed_dt) <![CDATA[<=]]>
                                <choose>
                                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                                    <otherwise>#{endDate}</otherwise>
                                </choose>
                            )
                        else null
                    end) as study_seconds,
                    d.mrk_ty
                from aidt_lms.tab_info a
                inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id
                inner join aidt_lms.std_dta_result_detail d on c.id = d.dta_result_id and d.eak_at = 'Y'
                where 1=1
                    <if test="userId != null and userId != ''">
                        and c.mamoym_id = #{userId}
                    </if>
                    and a.cla_id = #{claId}
                    and a.textbk_id = #{textbookId}
                    AND DATE(d.eak_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(d.eak_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    and 1 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

            union all

            /* 자기주도학습 (선택학습/AI학습) - 현재 기간 */
            select 4 as trgt_se_cd,
                   a.std_cd,                    /* 학습구분(1: AI학습, 2: 선택학습) */
                   a.id as trgt_id,
                   0 as tab_id,
                   a.cla_id,
                   a.stdt_id,
                   c.module_id as article_id,
                   0 as sub_id,
                   if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null, 1, 0) as is_study,
                   ifnull(c.errata, 4) as errata,
                   c.std_st_dt as start_time,
                   c.std_ed_dt as end_time,
                   timestampdiff(second, c.std_st_dt, c.std_ed_dt) as study_seconds,
                   null as mrk_ty
            from aidt_lms.slf_std_info a
                     inner join aidt_lms.slf_std_result_info c
                                on a.id = c.std_id and c.std_at = 'Y'
            where 1=1
            <if test="userId != null and userId != ''">
                and a.stdt_id = #{userId}
            </if>
              and a.cla_id = #{claId}
              and a.textbk_id = #{textbookId}
              AND DATE(c.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(c.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
              and 4 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)

            union all

            /* 자기주도학습 (AI학습) */
            select
                4 as trgt_se_cd,			  /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                1 as std_cd,                 /* 학습구분(1: AI학습, 2: 선택학습) */
                a.id as trgt_id,	  		  /* 대상 ID */
                0 as tab_id,                 /* 탭 ID */
                a.cla_id,                    /* 학급 ID */
                a.stdt_id,					  /* 학생 ID */
                c.module_id as article_id,   /* 아티클 ID */
                0 as sub_id,	  		  	  /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                ifnull(c.errata,4) as errata,/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                c.std_st_dt as start_time,
                c.std_ed_dt as end_time,
                timestampdiff(second, c.std_st_dt, c.std_ed_dt) as study_seconds,
                null as mrk_ty
            from
                aidt_lms.slf_ai_std_info a
                    inner join aidt_lms.slf_ai_std_result_info c on a.id = c.std_ai_id and c.std_at = 'Y' and a.ed_at = 'Y'		  /* 자기주도학습은 모두 자동채점유형임. */
            where 1=1
                <if test="userId != null and userId != ''">
                    and a.stdt_id = #{userId}
                </if>
              and a.cla_id = #{claId}
              and a.textbk_id = #{textbookId}
              AND DATE(c.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(c.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
              and 4 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
        ),

        -- 학습한 지식요인만 필터링하기 위한
        learned_knowledge AS (
            select distinct
                c.trgt_se_cd,
                c.trgt_id,
                c.tab_id,
                c.stdt_id,
                amm.meta_id AS kwg_main_id
            from current_period_data c
            inner join aidt_lcms.article_meta_map amm on amm.article_id = c.article_id
                and amm.meta_name = 'studyMap_1'
            where c.trgt_se_cd IN (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
        ),

        -- 학습 유형별 통계
        type_stats AS (
            SELECT
                cpd.stdt_id,
                cpd.trgt_se_cd,
                -- 학생별, 학습 유형별 총 학습 시간
                SUM(CASE WHEN cpd.study_seconds IS NOT NULL THEN cpd.study_seconds ELSE 0 END) AS type_study_seconds,
                -- 정답 맞은 수
                SUM(
                    CASE
                        WHEN cpd.trgt_se_cd = 1 AND cpd.is_study = 1 AND cpd.mrk_ty <![CDATA[<>]]> 3 THEN
                            CASE
                            WHEN cpd.errata = 1 THEN 1
                            WHEN cpd.errata = 3 THEN 0.5
                            ELSE 0
                        END
                        WHEN cpd.trgt_se_cd IN (2, 3) AND cpd.mrk_ty <![CDATA[<>]]> 3 THEN
                            CASE
                                WHEN cpd.errata = 1 THEN 1
                                WHEN cpd.errata = 3 THEN 0.5
                                ELSE 0
                            END
                        WHEN cpd.trgt_se_cd = 4 AND cpd.errata = 1 THEN 1
                        ELSE 0
                    END
                ) AS type_correct_count,
                -- 정답 가능 문제 수
                SUM(
                    CASE
                        WHEN cpd.trgt_se_cd = 1 AND cpd.is_study = 1 AND cpd.mrk_ty <![CDATA[<>]]> 3 and cpd.errata <![CDATA[<>]]> 4 THEN 1
                        WHEN cpd.trgt_se_cd IN (2, 3) AND cpd.mrk_ty <![CDATA[<>]]> 3 and cpd.errata <![CDATA[<>]]> 4 THEN 1
                        WHEN cpd.trgt_se_cd = 4 THEN 1
                        ELSE 0
                    END
                ) AS type_answerable_count
            FROM current_period_data cpd
            GROUP BY cpd.stdt_id, cpd.trgt_se_cd
        ),

        -- 학생별 통합 통계
        current_stats AS (
            SELECT
                stdt_id,
                -- 학생별 총 학습 시간
                SUM(type_study_seconds) AS avg_study_seconds,
                -- 학생별 정답률
                CASE
                    WHEN SUM(type_answerable_count) > 0
                    THEN ROUND(SUM(type_correct_count) / SUM(type_answerable_count) * 100, 2)
                    ELSE 0
                END AS correct_rate,
                SUM(type_answerable_count) AS type_answerable_count,
                SUM(type_correct_count) AS type_correct_count
            FROM type_stats
            GROUP BY stdt_id
        ),

        -- 전체 학급 통계
        class_stats AS (
            SELECT
                stdt_id,
                -- 평균 학습 시간
                AVG(avg_study_seconds) AS avg_study_seconds,
                -- 평균 정답률
                ROUND(CASE
                        WHEN SUM(type_answerable_count) > 0
                        THEN ROUND(SUM(type_correct_count) / SUM(type_answerable_count) * 100, 2)
                        ELSE 0
                    END, 2) AS correct_rate
            FROM current_stats
        ),

        -- 지식 요인 평균 점수 (학습한 지식요인만 필터링) - usd_cac_src_info 테이블 사용
        pre_calculated_usd_scores as (
            select
                kwg_main_id,
                cla_id,
                val,
                round(avg(usd_scr), 2) as usd_scr
            from (
                    SELECT
                        A.kwg_main_id,
                        A.cla_id,
                        A.val,
                        if(A.std_cnt > 0, ifnull(round((A.x1/A.x2) * 100, 2), 0), 0) AS usd_scr,
                        A.stdt_id
                    FROM (
                        SELECT
                            lk.kwg_main_id,
                            ucsi.cla_id,
                            m.val,
                            ifnull(count(case when ucsi.std_at = 'Y' then 1 end), 0) as std_cnt,
                            ucsi.stdt_id,
                            sum(
                            /* 상 */
                            (ucsi.gd_gnrl_rgt_asw_cnt * 6)
                            + (ucsi.gd_gnrl_pat_asw_cnt * 6 * 0.5)
                            + (ucsi.gd_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                            + (ucsi.gd_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                            + (ucsi.gd_sm_exm_rgt_asw_cnt * 6 * 0.5)
                            + (ucsi.gd_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                            /* 중상(6) */
                            + (ucsi.av_up_gnrl_rgt_asw_cnt * 6)
                            + (ucsi.av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                            + (ucsi.av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                            + (ucsi.av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                            + (ucsi.av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                            + (ucsi.av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                            /* 중(5) */
                            + (ucsi.av_gnrl_rgt_asw_cnt * 4)
                            + (ucsi.av_gnrl_pat_asw_cnt * 4 * 0.5)
                            + (ucsi.av_hnt_gnrl_rgt_asw_cnt * 4 * 0.5)
                            + (ucsi.av_hnt_gnrl_pat_asw_cnt * 4 * 0.5 * 0.5)
                            + (ucsi.av_sm_exm_rgt_asw_cnt * 4 * 0.5)
                            + (ucsi.av_sm_exm_pat_asw_cnt * 4 * 0.5 * 0.5)
                            /* 중하(3) */
                            + (ucsi.av_lw_gnrl_rgt_asw_cnt * 3)
                            + (ucsi.av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                            + (ucsi.av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                            + (ucsi.av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                            + (ucsi.av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                            + (ucsi.av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                            /* 하(2) */
                            + (ucsi.bd_gnrl_rgt_asw_cnt * 2)
                            + (ucsi.bd_gnrl_pat_asw_cnt * 2 * 0.5)
                            + (ucsi.bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                            + (ucsi.bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                            + (ucsi.bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                            + (ucsi.bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                            /* 난이도 없는 활동 */
                            + (ucsi.nd_gnrl_rgt_asw_cnt * 1)
                            + (ucsi.nd_gnrl_pat_asw_cnt * 0.5)
                            + (ucsi.nd_hnt_gnrl_rgt_asw_cnt * 0.5)
                            + (ucsi.nd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                            + (ucsi.nd_sm_exm_rgt_asw_cnt * 0.5)
                            + (ucsi.nd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                            ) as x1,
                            sum(
                            ucsi.gd_exm_num * 6
                            + ucsi.av_up_exm_num * 6
                            + ucsi.av_exm_num * 4
                            + ucsi.av_lw_exm_num * 3
                            + ucsi.bd_exm_num * 2
                            + ucsi.nd_exm_num
                            ) as x2
                        FROM aidt_lms.usd_cac_src_info ucsi
                        inner join learned_knowledge lk ON lk.trgt_se_cd = ucsi.usd_clsf_cd
                        and lk.trgt_id = ucsi.usd_tg_id
                        and lk.tab_id = ucsi.tab_id
                        and lk.stdt_id = ucsi.stdt_id
                        and lk.kwg_main_id = ucsi.kwg_main_id
                        INNER JOIN aidt_lcms.meta m ON lk.kwg_main_id = m.id
                        WHERE 1=1
                        <if test="userId != null and userId != ''">
                            AND ucsi.stdt_id = #{userId}
                        </if>
                        AND ucsi.cla_id = #{claId}
                        AND ucsi.textbk_id = #{textbookId}
                        AND ucsi.std_dt = (
                            SELECT MAX(std_dt)
                            FROM aidt_lms.usd_cac_src_info
                            WHERE 1=1
                            <if test="userId != null and userId != ''">
                                AND stdt_id = #{userId}
                            </if>
                            AND cla_id = #{claId}
                            AND textbk_id = #{textbookId}
                            AND DATE(std_dt) between
                            <choose>
                                <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                                <otherwise>#{startDate}</otherwise>
                            </choose>
                            AND
                            <choose>
                                <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                                <otherwise>#{endDate}</otherwise>
                            </choose>
                        )
                        AND lk.trgt_se_cd in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
                        group by
                        cla_id,
                        textbk_id,
                        stdt_id,
                        unit_num,
                        meta_id,
                        kwg_main_id
                    ) A
            ) B
            group by B.kwg_main_id
        ),

        -- 상위 랭킹 (top 3)
        top_ranks as (
            select
            val,
            row_number() over (order by usd_scr desc) as rank_num
            from pre_calculated_usd_scores
            where usd_scr <![CDATA[>=]]> 80
        ),

        -- 상위 랭킹 문자열
        top_ranks_str as (
            select group_concat(val order by rank_num separator ' | ') as top_ranks_str
            from top_ranks
            where rank_num <![CDATA[<=]]> 3
        ),

        -- 하위 랭킹 (bottom 3)
        bottom_ranks as (
            select
                val,
            row_number() over (order by usd_scr asc) as rank_num
            from pre_calculated_usd_scores
            where usd_scr <![CDATA[<]]> 50
        ),

        -- 하위 랭킹 문자열
        bottom_ranks_str as (
            select group_concat(val order by rank_num separator ' | ') as bottom_ranks_str
            from bottom_ranks
            where rank_num <![CDATA[<=]]> 3
        )

        -- 최종 결과
        select
            ifnull(c.stdt_id, '') as stdt_id,
            -- 평균 학습 시간
            ifnull(date_format(sec_to_time(c.avg_study_seconds), '%H:%i'), '00:00') as avg_study_time,
            -- 정답률
            ifnull(c.correct_rate, 0) as correct_rate,
            -- 상위 랭킹 정보 (top 3)
            ifnull((select top_ranks_str from top_ranks_str), '') as top_ranks,
            -- 상위 랭킹 개수
            ifnull((select count(*) from top_ranks where rank_num <![CDATA[<=]]> 3), 0) as top_ranks_count,
            -- 하위 랭킹 정보 (bottom 3)
            ifnull((select bottom_ranks_str from bottom_ranks_str), '') as bottom_ranks,
            -- 하위 랭킹 개수
            ifnull((select count(*) from bottom_ranks where rank_num <![CDATA[<=]]> 3), 0) as bottom_ranks_count
        from class_stats c
    </select>

    <select id="selectLeaningSummaryStatisticsParticipationMath" resultType="camelHashMap">
      /* TchDsbdMapper.selectLeaningSummaryStatisticsParticipationMath */
        -- 수업 참여도 계산
        WITH class_participation AS (
            select
                1 as trgt_se_cd,
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(CASE WHEN d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS numerator,
                (SELECT MAX(click_count) FROM (
                                                  SELECT
                                                      y_sub.mamoym_id,
                                                      COUNT(CASE WHEN d_sub.sub_mit_anw IS NOT NULL OR d_sub.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS click_count
                                                  FROM aidt_lms.tab_info x_sub
                                                           INNER JOIN aidt_lms.std_dta_result_info y_sub ON x_sub.id = y_sub.textbk_tab_id
                                                           INNER JOIN aidt_lms.std_dta_result_detail d_sub ON y_sub.id = d_sub.dta_result_id
                                                  WHERE 1=1
                                                    AND x_sub.textbk_id = #{textbookId}
                                                    AND x_sub.cla_id = #{claId}
                                                    -- 날짜 필터링: 제출일 기준
                                                    AND DATE(d_sub.eak_st_dt) <![CDATA[>=]]>
                                                    <choose>
                                                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                                                        <otherwise>#{startDate}</otherwise>
                                                    </choose>
                                                    AND DATE(d_sub.eak_ed_dt) <![CDATA[<=]]>
                                                    <choose>
                                                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                                                        <otherwise>#{endDate}</otherwise>
                                                    </choose>
                                                    GROUP BY y_sub.mamoym_id
                ) max_clicks) AS denominator
            FROM aidt_lms.tab_info x
                INNER JOIN aidt_lms.std_dta_result_info y ON x.id = y.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail d ON y.id = d.dta_result_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              -- 날짜 필터링: 제출일 기준
              AND DATE(d.eak_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(d.eak_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
              and 1 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
            GROUP BY y.mamoym_id
        ),

        -- 과제 참여도 계산 (과제당 하루 최대 1점)
        task_participation AS (
            select
                2 as trgt_se_cd,
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DATE_FORMAT(COALESCE(y.eak_ed_dt, x.task_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.task_info x
                INNER JOIN aidt_lms.task_result_info y ON x.id = y.task_id
            WHERE
                x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
            -- 날짜 필터링: 과제 완료일 또는 마감일 기준
              AND (
                    (
                    x.task_prg_dt IS NOT NULL AND x.task_cp_dt IS NOT NULL
                    AND DATE(x.task_prg_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(x.task_cp_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                    OR
                    (
                    x.pd_evl_st_dt IS NOT NULL AND x.pd_evl_ed_dt IS NOT NULL
                    AND DATE(x.pd_evl_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(x.pd_evl_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                )
              and 2 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
              AND x.task_stts_cd = '5'
            GROUP BY y.mamoym_id
        ),

        -- 평가 참여도 계산 (평가당 하루 최대 1점)
        eval_participation AS (
        select
                3 as trgt_se_cd,
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbook_id AS textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DATE_FORMAT(COALESCE(y.eak_ed_dt, x.evl_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.evl_info x
                INNER JOIN aidt_lms.evl_result_info y ON x.id = y.evl_id
            WHERE 1=1
              AND x.textbook_id = #{textbookId}
              AND x.cla_id = #{claId}
            -- 날짜 필터링: 평가 완료일 또는 마감일 기준
              AND (
                    (
                    x.evl_prg_dt IS NOT NULL AND x.evl_cp_dt IS NOT NULL
                    AND DATE(x.evl_prg_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(x.evl_cp_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                    OR
                    (
                    x.pd_evl_st_dt IS NOT NULL AND x.pd_evl_ed_dt IS NOT NULL
                    AND DATE(x.pd_evl_st_dt) <![CDATA[>=]]>
                    <choose>
                        <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                        <otherwise>#{startDate}</otherwise>
                    </choose>
                    AND DATE(x.pd_evl_ed_dt) <![CDATA[<=]]>
                    <choose>
                        <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                        <otherwise>#{endDate}</otherwise>
                    </choose>
                    )
                )
              and 3 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
              AND x.evl_stts_cd = '5'
            GROUP BY y.mamoym_id
        ),

        -- 스스로학습 참여도 계산
        self_study_participation AS (
            select
                4 as trgt_se_cd,
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_std_info x_sub
                INNER JOIN aidt_lms.slf_std_result_info y_sub ON x_sub.id = y_sub.std_id
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND x_sub.std_cd = 2 -- 선택학습만 대상
                AND DATE(y_sub.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(y_sub.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_std_info x
                INNER JOIN aidt_lms.slf_std_result_info y ON x.id = y.std_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND x.std_cd = 2 -- 선택학습만 대상
              AND DATE(y.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
              AND DATE(y.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
              and 4 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
            GROUP BY x.stdt_id
        ),

        -- AI 학습 참여도 계산
        ai_study_participation AS (
            select
                4 as trgt_se_cd,
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_ai_std_info x_sub
                INNER JOIN aidt_lms.slf_ai_std_result_info y_sub ON x_sub.id = y_sub.std_ai_id
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND DATE(y_sub.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND DATE(y_sub.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_ai_std_info x
                INNER JOIN aidt_lms.slf_ai_std_result_info y ON x.id = y.std_ai_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND DATE(y.std_st_dt) <![CDATA[>=]]>
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
              AND DATE(y.std_ed_dt) <![CDATA[<=]]>
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>
              and 4 in (<foreach item="item" collection="trgtSeCdList" separator=",">#{item}</foreach>)
            GROUP BY x.stdt_id
        ),

        -- 전체 평균 참여도 계산 (모든 학생의 분자 합 / 모든 학생의 분모 합)
        total_avg_participation AS (
            SELECT
                -- 전체 분자 합 / 전체 분모 합 (전체 평균 참여도)
                ROUND(
                CASE
                WHEN SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                THEN 0
                ELSE SUM(COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                END, 2
                ) AS avg_total_participation_percent
            FROM (
                -- 모든 학생 ID 목록
                SELECT stdt_id FROM class_participation where numerator  >  0
                UNION
                SELECT stdt_id FROM task_participation where numerator  >  0
                UNION
                SELECT stdt_id FROM eval_participation where numerator  >  0
                UNION
                SELECT stdt_id FROM self_study_participation where numerator  >  0
                UNION
                SELECT stdt_id FROM ai_study_participation where numerator  >  0
                ) s
                LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
                LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
                LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
                LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
                LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
        ),

        -- 참여도 있는 학생들을 하나의 테이블로 통합
        students_participation AS (
            SELECT stdt_id, cla_id, textbk_id FROM class_participation WHERE numerator  >  0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM task_participation WHERE numerator  >  0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM eval_participation WHERE numerator  >  0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM self_study_participation WHERE numerator  >  0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM ai_study_participation WHERE numerator  >  0
        ),
        -- 학생별 참여도 테이블
        student_stats AS (
            SELECT
                s.stdt_id,
                s.cla_id,
                s.textbk_id,
                -- 참여도 정보
                ROUND(CASE
                WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                THEN 0
                ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                END, 2) AS participation_rate_percent,
                tap.avg_total_participation_percent AS avg_participation_percent
            FROM students_participation s
                LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
                LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
                LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
                LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
                LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
                CROSS JOIN total_avg_participation tap
        )
        SELECT
            stdt_id,
            cla_id,
            textbk_id,
            participation_rate_percent, /* 학생 참여도 */
            avg_participation_percent/* 학급 참여도 평균 */
        FROM
            student_stats
         where 1=1
        <if test="userId != null and userId != ''">
            and stdt_id = #{userId}
        </if>

    </select>

    <select id="selectLeaningSummaryStatistics1" resultType="camelHashMap">
        WITH combined_study AS (
            SELECT
                mamoym_id,
                cla_id,
                id,
                errata,
                subm_at,
                eak_st_dt,
                eak_ed_dt,
                eam_exm_num,
                duration,
                study_type,
                total_students
            FROM (
                SELECT
                    b.mamoym_id,
                    a.cla_id,
                    a.id,
                    c.errata,
                    b.subm_at,
                    b.eak_st_dt,
                    b.eak_ed_dt,
                    1 as eam_exm_num,
                    TIMEDIFF(b.eak_ed_dt, b.eak_st_dt) as duration,
                    3 as study_type,
                    COUNT(*) OVER() as total_students
                FROM evl_info a
                INNER JOIN evl_result_info b on b.evl_id = a.id
                INNER JOIN evl_result_detail c on b.id = c.evl_result_id
                WHERE a.cla_id = #{claId}
                AND DATE(a.mrk_cp_dt) <![CDATA[>=]]> #{startStudyDate}
                AND DATE(a.mrk_cp_dt) <![CDATA[<=]]> #{endStudyDate}

                UNION ALL

                SELECT
                    b.mamoym_id,
                    a.cla_id,
                    a.id,
                    c.errata,
                    b.subm_at,
                    b.eak_st_dt,
                    b.eak_ed_dt,
                    1 as eam_exm_num,
                    TIMEDIFF(b.eak_ed_dt, b.eak_st_dt) as duration,
                    2 as study_type,
                    COUNT(*) OVER() as total_students
                FROM task_info a
                INNER JOIN task_result_info b on b.task_id = a.id
                INNER JOIN task_result_detail c on b.id = c.task_result_id
                WHERE a.cla_id = #{claId}
                AND DATE(a.mrk_cp_dt) <![CDATA[>=]]> #{startStudyDate}
                AND DATE(a.mrk_cp_dt) <![CDATA[<=]]> #{endStudyDate}

                UNION ALL

                SELECT
                    b.mamoym_id,
                    a.cla_id,
                    a.id,
                    c.errata,
                    b.subm_at,
                    b.eak_st_dt,
                    b.eak_ed_dt,
                    a.eam_exm_num,
                    TIMEDIFF(c.eak_ed_dt, c.eak_st_dt) as duration,
                    1 as study_type,
                    COUNT(*) OVER() as total_students
                FROM std_dta_info a
                INNER JOIN std_dta_result_info b on a.id = b.dta_id
                INNER JOIN std_dta_result_detail c on b.id = c.dta_result_id
                WHERE a.cla_id = #{claId}
                AND DATE(b.eak_ed_dt) <![CDATA[>=]]> #{startStudyDate}
                AND DATE(b.eak_ed_dt) <![CDATA[<=]]> #{endStudyDate}

                UNION ALL

                SELECT
                    a.stdt_id as mamoym_id,
                    a.cla_id,
                    a.id,
                    b.errata,
                    a.ed_at as subm_at,
                    b.std_st_dt,
                    b.std_ed_dt,
                    1 as eam_exm_num,  -- 각 id별 전체 row 수
                    TIMEDIFF(b.std_st_dt, b.std_ed_dt) as duration,
                    4 as study_type,
                    COUNT(*) OVER() as total_students
                FROM slf_std_info a
                INNER JOIN slf_std_result_info b on a.id = b.std_id
                WHERE a.cla_id = #{claId}
                AND DATE(b.std_ed_dt) <![CDATA[>=]]> #{startStudyDate}
                AND DATE(b.std_ed_dt) <![CDATA[<=]]> #{endStudyDate}
            ) a
            <where>
                <if test="trgtSeCdList != null and trgtSeCdList.size() > 0">
                    study_type IN
                    <foreach item="item" collection="trgtSeCdList" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
            </where>
        ), score_ranks AS (
        -- 상위 랭킹 (50점 이상)
            SELECT
                b.meta_id,
                m.val,
                b.usd_scr,
                b.kwg_main_id,
                ROW_NUMBER() OVER (PARTITION BY a.cla_id ORDER BY b.usd_scr DESC) as rank_num,
                'top' as rank_type
            FROM combined_study a
            INNER JOIN std_usd_info b ON a.cla_id = b.cla_id
            INNER JOIN aidt_lcms.meta m ON b.kwg_main_id = m.id
            WHERE b.usd_scr <![CDATA[>=]]> 50
            GROUP BY b.meta_id, b.usd_scr

            UNION ALL

            -- 하위 랭킹 (50점 미만)
            SELECT
                b.meta_id,
                m.val,
                b.usd_scr,
                b.kwg_main_id,
                ROW_NUMBER() OVER (PARTITION BY a.cla_id ORDER BY b.usd_scr ASC) as rank_num,
                'bottom' as rank_type
            FROM combined_study a
            INNER JOIN std_usd_info b ON a.cla_id = b.cla_id
            INNER JOIN aidt_lcms.meta m ON b.kwg_main_id = m.id
            WHERE b.usd_scr <![CDATA[<]]> 50
            group by b.meta_id, b.usd_scr
        )
        SELECT
            cs.avg_study_duration,
            cs.participation_rate,
            cs.correct_rate,
            GROUP_CONCAT(CASE
            WHEN ts.rank_type = 'top' AND ts.rank_num <![CDATA[<=]]> 3 THEN ts.val
            END ORDER BY ts.usd_scr DESC SEPARATOR '/') as top_3_categories,
            GROUP_CONCAT(CASE
            WHEN ts.rank_type = 'top' AND ts.rank_num <![CDATA[<=]]> 3 THEN ts.kwg_main_id
            END ORDER BY ts.usd_scr DESC SEPARATOR '/') as top_3_ids,
            GROUP_CONCAT(CASE
            WHEN ts.rank_type = 'bottom' AND ts.rank_num <![CDATA[<=]]> 3 THEN ts.val
            END ORDER BY ts.usd_scr ASC SEPARATOR '/') as bottom_3_categories,
            GROUP_CONCAT(CASE
            WHEN ts.rank_type = 'bottom' AND ts.rank_num <![CDATA[<=]]> 3 THEN ts.kwg_main_id
            END ORDER BY ts.usd_scr ASC SEPARATOR '/') as bottom_3_ids,
            study_days,
            avg_question_count
        FROM(
            SELECT
                SEC_TO_TIME(AVG(TIME_TO_SEC(duration))) as avg_study_duration,
                SUM(CASE
                        WHEN subm_at = 'Y'
                        <if test="stdtId != null and stdtId != ''">
                            AND mamoym_id = #{stdtId}
                        </if>
                        THEN 1 ELSE 0 END) * 100.0 / MAX(total_students) as participation_rate,
                SUM(
                    CASE
                        WHEN errata = 1
                        <if test="stdtId != null and stdtId != ''">
                            AND mamoym_id = #{stdtId}
                        </if>
                        THEN 1 ELSE 0 END) * 100.0 /
                SUM(
                    CASE
                        WHEN errata IN (1, 2)
                        <if test="stdtId != null and stdtId != ''">
                            AND mamoym_id = #{stdtId}
                        </if>
                    THEN 1 ELSE 0 END
                ) as correct_rate,
                (SELECT
                    COUNT(DISTINCT DATE(study_date))
                FROM (
                    SELECT
                        eak_st_dt as study_date
                    FROM combined_study
                    WHERE subm_at = 'Y'
                    <if test="stdtId != null and stdtId != ''">
                        AND mamoym_id = #{stdtId}
                    </if>
                ) dates
                ) as study_days,
                (
                    SELECT
                        sum(
                            CASE
                                WHEN study_type = 1 AND subm_at = 'Y' THEN 1  -- 교과서는 제출여부만 체크
                                WHEN study_type IN (2,3) AND subm_at = 'Y' THEN eam_exm_num  -- 과제/평가는 문항수
                                WHEN study_type = 4 AND subm_at = 'Y' THEN eam_exm_num  -- 스스로학습도 문항수
                                ELSE 0
                            END
                        ) as avg_question_count
                    FROM combined_study
                    WHERE subm_at = 'Y'
                    <if test="stdtId != null and stdtId != ''">
                        AND mamoym_id = #{stdtId}
                    </if>
                ) as avg_question_count
            FROM combined_study
            WHERE subm_at = 'Y' AND errata != 4
            ) cs
            CROSS JOIN score_ranks ts;
    </select>

    <select id="selectOfClassInStudentsList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMaidt_lms.targetStntCnt */
        select
            b.name
             , a.stdt_id
        from aidt_lms.tc_cla_mb_info a
                 left outer join aidt_lcms.user b on a.stdt_id = b.uid
        where 1=1
          and a.cla_id = #{claId}
          and a.actvtn_at = 'Y'
    </select>


     <select id="selectTchDsbdRecSets" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdRecSets */
        select s.set_id, s.set_nm, s.set_idx
          from rec_customized_group_task_sets_map s
                   join (
                          -- 조회 이력 테이블에서 가장 최근 set_id와 해당 set_idx 가져오기
                          select coalesce(latest.set_id, default_set.set_id)   as set_id
                               , coalesce(latest.set_idx, default_set.set_idx) as set_idx
                            from (
                                     -- 최근 조회된 set_id와 set_idx 가져오기
                                     select h.set_id, ss.set_idx
                                       from rec_customized_group_task_hit_history_map h
                                                join rec_customized_group_task_sets_map ss
                                                     on h.set_id = ss.set_id and h.std_area = ss.std_area
                                      where h.textbk_id  = #{textbkId}
                                        and h.unit_num   = #{unitNum}
                                        and h.difficulty = #{difficulty}
                                        and h.wrter_id   = #{userId}
                                        and h.std_area   = #{stdArea}
                                      order by h.reg_dt desc
                                      limit 1) latest
                                     right join (
                                                -- 기본값: 가장 작은 set_idx를 가진 set_id
                                                select set_id, set_idx
                                                  from rec_customized_group_task_sets_map
                                                 where textbk_id  = #{textbkId}
                                                   and unit_num   = #{unitNum}
                                                   and difficulty = #{difficulty}
                                                   and std_area   = #{stdArea}
                                                 order by set_idx desc
                                                 limit 1) default_set
                                         on 1 = 1
                                                    ) latest_view
                                    on (
                                        -- 일반적인 경우: set_idx 값이 더 큰 다음 순위 찾기
                                        s.set_idx > latest_view.set_idx
                                            or
                                            -- 마지막 set_idx일 경우: 가장 작은 set_idx 값으로 순환
                                        (latest_view.set_idx = (select max(set_idx)
                                                                  from rec_customized_group_task_sets_map
                                                                 where textbk_id  = #{textbkId}
                                                                   and unit_num   = #{unitNum}
                                                                   and difficulty = #{difficulty}
                                                                   and std_area   = #{stdArea})
                                            and s.set_idx = (select min(set_idx)
                                                               from rec_customized_group_task_sets_map
                                                              where textbk_id  = #{textbkId}
                                                                and unit_num   = #{unitNum}
                                                                and difficulty = #{difficulty}
                                                                and std_area   = #{stdArea}
                                                              ))
                                        )
                     where s.textbk_id   = #{textbkId}
                       and s.unit_num    = #{unitNum}
                       and s.difficulty  = #{difficulty}
                       and s.std_area    = #{stdArea}
                     order by s.set_idx asc
                     limit 1
    </select>

    <select id="selectTchDsbdRecArticle" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdRecArticle */
        select
                article_id
                ,article_nm
          from aidt_lms.rec_customized_group_task_article_map
         where 1=1
           and textbk_id  = #{textbkId}
           and unit_num   = #{unitNum}
           and difficulty = #{difficulty}
           and set_id     = #{setId}
    </select>


    <update id="modifyTchDsbdRecChk" parameterType="map">
        /* TchDsbdMapper.modifyTchDsbdRecChk */
         /* TchDsbdMapper.modifyTchDsbdRecChk */
        insert into aidt_lms.rec_customized_group_task_hit_history_map
            ( wrter_id
            , textbk_id
            , std_area
            , unit_num
            , set_id
            , difficulty
            , set_idx
            , reg_dt
            , mdfy_dt)
            values (
                    #{userId}
                   ,#{textbkId}
                   ,#{stdArea}
                   ,#{unitNum}
                   ,#{setId}
                   ,#{difficulty}
                   ,#{setIdx}
                   ,now()
                   ,now()
                   )
                on duplicate key update
                                          wrter_id      = #{userId}
                                         ,textbk_id     = #{textbkId}
                                         ,std_area      = #{stdArea}
                                         ,unit_num      = #{unitNum}
                                         ,set_id        = #{setId}
                                         ,difficulty    = #{difficulty}
                                         ,set_idx       = #{setIdx}
                                         ,mdfy_dt       = now()

    </update>

    <select id="selectLessonCalendarCrcuInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectLessonCalendarCrcuInfo */
        WITH RECURSIVE curriculum AS (
            SELECT
                a.id,
                a.wrter_id,
                a.cla_id,
                a.textbk_id,
                a.textbk_idx_id,
                a.`key`,
                a.parent,
                a.text,
                CAST(LPAD(a.`key`,5,'0') AS CHAR(100) CHARACTER SET utf8) AS id_path,
                CAST(a.text AS CHAR(1000) CHARACTER SET utf8) AS id_path_nm,
                1 AS depth
            FROM
                aidt_lms.tc_curriculum a
            WHERE 1=1
              AND a.wrter_id = #{tchId}
              AND a.cla_id = #{claId}
              AND a.textbk_id = #{textbookId}
              AND a.parent = 0
            UNION ALL
            SELECT
                b.id,
                b.wrter_id,
                b.cla_id,
                b.textbk_id,
                b.textbk_idx_id,
                b.`key`,
                b.parent,
                b.text,
                CONCAT(c.id_path, ' > ', LPAD(b.`key`,5,'0')) AS id_path,
                CONCAT(c.id_path_nm, ' > ', b.text) AS id_path_nm,
                1 + c.depth AS depth
            FROM
                aidt_lms.tc_curriculum b
                    INNER JOIN curriculum c
                               ON c.wrter_id = b.wrter_id
                                   AND c.cla_id = b.cla_id
                                   AND c.textbk_id = b.textbk_id
                                   AND c.`key` = b.parent
        ),
        daily_times AS (
            SELECT
                DATE(std_st_dt) as lesson_date,
                MIN(std_st_dt) as first_start_time,
                MAX(std_ed_dt) as last_end_time,
                GROUP_CONCAT(DISTINCT crcul_id ORDER BY std_st_dt) as daily_crcul_ids
            FROM aidt_lms.std_recode_info
            WHERE textbk_id = #{textbookId}
              AND cla_id = #{claId}
              AND crcul_id in (<foreach item="item" collection="trgtIdList" separator=",">#{item}</foreach>)
            GROUP BY DATE(std_st_dt)
        )
        SELECT
            r.crcul_id AS id,
            c.id_path_nm AS unit_name,  /* 단원 > 차시 명*/
            DATE_FORMAT(dt.first_start_time, '%Y-%m-%d %H:%i:%s') as stDt /* 그 날의 첫 수업 시작 시간 */,
            DATE_FORMAT(dt.last_end_time, '%Y-%m-%d %H:%i:%s') as edDt    /* 그 날의 마지막 수업 종료 시간 */
        FROM aidt_lms.std_recode_info r
                 INNER JOIN curriculum c
                            ON c.`key` = r.crcul_id
                 INNER JOIN daily_times dt
                            ON DATE(r.std_st_dt) = dt.lesson_date
        WHERE r.textbk_id = #{textbookId}
          AND r.cla_id = #{claId}
          AND r.crcul_id in (<foreach item="item" collection="trgtIdList" separator=",">#{item}</foreach>)
          AND DATE(dt.first_start_time) = STR_TO_DATE(#{startDate}, '%Y%m%d')
        ORDER BY r.crcul_id
    </select>

    <select id="selectLessonCalendarInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectLessonCalendarInfo */
        with dailylessons as (
            select
                std.id as id,
                min(std.std_st_dt) as stdt,
                max(std.std_ed_dt) as eddt,
                date_format(std.reg_dt, "%Y-%m-%d %H:%i:%s") as reg_dt,
                group_concat(distinct std.crcul_id order by std.std_st_dt) as daily_crcul_ids,
               (
                select count(stdt_id)
                from aidt_lms.tc_cla_mb_info
                where user_id = #{tchId}
                and cla_id = #{claId}
                and actvtn_at = 'Y'
                ) as target_cnt,
                -- 참여 인원은 해당 날짜의 모든 차시에 대한 참여 인원을 구함
               (
                select count(distinct r.mamoym_id)
                from aidt_lms.std_dta_result_info r
                inner join aidt_lms.tab_info t
                    on r.textbk_tab_id = t.id
                where t.textbk_id = #{textbookId}
                    and t.wrter_id = #{tchId}
                    and t.cla_id = #{claId}
                    and date(r.eak_st_dt) = STR_TO_DATE(#{startDate}, '%Y%m%d')
                    and t.crcul_id in (
                            select distinct std2.crcul_id
                            from aidt_lms.std_recode_info std2
                            where date(std2.std_st_dt) = date(std.std_st_dt)
                            and std2.cla_id = #{claId}
                            and std2.textbk_id = #{textbookId}
                            and std2.std_st_dt is not null
                            and std2.std_ed_dt is not null
                    )
                    and t.tab_add_at = 'N'
                    and t.setcategory = (
                        select id
                        from aidt_lcms.meta
                        where name = 'setCategory'
                        and code = 'textbook'
                    )
                ) as submit_cnt
        from aidt_lms.std_recode_info std
        where 1=1
          and std.cla_id = #{claId}
          and std.textbk_id = #{textbookId}
          and std.std_st_dt is not null
          and std.std_ed_dt is not null
        group by date(std.std_st_dt)
            )
        select
            '1' as trgt_se_cd,
            dl.id,
            dl.daily_crcul_ids as trgtId,
            date_format(dl.stdt, "%Y-%m-%d %H:%i:%s") as stdt,
            date_format(dl.eddt, "%Y-%m-%d %H:%i:%s") as eddt,
            reg_dt,
            dl.target_cnt,
            dl.submit_cnt
        from dailylessons dl
        where 1=1
          and date(stdt) = STR_TO_DATE(#{startDate}, '%Y%m%d')
    </select>

    <select id="selectLessonCrrctCorrectRate" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectLessonCrrctCorrectRate */
        select count(*)                                                               as totCnt
            , ifnull(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end),0)                   as correctRateCnt
            , ifnull(round(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end) / count(*) * 100, 2),0) as correctRate
        FROM (select sdrd.dta_iem_id, errata, sdri.mamoym_id
        from aidt_lms.tab_info ti
            left join aidt_lms.std_dta_result_info sdri on ti.id = sdri.textbk_tab_id
            left join aidt_lcms.sets_article_map sam on ti.sets_id = sam.sets_id
            inner join aidt_lms.std_dta_result_detail sdrd
            on sdri.id = sdrd.dta_result_id and sam.article_id = sdrd.dta_iem_id and mrk_ty  <![CDATA[<>]]>  3  and sdrd.errata <![CDATA[<>]]> 4
            and (sdrd.sub_mit_anw is not null or sdrd.sub_mit_anw_url is not null)
        where 1=1
        and ti.cla_id = #{claId}
        and ti.textbk_id = #{textbookId}
        and ti.crcul_id in (<foreach item="item" collection="trgtIdList" separator=",">#{item}</foreach>)

        <if test="stntId != null and stntId != '' ">
            /*특정 학생별*/
            and sdri.mamoym_id = #{stntId}
        </if>
        ) as subquery
    </select>

    <select id="selectTaskCorrectRate" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTaskCorrectRate */
        select count(*)                                                               as totCnt
            , ifnull(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end), 0)                            as correctRateCnt
            , ifnull(round(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end) / count(*) * 100, 2), 0) as correctRate
        FROM (select trd.task_iem_id, errata, tri.mamoym_id
        from aidt_lms.task_info ti
            left join aidt_lms.task_result_info tri on ti.id = tri.task_id
            inner join aidt_lms.task_result_detail trd
                on tri.id = trd.task_result_id and mrk_ty  <![CDATA[<>]]>  3 and trd.errata <![CDATA[<>]]> 4
        where 1=1
        and ti.cla_id = #{claId}
        and ti.textbk_id = #{textbookId}
        and ti.id = #{trgtId}
        and tri.subm_at = 'Y'
        <if test="stntId != null and stntId != '' ">
            /*특정 학생별*/
            and tri.mamoym_id = #{stntId}
        </if>
        ) as subquery
    </select>

    <select id="selectTchDsbdCalendarAchievement" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCalendarAchievement */
        select
            ifnull(d.usd_ach_scr, 0) as usd_ach_scr,
            ifnull(d.rflt_actv_cnt, 0) as rflt_actv_cnt,
            ifnull(d.usd_ach_scr_percent, 0) as usd_ach_scr_percent /* 성취도 평균 */,
            ifnull(d.std_at, 'N') as std_at
        from (
                 select
                     sum(c.usd_ach_scr) as usd_ach_scr,
                     sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                     round(avg(c.usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                     c.stdt_id,
                     c.std_at
                 from (
                          select
                              a.usd_ach_id,
                              sum(a.usd_ach_scr) as usd_ach_scr,
                              sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                              round((sum(a.usd_ach_scr_percent) * 100 / count(a.stdt_id)), 2) as usd_ach_scr_percent,
                              a.stdt_id,
                              a.std_at
                          from (
                                   select
                                       usd_ach_id,
                                       sum(usd_ach_scr) as usd_ach_scr,
                                       sum(rflt_actv_cnt) as rflt_actv_cnt,
                                       sum(usd_ach_scr)/nullif(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                       stdt_id,
                                       std_at
                                   from aidt_lms.usd_ach_src2_info
                                   where usd_ach_id in ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                    <if test="stntId != null and stntId != '' ">
                                        and stdt_id = #{stntId}
                                    </if>
                                     and cla_id = #{claId}
                                     and textbk_id = #{textbookId}
                                     and usd_clsf_cd = #{trgtSeCd}
                                     and usd_tg_id = #{usdTgId}
                                   group by usd_ach_id, stdt_id
                               ) a
                          group by a.usd_ach_id

                          union all

                          select
                              b.usd_ach_id,
                              sum(b.usd_ach_scr) as usd_ach_scr,
                              sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                              case
                                  when b.usd_ach_id = 'pronunciation'
                                      then round(avg(b.usd_ach_scr_percent), 2)
                                  else round((avg(b.usd_ach_scr_percent) * 100), 2)
                                  end as usd_ach_scr_percent,
                              b.stdt_id,
                              b.std_at
                          from (
                                   select
                                       a.usd_ach_id,
                                       sum(a.usd_ach_scr) as usd_ach_scr,
                                       sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                       avg(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                       a.stdt_id,
                                       a.std_at
                                   from (
                                            select
                                                a.usd_ach_id,
                                                b.iem_id,
                                                b.iem_cd,
                                                sum(b.usd_ach_scr) as usd_ach_scr,
                                                sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                                sum(b.usd_ach_scr)/nullif(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                                a.stdt_id,
                                                a.std_at
                                            from aidt_lms.usd_ach_src2_info a
                                                     inner join aidt_lms.usd_ach_src2_detail b
                                                                on a.id = b.usd_ach_src_id
                                            where a.usd_ach_id in ('vocabulary', 'grammar', 'pronunciation')
                                            <if test="stntId != null and stntId != '' ">
                                                and a.stdt_id = #{stntId}
                                            </if>
                                              and a.cla_id = #{claId}
                                              and a.textbk_id = #{textbookId}
                                              and a.usd_clsf_cd = #{trgtSeCd}
                                              and usd_tg_id = #{usdTgId}
                                            group by a.usd_ach_id, a.stdt_id, b.iem_cd
                                        ) a
                                   group by a.usd_ach_id, a.iem_id
                               ) b
                          group by b.usd_ach_id
                      ) c
             ) d
    </select>

    <select id="selectTaskCalendarCrcuInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTaskCalendarCrcuInfo */
        SELECT
            ti.id,
            SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT m.val ORDER BY m.id SEPARATOR ', '), ', ', 3) as unit_name, /* 단원명 최대 3개*/
            date_format(ti.task_prg_dt, "%Y-%m-%d") as stDt,  /* 시작일 */
            date_format(ti.task_cp_dt, "%Y-%m-%d") as edDt    /* 종료일 */
        FROM aidt_lms.task_info ti
                 INNER JOIN aidt_lms.task_result_info tri ON ti.id = tri.task_id
                 INNER JOIN aidt_lms.task_result_detail trd ON tri.id = trd.task_result_id
                 INNER JOIN aidt_lcms.article_meta_map amm
                            ON trd.task_iem_id = amm.article_id
                                AND trd.sub_id = amm.sub_id
                                AND amm.meta_name = 'studyMap1'
                 INNER JOIN aidt_lcms.meta m ON amm.meta_id = m.id
        WHERE ti.id = #{trgtId}
        GROUP BY ti.id;
    </select>

    <select id="selectTaskCalendarInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTaskCalendarInfo */
        -- 과제
        select
            '2' as trgt_se_cd, /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 게시물 과제) */
            ti.id as id,
            ti.id as usd_tg_id,
            ti.task_nm as name,
            (select code_nm from aidt_lms.se_code a where a.code_cd = ti.eam_mth and a.code_gb_cd = 'eam_mth') as eam_mth,
            ti.tmpr_strg_at as tmpr_strg_at,
            ti.task_stts_cd as stts_cd,
            ti.rpt_othbc_at,
            ti.rpt_auto_othbc_at, /* 자동 공유 여부 값 추가 (프론트측 요청, 08/07) */
            case
                when ti.task_stts_cd = 2 then convert(aidt_lms.f_code_nm('task_stts_cd', ti.task_stts_cd), char)
                when (select if(count(1) = sum(if(trd.mrk_ty = 3, 1, 0) = 1), 'T', 'F')
                      from aidt_lms.task_result_info tri
                               join aidt_lms.task_result_detail trd on tri.id = trd.task_result_id
                      where tri.task_id = ti.id
                      group by tri.task_id) = 'F'
                    then (select case when count(case when tri2.eak_stts_cd != 5 then 1 end) > 0
                                          then convert('채점 필요', char)
                                      else convert('채점 완료', char)
                                     end
                          from aidt_lms.task_result_info tri2
                          where tri2.task_id = ti.id)
                else convert('채점 불필요', char)
                end as stts_name,
            date_format(ti.task_prg_dt, "%Y-%m-%d") as stDt,
            date_format(ti.task_cp_dt, "%Y-%m-%d") as edDt,
            date_format(ti.reg_dt, "%Y-%m-%d") as reg_dt,
            <if test="stntId != null and stntId != '' ">
                (select subm_at from aidt_lms.task_result_info a where a.task_id = ti.id and a.mamoym_id = #{stntId}) as subm_at,
            </if>
            coalesce((select count(1) from aidt_lms.task_result_info tri3
                      where tri3.task_id = ti.id group by tri3.task_id), 0) as target_cnt,
            coalesce((select count(1) from aidt_lms.task_result_info tri4
                      where tri4.task_id = ti.id and tri4.subm_at = 'Y'
                      group by tri4.task_id), 0) as submit_cnt,
            ifnull(ti.sets_id, '') as sets_id
        , case
            when ti.task_stts_cd <![CDATA[<]]> 2	then 'N'
            when
            ( select count(1) from aidt_lms.task_result_info tri where tri.task_id = ti.id
            and ti.task_stts_cd  <![CDATA[<]]> 2
            ) = 0 then 'Y'
            else 'N'
            end as report_link_yn
        from aidt_lms.task_info ti
        where 1=1
          and ti.cla_id = #{claId}
          and ti.textbk_id = #{textbookId}
          and ti.task_prg_dt is not null
          and ti.task_cp_dt is not null
          and ti.id = #{trgtId}
    </select>

    <select id="selectEvlCalendarInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectEvlCalendarInfo */
        -- 평가
        select
            '3' as trgt_se_cd, /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 게시물 과제) */
            ei.id as id,  /* 수업/평과/과제 id*/
            ei.id as usd_tg_id,  /* 성취도 결과 id*/
            ei.evl_nm as name, /*평과/과제 명*/
            (select code_nm from aidt_lms.se_code a where a.code_cd = ei.eam_mth and a.code_gb_cd = 'eam_mth') as eam_mth,
            ei.tmpr_strg_at as tmpr_strg_at,  /*임시 저장 여부*/
            ei.evl_stts_cd as stts_cd,  /*평가/과제 상태*/
            ei.rpt_othbc_at,
            ei.rpt_auto_othbc_at, /* 자동 공유 여부 값 추가 (프론트측 요청, 08/07) */
            case
                when ei.evl_stts_cd = 2 then convert(aidt_lms.f_code_nm('evl_stts_cd', ei.evl_stts_cd), char)
                when (select if(count(1) = sum(if(erd.mrk_ty = 3, 1, 0) = 1), 'T', 'F')
                      from aidt_lms.evl_result_info eri
                               join aidt_lms.evl_result_detail erd on eri.id = erd.evl_result_id
                      where eri.evl_id = ei.id
                      group by eri.evl_id) = 'F'
                    then (select case when count(case when eri2.eak_stts_cd != 5 then 1 end) > 0
                                          then convert('채점 필요', char)
                                      else convert('채점 완료', char)
                                     end
                          from aidt_lms.evl_result_info eri2
                          where eri2.evl_id = ei.id)
                else convert('채점 불필요', char)
                end as stts_name,  /* 채점 여부*/
            date_format(ei.evl_prg_dt, "%Y-%m-%d") as stDt,       /* 시작일 */
            date_format(ei.evl_cp_dt, "%Y-%m-%d") as edDt,         /* 종료일 */
            date_format(ei.reg_dt, "%Y-%m-%d") as reg_dt,
            <if test="stntId != null and stntId != '' ">
                (select subm_at from aidt_lms.evl_result_info a where a.evl_id = ei.id and a.mamoym_id = #{stntId}) as subm_at,
            </if>
            coalesce((select count(1) from aidt_lms.evl_result_info eri3
                      where eri3.evl_id = ei.id group by eri3.evl_id), 0) as target_cnt, /* 참여 인원 */
            coalesce((select count(1) from aidt_lms.evl_result_info eri4
                      where eri4.evl_id = ei.id and eri4.subm_at = 'Y'
                      group by eri4.evl_id), 0) as submit_cnt,      /* 제출 인원 */
            ei.sets_id as sets_id
        , case when ei.evl_stts_cd <![CDATA[<]]> 2	then 'N'
            when
            (
            select count(1) from aidt_lms.evl_result_info eri where eri.evl_id = ei.id
            and ei.evl_stts_cd  <![CDATA[<]]> 2
            ) = 0 then 'Y'
            else 'N'
            end as report_link_yn
        from aidt_lms.evl_info ei
        where 1=1
          and ei.cla_id = #{claId}
          and ei.textbook_id = #{textbookId}
          and ei.evl_prg_dt is not null
          and ei.evl_cp_dt is not null
          and ei.id = #{trgtId}
    </select>

    <select id="selectEvlCorrectRate" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectEvlCorrectRate */
        select count(*)                                                               as totCnt
        , ifnull(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end), 0)                            as correctRateCnt
        , ifnull(round(sum(case when errata = 1 then 1 when errata = 3 then 0.5 else 0 end) / count(*) * 100, 2), 0) as correctRate
        FROM (select erd.evl_iem_id, errata, eri.mamoym_id
        from aidt_lms.evl_info ei
        left join aidt_lms.evl_result_info eri on ei.id = eri.evl_id
        inner join aidt_lms.evl_result_detail erd
            on eri.id = erd.evl_result_id and mrk_ty  <![CDATA[<>]]>  3 and erd.errata <![CDATA[<>]]> 4
        where 1=1
        and ei.cla_id = #{claId}
        and ei.textbook_id = #{textbookId}
        and ei.id = #{trgtId}
        and eri.subm_at = 'Y'
        <if test="stntId != null and stntId != '' ">
            /*특정 학생별*/
            and eri.mamoym_id = #{stntId}
        </if>
        ) as subquery
    </select>

    <select id="selectEvlCalendarCrcuInfo" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectEvlCalendarCrcuInfo */
        SELECT
            ei.id,
            SUBSTRING_INDEX(GROUP_CONCAT(DISTINCT m.val ORDER BY m.id SEPARATOR ', '), ', ', 3) as unit_name,
            COUNT(DISTINCT m.id) as total_unit_count,
            date_format(ei.evl_prg_dt, "%Y-%m-%d") as stDt,
            date_format(ei.evl_cp_dt, "%Y-%m-%d") as edDt
        FROM aidt_lms.evl_info ei
                 INNER JOIN aidt_lms.evl_result_info eri ON ei.id = eri.evl_id
                 INNER JOIN aidt_lms.evl_result_detail erd ON eri.id = erd.evl_result_id
                 INNER JOIN aidt_lcms.article_meta_map amm
                            ON erd.evl_iem_id = amm.article_id
                                AND erd.sub_id = amm.sub_id
                                AND amm.meta_name = 'studyMap1'
                 INNER JOIN aidt_lcms.meta m ON amm.meta_id = m.id
        WHERE ei.id = #{trgtId}
        GROUP BY ei.id;
    </select>

    <select id="selectTchDsbdCalendarusdSrc" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdCalendarusdSrc */
        select
            a.trgt_id,
            ifnull(round(avg(usd_scr), 2), 0) as avg_usd_scr   /* 이해도 평균 */
        from aidt_lms.std_usd_day_hist a
            inner join aidt_lms.tc_cla_mb_info b
                on a.cla_id = b.cla_id
                       and a.stdt_id = b.stdt_id
        where a.cla_id = #{claId}
          and a.textbk_id = #{textbookId}
          and a.trgt_se_cd = #{trgtSeCd}
          and a.trgt_id = #{usdTgId}
        <if test="stntId != null and stntId != '' ">
            and a.stdt_id = #{stntId}
        </if>
          and b.actvtn_at = 'Y'
        group by a.trgt_id
    </select>

    <select id="selectTchDsbdAreaAchievementDistribution" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementDistribution */
        WITH grouped_data AS (
            SELECT
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                    WHEN a.code IN <include refid="languageCodesSql"/> THEN 'language'
                    END AS category,
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 1
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 2
                    WHEN a.code = 'vocabulary' THEN 3
                    <if test="textbookId != 6981 and textbookId != 6982">
                        WHEN a.code = 'grammar' THEN 4
                    </if>
                    WHEN a.code = 'pronunciation' THEN 5
                    END AS category_order,
                a.code,
                a.val as code_nm,
                IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                IFNULL(b.usd_ach_scr_percent, 0) as usd_ach_scr_percent,
                IFNULL(std_at, 'N') as std_at
            FROM (
                     SELECT id, code, val
                     FROM aidt_lcms.meta
                     WHERE name IN ('evaluationArea','contentsItem','evaluationArea3','evaluationCommu')
                       AND brand_id = '3'
                 ) a
                     LEFT JOIN (
                SELECT
                    usd_ach_id,
                    sum(c.usd_ach_scr) as usd_ach_scr,
                    sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                    CASE
                        WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        WHEN c.usd_ach_id = 'pronunciation'
                            THEN round(avg(c.usd_ach_scr_percent), 2)
                        ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                        END as usd_ach_scr_percent,
                    c.std_at
                FROM (
                         SELECT
                             usd_ach_id,
                             sum(usd_ach_scr) as usd_ach_scr,
                             sum(rflt_actv_cnt) as rflt_actv_cnt,
                             sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                             stdt_id,
                            (case when sum(rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                         FROM aidt_lms.usd_ach_src2_info
                         WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                           AND cla_id = #{claId}
                           AND textbk_id = #{textbookId}
                           AND std_dt = (
                             SELECT max(dt.std_dt)
                             FROM aidt_lms.usd_ach_src2_info dt
                             WHERE dt.cla_id = #{claId}
                               AND dt.textbk_id = #{textbookId}
                         )
                         GROUP BY usd_ach_id, stdt_id

                         UNION ALL

                         SELECT
                             b.usd_ach_id,
                             sum(b.usd_ach_scr) as usd_ach_scr,
                             sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                             AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                             b.stdt_id,
                             b.std_at
                         FROM (
                                  SELECT
                                      a.usd_ach_id,
                                      sum(a.usd_ach_scr) as usd_ach_scr,
                                      sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                      AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                      a.stdt_id,
                                     (case when sum(a.rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                                  FROM (
                                           SELECT
                                               a.usd_ach_id,
                                               b.iem_id,
                                               b.iem_cd,
                                               sum(b.usd_ach_scr) as usd_ach_scr,
                                               sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                               sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                               a.stdt_id,
                                               a.std_at
                                           FROM aidt_lms.usd_ach_src2_info a
                                                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                                                               ON a.id = b.usd_ach_src_id
                                           WHERE 1=1
                                             AND a.usd_ach_id IN <include refid="languageCodesSql"/>
                                             AND a.cla_id = #{claId}
                                             AND a.textbk_id = #{textbookId}
                                             AND a.std_dt = (
                                               SELECT max(dt.std_dt)
                                               FROM aidt_lms.usd_ach_src2_info dt
                                               WHERE dt.cla_id = #{claId}
                                                 AND dt.textbk_id = #{textbookId}
                                           )
                                           GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                       ) a
                                  GROUP BY a.usd_ach_id, a.iem_id
                              ) b
                         GROUP BY b.usd_ach_id
                     ) c
                GROUP BY c.usd_ach_id
            ) b ON a.code = b.usd_ach_id
        )
        SELECT
            code,
            code_nm,
            ifnull(usd_ach_scr, 0) as usd_ach_scr,
            ifnull(rflt_actv_cnt, 0) as rflt_actv_cnt,
            ifnull(ROUND(usd_ach_scr_percent, 2),0) as usd_ach_scr_percent,
            ifnull(std_at, 'N') as std_at
        FROM (
                 /* 이해 영역 */
                 SELECT
                     'understanding' as code,
                     '이해' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                     MAX(std_at) as std_at,
                     1 as sort_order
                 FROM grouped_data
                 WHERE category = 'understanding'
                   AND std_at = 'Y'

                 UNION ALL

                 /* 표현 영역 */
                 SELECT
                     'expression' as code,
                     '표현' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                     MAX(std_at) as std_at,
                     2 as sort_order
                 FROM grouped_data
                 WHERE category = 'expression'
                   AND std_at = 'Y'

                 UNION ALL

                 /* 단어/문법/발음 */
                 SELECT
                     code,
                     code_nm,
                     usd_ach_scr as usd_ach_scr,
                     rflt_actv_cnt as rflt_actv_cnt,
                     ROUND(usd_ach_scr_percent, 2) as usd_ach_scr_percent,
                     std_at,
                     category_order as sort_order
                 FROM grouped_data
                 WHERE 1=1
                     AND code IN <include refid="languageCodesSql"/>
             ) result
        ORDER BY sort_order;
    </select>

    <select id="selectTchDsbdAreaAchievementDistributionSummary" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementDistributionSummary */
        WITH grouped_data AS (
            SELECT
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                    WHEN a.code IN <include refid="languageCodesSql"/> THEN 'language'
                    END AS category,
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 1
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 2
                    WHEN a.code = 'vocabulary' THEN 3
                    <if test="textbookId != 6981 and textbookId != 6982">
                        WHEN a.code = 'grammar' THEN 4
                    </if>
                    WHEN a.code = 'pronunciation' THEN 5
                    END AS category_order,
                a.code,
                a.val as code_nm,
                IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                IFNULL(b.usd_ach_scr_percent, 0) as usd_ach_scr_percent,
                IFNULL(std_at, 'N') as std_at
            FROM (
                     SELECT id, code, val
                     FROM aidt_lcms.meta
                     WHERE name IN ('evaluationArea','contentsItem','evaluationArea3','evaluationCommu')
                       AND brand_id = '3'
                 ) a
                     LEFT JOIN (
                SELECT
                    usd_ach_id,
                    sum(c.usd_ach_scr) as usd_ach_scr,
                    sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                    CASE
                        WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        WHEN c.usd_ach_id = 'pronunciation'
                            THEN round(avg(c.usd_ach_scr_percent), 2)
                        ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                        END as usd_ach_scr_percent,
                    c.std_at
                FROM (
                         SELECT
                             usd_ach_id,
                             sum(usd_ach_scr) as usd_ach_scr,
                             sum(rflt_actv_cnt) as rflt_actv_cnt,
                             sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                             stdt_id,
                            (case when sum(rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                         FROM aidt_lms.usd_ach_src2_info
                         WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                           AND cla_id = #{claId}
                           AND textbk_id = #{textbookId}
                           AND std_dt = (
                             SELECT max(dt.std_dt)
                             FROM aidt_lms.usd_ach_src2_info dt
                             WHERE dt.cla_id = #{claId}
                               AND dt.textbk_id = #{textbookId}
                         )
                         GROUP BY usd_ach_id, stdt_id

                         UNION ALL

                         SELECT
                             b.usd_ach_id,
                             sum(b.usd_ach_scr) as usd_ach_scr,
                             sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                             AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                             b.stdt_id,
                             b.std_at
                         FROM (
                                  SELECT
                                      a.usd_ach_id,
                                      sum(a.usd_ach_scr) as usd_ach_scr,
                                      sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                      AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                      a.stdt_id,
                                      a.std_at
                                  FROM (
                                           SELECT
                                               a.usd_ach_id,
                                               b.iem_id,
                                               b.iem_cd,
                                               sum(b.usd_ach_scr) as usd_ach_scr,
                                               sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                               sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                               a.stdt_id,
                                              (case when sum(b.rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                                           FROM aidt_lms.usd_ach_src2_info a
                                                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                                                               ON a.id = b.usd_ach_src_id
                                           WHERE 1=1
                                            AND a.usd_ach_id IN <include refid="languageCodesSql"/>
                                             AND a.cla_id = #{claId}
                                             AND a.textbk_id = #{textbookId}
                                             AND a.std_dt = (
                                               SELECT max(dt.std_dt)
                                               FROM aidt_lms.usd_ach_src2_info dt
                                               WHERE dt.cla_id = #{claId}
                                                 AND dt.textbk_id = #{textbookId}
                                           )
                                           GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                       ) a
                                  GROUP BY a.usd_ach_id, a.iem_id
                              ) b
                         GROUP BY b.usd_ach_id
                     ) c
                GROUP BY c.usd_ach_id
            ) b ON a.code = b.usd_ach_id
        ),
             achievement_summary as(
                 select
                     r.code,
                     r.code_nm,
                     round(r.usd_ach_scr_percent, 2) as class_avg_percent,
                     std_at
                 from (
                      /* 이해 영역 */
                      select
                          'understanding' as code,
                          '이해' as code_nm,
                          round(avg(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                          MAX(std_at) as std_at
                      from grouped_data
                      where category = 'understanding'
                        AND std_at = 'Y'

                      union all

                      /* 표현 영역 */
                      select
                          'expression' as code,
                          '표현' as code_nm,
                          round(avg(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                          MAX(std_at) as std_at
                      from grouped_data
                      where category = 'expression'
                        AND std_at = 'Y'

                      union all

                      /* 단어/문법/발음 영역 */
                      select
                          code,
                          code_nm,
                          round(usd_ach_scr_percent, 2),
                          std_at
                      from grouped_data
                      where code IN <include refid="languageCodesSql"/>
                  ) r
             ),
             min_max_values as (
                 select
                     min(class_avg_percent) as min_value,
                     max(class_avg_percent) as max_value
                 from
                     achievement_summary
                 where std_at = 'Y'
             )
        select
            code,
            code_nm,
            class_avg_percent as usd_ach_scr_percent /* 학급 평균 성취도 */,
            case
                when class_avg_percent = (select max_value from min_max_values) then 'high'
                when class_avg_percent = (select min_value from min_max_values) then 'low'
                end as diff_type  /* 최대, 최소 타입 */
        from
            achievement_summary
        where
            class_avg_percent = (select max_value from min_max_values)
           or class_avg_percent = (select min_value from min_max_values)
        order by
            diff_type;
    </select>

    <select id="selectTchDsbdAreaAchievementStudentDstribution" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentDstribution */
        WITH student_data AS (
            SELECT
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                    <choose>
                        <when test="textbookId != '6981' and textbookId != '6982'">
                            WHEN a.code IN ('pronunciation', 'grammar', 'vocabulary') THEN 'language'
                        </when>
                        <otherwise>
                            WHEN a.code IN ('pronunciation', 'vocabulary') THEN 'language'
                        </otherwise>
                    </choose>
                END AS category,
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 1
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 2
                    WHEN a.code = 'vocabulary' THEN 3
                    <choose>
                        <when test="textbookId != '6981' and textbookId != '6982'">
                            WHEN a.code = 'grammar' THEN 4
                        </when>
                    </choose>
                    WHEN a.code = 'pronunciation' THEN 5
                END AS category_order,
                a.code,
                a.val as code_nm,
                IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                IFNULL(b.usd_ach_scr_percent, 0) as student_percent,
                IFNULL(std_at, 'N') as std_at
            FROM (
                     SELECT id, code, val
                     FROM aidt_lcms.meta
                     WHERE name IN ('evaluationArea','contentsItem','evaluationArea3','evaluationCommu')
                       AND brand_id = '3'
                 ) a
                     LEFT JOIN (
                SELECT
                    usd_ach_id,
                    sum(c.usd_ach_scr) as usd_ach_scr,
                    sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                    CASE
                        WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        WHEN c.usd_ach_id = 'pronunciation'
                            THEN round(avg(c.usd_ach_scr_percent), 2)
                        ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                        END as usd_ach_scr_percent,
                    c.std_at
                FROM (
                         /* 기본 능력치 */
                         SELECT
                             usd_ach_id,
                             sum(usd_ach_scr) as usd_ach_scr,
                             sum(rflt_actv_cnt) as rflt_actv_cnt,
                             sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                             stdt_id,
                            (case when sum(rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                         FROM aidt_lms.usd_ach_src2_info
                         WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                           AND cla_id = #{claId}
                           AND textbk_id = #{textbookId}
                           AND stdt_id = #{userId}
                           AND std_dt = (
                             SELECT max(dt.std_dt)
                             FROM aidt_lms.usd_ach_src2_info dt
                             WHERE dt.cla_id = #{claId}
                               AND dt.textbk_id = #{textbookId}
                         )
                         GROUP BY usd_ach_id, stdt_id

                         UNION ALL

                         /* 단어/문법/발음 능력치 */
                         SELECT
                             b.usd_ach_id,
                             sum(b.usd_ach_scr) as usd_ach_scr,
                             sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                             AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                             b.stdt_id,
                             b.std_at
                         FROM (
                                  SELECT
                                      a.usd_ach_id,
                                      sum(a.usd_ach_scr) as usd_ach_scr,
                                      sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                      AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                      a.stdt_id,
                                      a.std_at
                                  FROM (
                                           SELECT
                                               a.usd_ach_id,
                                               b.iem_id,
                                               b.iem_cd,
                                               sum(b.usd_ach_scr) as usd_ach_scr,
                                               sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                               sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                               a.stdt_id,
                                               (case when sum(b.rflt_actv_cnt) > 0 then 'Y' else 'N' end) as std_at
                                           FROM aidt_lms.usd_ach_src2_info a
                                                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                                                               ON a.id = b.usd_ach_src_id
                                           WHERE 1=1
                                             <choose>
                                                 <when test="textbookId == 6981 or textbookId == 6982">
                                                     AND a.usd_ach_id IN ('vocabulary', 'pronunciation')
                                                 </when>
                                                 <otherwise>
                                                     AND a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                                 </otherwise>
                                             </choose>
                                             AND a.cla_id = #{claId}
                                             AND a.textbk_id = #{textbookId}
                                             AND a.stdt_id = #{userId}
                                             AND a.std_dt = (
                                               SELECT max(dt.std_dt)
                                               FROM aidt_lms.usd_ach_src2_info dt
                                               WHERE dt.cla_id = #{claId}
                                                 AND dt.textbk_id = #{textbookId}
                                           )
                                           GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                       ) a
                                  GROUP BY a.usd_ach_id, a.iem_id
                              ) b
                         GROUP BY b.usd_ach_id
                     ) c
                GROUP BY c.usd_ach_id
            ) b ON a.code = b.usd_ach_id
        )
        SELECT
            code,
            code_nm,
            ifnull(usd_ach_scr, 0) as usd_ach_scr,
            ifnull(rflt_actv_cnt, 0) as rflt_actv_cnt,
            ifnull(usd_ach_scr_percent, 0) as usd_ach_scr_percent,
            ifnull(std_at, 'N') as std_at
        FROM (
                 /* 이해 영역 */
                 SELECT
                     'understanding' as code,
                     '이해' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(student_percent), 2) as usd_ach_scr_percent,
                     std_at,
                     1 as sort_order
                 FROM student_data
                 WHERE category = 'understanding'
                   AND std_at ='Y'

                 UNION ALL

                 /* 표현 영역 */
                 SELECT
                     'expression' as code,
                     '표현' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(student_percent), 2) as usd_ach_scr_percent,
                     std_at,
                     2 as sort_order
                 FROM student_data
                 WHERE category = 'expression'
                   AND std_at ='Y'

                 UNION ALL

                 /* 단어 문법 발음 능력 */
                 SELECT
                     code,
                     code_nm,
                     usd_ach_scr as usd_ach_scr,
                     rflt_actv_cnt as rflt_actv_cnt,
                     ROUND(student_percent, 2) as usd_ach_scr_percent,
                     std_at,
                     category_order as sort_order
                 FROM student_data
                 WHERE 1=1
                <choose>
                    <when test="textbookId == 6981 or textbookId == 6982">
                        AND code IN ('vocabulary', 'pronunciation')
                    </when>
                    <otherwise>
                        AND code IN ('vocabulary', 'grammar', 'pronunciation')
                    </otherwise>
                </choose>
             ) result
        ORDER BY sort_order;
    </select>

    <select id="selectTchDsbdAreaAchievementStudentDstribution_bak" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentDstribution_bak */
        WITH student_data AS (
            SELECT
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                    WHEN a.code IN ('pronunciation', #{gradeCode}, 'vocabulary') THEN 'language'
                    END AS category,
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 1
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 2
                    WHEN a.code = 'vocabulary' THEN 3
                    WHEN a.code = #{gradeCode} THEN 4
                    WHEN a.code = 'pronunciation' THEN 5
                    END AS category_order,
                a.code,
                a.val as code_nm,
                IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                IFNULL(b.usd_ach_scr_percent, 0) as student_percent,
                IFNULL(std_at, 'N') as std_at
            FROM (
                     SELECT id, code, val
                     FROM aidt_lcms.meta
                     WHERE name IN ('evaluationArea','contentsItem','evaluationArea3','evaluationCommu')
                       AND brand_id = '3'
                 ) a
                     LEFT JOIN (
                SELECT
                    usd_ach_id,
                    sum(c.usd_ach_scr) as usd_ach_scr,
                    sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                    CASE
                        WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        WHEN c.usd_ach_id = 'pronunciation'
                            THEN round(avg(c.usd_ach_scr_percent), 2)
                        ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                        END as usd_ach_scr_percent,
                    c.std_at
                FROM (
                         /* 기본 능력치 */
                         SELECT
                             usd_ach_id,
                             sum(usd_ach_scr) as usd_ach_scr,
                             sum(rflt_actv_cnt) as rflt_actv_cnt,
                             sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                             stdt_id,
                             std_at
                         FROM aidt_lms.usd_ach_src2_info
                         WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                           AND cla_id = #{claId}
                           AND textbk_id = #{textbookId}
                           AND stdt_id = #{userId}
                           AND std_dt = (
                             SELECT max(dt.std_dt)
                             FROM aidt_lms.usd_ach_src2_info dt
                             WHERE dt.cla_id = #{claId}
                               AND dt.textbk_id = #{textbookId}
                         )
                         GROUP BY usd_ach_id, stdt_id

                         UNION ALL

                         /* 단어/문법/발음 능력치 */
                         SELECT
                             b.usd_ach_id,
                             sum(b.usd_ach_scr) as usd_ach_scr,
                             sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                             AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                             b.stdt_id,
                             b.std_at
                         FROM (
                                  SELECT
                                      a.usd_ach_id,
                                      sum(a.usd_ach_scr) as usd_ach_scr,
                                      sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                      AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                      a.stdt_id,
                                      a.std_at
                                  FROM (
                                           SELECT
                                               a.usd_ach_id,
                                               b.iem_id,
                                               b.iem_cd,
                                               sum(b.usd_ach_scr) as usd_ach_scr,
                                               sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                               sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                               a.stdt_id,
                                               a.std_at
                                           FROM aidt_lms.usd_ach_src2_info a
                                                    INNER JOIN aidt_lms.usd_ach_src2_detail b
                                                               ON a.id = b.usd_ach_src_id
                                           WHERE a.usd_ach_id IN ('vocabulary', #{gradeCode}, 'pronunciation')
                                             AND a.cla_id = #{claId}
                                             AND a.textbk_id = #{textbookId}
                                             AND a.stdt_id = #{userId}
                                             AND a.std_dt = (
                                               SELECT max(dt.std_dt)
                                               FROM aidt_lms.usd_ach_src2_info dt
                                               WHERE dt.cla_id = #{claId}
                                                 AND dt.textbk_id = #{textbookId}
                                           )
                                           GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                       ) a
                                  GROUP BY a.usd_ach_id, a.iem_id
                              ) b
                         GROUP BY b.usd_ach_id
                     ) c
                GROUP BY c.usd_ach_id
            ) b ON a.code = b.usd_ach_id
        )
        SELECT
            code,
            CASE
                WHEN code_nm IN ('초등영어5 의소기능', '초등영어6 의소기능') THEN '의사소통'
                ELSE code_nm
            END AS code_nm,
            usd_ach_scr,
            rflt_actv_cnt,
            usd_ach_scr_percent,
            std_at
        FROM (
                 /* 이해 영역 */
                 SELECT
                     'understanding' as code,
                     '이해' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(student_percent), 2) as usd_ach_scr_percent,
                     std_at,
                     1 as sort_order
                 FROM student_data
                 WHERE category = 'understanding'

                 UNION ALL

                 /* 표현 영역 */
                 SELECT
                     'expression' as code,
                     '표현' as code_nm,
                     SUM(usd_ach_scr) as usd_ach_scr,
                     SUM(rflt_actv_cnt) as rflt_actv_cnt,
                     ROUND(AVG(student_percent), 2) as usd_ach_scr_percent,
                     std_at,
                     2 as sort_order
                 FROM student_data
                 WHERE category = 'expression'

                 UNION ALL

                 /* 단어 문법 발음 능력 */
                 SELECT
                     code,
                     code_nm,
                     usd_ach_scr as usd_ach_scr,
                     rflt_actv_cnt as rflt_actv_cnt,
                     ROUND(student_percent, 2) as usd_ach_scr_percent,
                     std_at,
                     category_order as sort_order
                 FROM student_data
                 WHERE code IN ('pronunciation', #{gradeCode}, 'vocabulary')
             ) result
        ORDER BY sort_order;
    </select>

    <select id="selectTchDsbdAreaAchievementStudentDistributionSummary" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdAreaAchievementStudentDistributionSummary */
        WITH grouped_data AS (
            SELECT
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                    <choose>
                        <when test="textbookId != '6981' and textbookId != '6982'">
                            WHEN a.code IN ('pronunciation', 'grammar', 'vocabulary') THEN 'language'
                        </when>
                        <otherwise>
                            WHEN a.code IN ('pronunciation', 'vocabulary') THEN 'language'
                        </otherwise>
                    </choose>
                    END AS category,
                CASE
                    WHEN a.code IN ('listening', 'reading', 'viewing') THEN 1
                    WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 2
                    WHEN a.code = 'vocabulary' THEN 3
                    <choose>
                        <when test="textbookId != '6981' and textbookId != '6982'">
                            WHEN a.code = 'grammar' THEN 4
                        </when>
                    </choose>
                    WHEN a.code = 'pronunciation' THEN 5
                END AS category_order,
                a.code,
                a.val as code_nm,
                IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                IFNULL(b.usd_ach_scr_percent, 0) as usd_ach_scr_percent,
                IFNULL(std_at, 'N') as std_at
            FROM (
                     SELECT id, code, val
                     FROM aidt_lcms.meta
                     WHERE name IN ('evaluationArea', 'contentsItem', 'evaluationArea3','evaluationCommu')
                       AND brand_id = '3'
                 ) a
             LEFT JOIN (
                SELECT
                    usd_ach_id,
                    sum(c.usd_ach_scr) as usd_ach_scr,
                    sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                    CASE
                        WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                            THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                        WHEN c.usd_ach_id = 'pronunciation'
                            THEN round(avg(c.usd_ach_scr_percent), 2)
                        ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                        END as usd_ach_scr_percent,
                    c.std_at
                FROM (
                         SELECT
                             usd_ach_id,
                             sum(usd_ach_scr) as usd_ach_scr,
                             sum(rflt_actv_cnt) as rflt_actv_cnt,
                             sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                             stdt_id,
                             std_at
                         FROM aidt_lms.usd_ach_src2_info
                         WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                           AND cla_id = #{claId}
                           AND textbk_id = #{textbookId}
                           AND std_dt = (
                             SELECT max(dt.std_dt)
                             FROM aidt_lms.usd_ach_src2_info dt
                             WHERE dt.cla_id = #{claId}
                               AND dt.textbk_id = #{textbookId}
                         )
                         GROUP BY usd_ach_id, stdt_id

                         UNION ALL

                         SELECT
                             b.usd_ach_id,
                             sum(b.usd_ach_scr) as usd_ach_scr,
                             sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                             AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                             b.stdt_id,
                             b.std_at
                         FROM (
                                  SELECT
                                      a.usd_ach_id,
                                      sum(a.usd_ach_scr) as usd_ach_scr,
                                      sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                      AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                      a.stdt_id,
                                      a.std_at
                                  FROM (
                                           SELECT
                                               a.usd_ach_id,
                                               b.iem_id,
                                               b.iem_cd,
                                               sum(b.usd_ach_scr) as usd_ach_scr,
                                               sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                               sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                               a.stdt_id,
                                               a.std_at
                                           FROM aidt_lms.usd_ach_src2_info a
                                                    INNER JOIN aidt_lms.usd_ach_src2_detail b ON a.id = b.usd_ach_src_id
                                           WHERE 1=1
                                            <choose>
                                                <when test="textbookId != '6981' and textbookId != '6982'">
                                                    AND a.usd_ach_id IN ('pronunciation', 'grammar', 'vocabulary')
                                                </when>
                                                <otherwise>
                                                    AND usd_ach_id IN ('pronunciation', 'vocabulary')
                                                </otherwise>
                                            </choose>
                                             AND a.cla_id = #{claId}
                                             AND a.textbk_id = #{textbookId}
                                             AND a.std_dt = (
                                               SELECT max(dt.std_dt)
                                               FROM aidt_lms.usd_ach_src2_info dt
                                               WHERE dt.cla_id = #{claId}
                                                 AND dt.textbk_id = #{textbookId}
                                           )
                                           GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                       ) a
                                  GROUP BY a.usd_ach_id, a.iem_id
                              ) b
                         GROUP BY b.usd_ach_id
                     ) c
                GROUP BY c.usd_ach_id
            ) b ON a.code = b.usd_ach_id
        ),
             student_data AS (
                 SELECT
                     CASE
                         WHEN a.code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                         WHEN a.code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                        <choose>
                            <when test="textbookId != '6981' and textbookId != '6982'">
                                WHEN a.code IN ('pronunciation', 'grammar', 'vocabulary') THEN 'language'
                            </when>
                            <otherwise>
                                WHEN a.code IN ('pronunciation', 'vocabulary') THEN 'language'
                            </otherwise>
                        </choose>
                         END AS category,
                     a.code,
                     a.val as code_nm,
                     IFNULL(b.usd_ach_scr, 0) as usd_ach_scr,
                     IFNULL(b.rflt_actv_cnt, 0) as rflt_actv_cnt,
                     IFNULL(b.usd_ach_scr_percent, 0) as student_percent,
                     IFNULL(std_at, 'N') as std_at
                 FROM (
                          SELECT id, code, val
                          FROM aidt_lcms.meta
                          WHERE name IN ('evaluationArea', 'contentsItem', 'evaluationArea3','evaluationCommu')
                            AND brand_id = '3'
                      ) a
                  LEFT JOIN (
                     SELECT
                         usd_ach_id,
                         sum(c.usd_ach_scr) as usd_ach_scr,
                         sum(c.rflt_actv_cnt) as rflt_actv_cnt,
                         CASE
                             WHEN c.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                 THEN round((sum(c.usd_ach_scr_percent) * 100 / count(c.stdt_id)), 2)
                             WHEN c.usd_ach_id = 'pronunciation'
                                 THEN round(avg(c.usd_ach_scr_percent), 2)
                             ELSE round((avg(c.usd_ach_scr_percent) * 100), 2)
                             END as usd_ach_scr_percent,
                         c.std_at
                     FROM (
                              SELECT
                                  usd_ach_id,
                                  sum(usd_ach_scr) as usd_ach_scr,
                                  sum(rflt_actv_cnt) as rflt_actv_cnt,
                                  sum(usd_ach_scr)/NULLIF(sum(rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                  stdt_id,
                                  std_at
                              FROM aidt_lms.usd_ach_src2_info
                              WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                                AND cla_id = #{claId}
                                AND textbk_id = #{textbookId}
                                AND stdt_id = #{userId}
                                AND std_dt = (
                                  SELECT max(dt.std_dt)
                                  FROM aidt_lms.usd_ach_src2_info dt
                                  WHERE dt.cla_id = #{claId}
                                    AND dt.textbk_id = #{textbookId}
                              )
                              GROUP BY usd_ach_id, stdt_id

                              UNION ALL

                              SELECT
                                  b.usd_ach_id,
                                  sum(b.usd_ach_scr) as usd_ach_scr,
                                  sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                  AVG(b.usd_ach_scr_percent) as usd_ach_scr_percent,
                                  b.stdt_id,
                                  b.std_at
                              FROM (
                                       SELECT
                                           a.usd_ach_id,
                                           sum(a.usd_ach_scr) as usd_ach_scr,
                                           sum(a.rflt_actv_cnt) as rflt_actv_cnt,
                                           AVG(a.usd_ach_scr_percent) as usd_ach_scr_percent,
                                           a.stdt_id,
                                           a.std_at
                                       FROM (
                                                SELECT
                                                    a.usd_ach_id,
                                                    b.iem_id,
                                                    b.iem_cd,
                                                    sum(b.usd_ach_scr) as usd_ach_scr,
                                                    sum(b.rflt_actv_cnt) as rflt_actv_cnt,
                                                    sum(b.usd_ach_scr)/NULLIF(sum(b.rflt_actv_cnt), 0) as usd_ach_scr_percent,
                                                    a.stdt_id,
                                                    a.std_at
                                                FROM aidt_lms.usd_ach_src2_info a
                                                         INNER JOIN aidt_lms.usd_ach_src2_detail b ON a.id = b.usd_ach_src_id
                                                WHERE 1=1
                                                <choose>
                                                    <when test="textbookId == 6981 or textbookId == 6982">
                                                        AND a.usd_ach_id IN ('vocabulary', 'pronunciation')
                                                    </when>
                                                    <otherwise>
                                                        AND a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                                                    </otherwise>
                                                </choose>
                                                  AND a.cla_id = #{claId}
                                                  AND a.textbk_id = #{textbookId}
                                                  AND a.stdt_id = #{userId}
                                                  AND a.std_dt = (
                                                    SELECT max(dt.std_dt)
                                                    FROM aidt_lms.usd_ach_src2_info dt
                                                    WHERE dt.cla_id = #{claId}
                                                      AND dt.textbk_id = #{textbookId}
                                                )
                                                GROUP BY a.usd_ach_id, a.stdt_id, b.iem_cd
                                            ) a
                                       GROUP BY a.usd_ach_id, a.iem_id
                                   ) b
                              GROUP BY b.usd_ach_id
                          ) c
                     GROUP BY c.usd_ach_id
                 ) b ON a.code = b.usd_ach_id
             ),
             achievement_data AS (
                 SELECT
                     r.code,
                     r.code_nm,
                     r.usd_ach_scr_percent as class_avg_percent,
                     ROUND(COALESCE(s.student_percent, 0), 2) as student_percent,
                     COALESCE(s.student_percent, 0) - r.usd_ach_scr_percent as diff_percent,
                     category_order
                 FROM (
                          /* 이해 영역 */
                          SELECT
                              'understanding' as code,
                              '이해' as code_nm,
                              ROUND(AVG(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                              category_order
                          FROM grouped_data
                          WHERE category = 'understanding'

                          UNION ALL

                          /* 표현 영역 */
                          SELECT
                              'expression' as code,
                              '표현' as code_nm,
                              ROUND(AVG(usd_ach_scr_percent), 2) as usd_ach_scr_percent,
                              category_order
                          FROM grouped_data
                          WHERE category = 'expression'

                          UNION ALL

                          /* 개별 능력 */
                          SELECT
                              code,
                              code_nm,
                              ROUND(usd_ach_scr_percent, 2) as usd_ach_scr_percent,
                              category_order
                          FROM grouped_data
                          WHERE 1=1
                        <choose>
                            <when test="textbookId == 6981 or textbookId == 6982">
                                AND code IN ('vocabulary', 'pronunciation')
                            </when>
                            <otherwise>
                                AND code IN ('vocabulary', 'grammar', 'pronunciation')
                            </otherwise>
                        </choose>
                      ) r
                  LEFT JOIN (
                     /* 이해, 표현 영역 평균 */
                     SELECT
                         CASE
                             WHEN code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                             WHEN code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                         END AS code,
                         code_nm,
                         ROUND(AVG(student_percent), 2) as student_percent
                     FROM student_data
                     WHERE code IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                     GROUP BY
                         CASE
                             WHEN code IN ('listening', 'reading', 'viewing') THEN 'understanding'
                             WHEN code IN ('speaking', 'writing', 'presenting') THEN 'expression'
                         END

                     UNION ALL

                     /* 개별 영역 */
                     SELECT
                         code,
                         code_nm,
                         ROUND(student_percent, 2) as student_percent
                     FROM student_data
                     WHERE 1=1
                    <choose>
                        <when test="textbookId == 6981 or textbookId == 6982">
                            AND code IN ('vocabulary', 'pronunciation')
                        </when>
                        <otherwise>
                            AND code IN ('vocabulary', 'grammar', 'pronunciation')
                        </otherwise>
                    </choose>
                 ) s ON r.code = s.code
             )
        SELECT
            code,
            code_nm,
            student_percent as usd_ach_scr_percent,
            CASE
                WHEN diff_percent <![CDATA[=]]> 0 THEN 'equals'
                WHEN diff_percent <![CDATA[>]]> 0 THEN 'high'
                WHEN diff_percent <![CDATA[<]]> 0 THEN 'low'
            END as diff_type
        FROM achievement_data
        where code = #{evaluationAreaCd}
    </select>

    <select id="selectTchDsbdDistributionAreaAchievementStudentList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdDistributionAreaAchievementStudentList */
        select
            stdt_id,
            flnm,
            num, /* 학생 번호 */
            round(avg(usd_ach_scr),2 )                         as usd_ach_scr_percent,
            sum(rflt_actv_cnt)                                 as total_rflt_actv_cnt,
            case
                when avg(usd_ach_scr) >= 70 then 1
                when avg(usd_ach_scr) > 30 then 2
                else 3
            end                                                as dfclt_lvl_ty,
            case
                when sum(rflt_actv_cnt) > 0 then 'Y' else 'N'
            end as study_yn
        from (
                 select
                     a.stdt_id,
                     b.flnm,
                     b.num,
                     case
                         when c.usd_ach_id = 'pronunciation' then ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0)
                         else ifnull(round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2), 0)
                     end as usd_ach_scr,
--                     ifnull(round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2), 0) as usd_ach_scr,
                     ifnull(c.rflt_actv_cnt, 0)                                    as rflt_actv_cnt,
                     (case
                          when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) >= 70 then 1
                          when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) > 30 then 2
                          else 3 end)                                              as dfclt_lvl_ty,
                     (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end)       as study_yn
                 from aidt_lms.tc_cla_mb_info a
                          inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                          left join (
                     select
                         a.stdt_id,
                         a.usd_ach_id,
                         sum(a.usd_ach_scr)     as usd_ach_scr,
                         sum(a.rflt_actv_cnt)   as rflt_actv_cnt
                     from aidt_lms.usd_ach_src2_info a
                     where 1 = 1
                       and a.usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                       and a.cla_id = #{claId}
                       and a.textbk_id = #{textbookId}
                       and a.std_dt = (
                         select max(b.std_dt)
                         from aidt_lms.usd_ach_src2_info b
                         where 1 = 1
                           and b.cla_id = #{claId}
                           and b.textbk_id = #{textbookId}

                     )
                     group by a.stdt_id, a.usd_ach_id

                     union all

                     select x.stdt_id,
                            x.usd_ach_id,
                            sum(y.usd_ach_scr)     as usd_ach_scr,
                            sum(y.rflt_actv_cnt)   as rflt_actv_cnt
                     from aidt_lms.usd_ach_src2_info x
                              inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id
                     where 1=1
                    <choose>
                        <when test="textbookId == 6981 or textbookId == 6982">
                            and x.usd_ach_id IN ('vocabulary', 'pronunciation')
                        </when>
                        <otherwise>
                            and x.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                        </otherwise>
                    </choose>
                       and x.cla_id = #{claId}
                       and x.textbk_id = #{textbookId}
                       and x.std_dt = (
                         select max(c.std_dt)
                         from aidt_lms.usd_ach_src2_info c
                         where 1 = 1

                           and c.cla_id = #{claId}
                           and c.textbk_id = #{textbookId}
                     )
                     group by x.stdt_id, x.usd_ach_id, y.iem_cd
                 ) c on a.stdt_id = c.stdt_id
                 where a.cla_id = #{claId}
                 and a.actvtn_at = 'Y'
             ) a
        group by stdt_id
        order by num;
    </select>

    <select id="selectTchDsbdDistributionAreaAchievementStudentList1" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdDistributionAreaAchievementStudentList1 */
        select
            stdt_id,
            flnm,
            num,
            round(avg(usd_ach_scr),2 )                         as usd_ach_scr_percent,
            sum(rflt_actv_cnt)                                 as total_rflt_actv_cnt,
            case
                when avg(usd_ach_scr) >= 70 then 1
                when avg(usd_ach_scr) > 30 then 2
                else 3
            end                                            as dfclt_lvl_ty,
            case
                when sum(rflt_actv_cnt) > 0 then 'Y' else 'N'
            end as study_yn
        <if test="evaluationAreaCd != null and evaluationAreaCd != ''">
            , #{evaluationAreaCd} as evaluationAreaCd
        </if>
            from (
                select
                    a.stdt_id,
                    b.flnm,
                    b.num,
                    ifnull(round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2), 0) as usd_ach_scr,
                    ifnull(c.rflt_actv_cnt, 0)                                    as rflt_actv_cnt,
                    (case
                        when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) >= 70 then 1
                        when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) > 30 then 2
                        else 3 end)                                              as dfclt_lvl_ty,
                    (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end)       as study_yn
            from aidt_lms.tc_cla_mb_info a
            inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
            left join (
                select
                    a.stdt_id,
                    a.usd_ach_id,
                    sum(a.usd_ach_scr)     as usd_ach_scr,
                    sum(a.rflt_actv_cnt)   as rflt_actv_cnt
                from aidt_lms.usd_ach_src2_info a
                where 1 = 1
                and a.cla_id = #{claId}
                and a.textbk_id = #{textbookId}
                and a.usd_ach_id in
                <if test="evaluationAreaCd == 'understanding'">
                    ('listening', 'reading', 'viewing')
                </if>
                <if test="evaluationAreaCd == 'expression'">
                    ('speaking', 'writing', 'presenting')
                </if>
                and a.std_dt = (
                                select max(b.std_dt)
                                from aidt_lms.usd_ach_src2_info b
                                where 1 = 1
                                and b.cla_id = #{claId}
                                and b.textbk_id = #{textbookId}
                                and b.usd_ach_id in
                                <if test="evaluationAreaCd == 'understanding'">
                                    ('listening', 'reading', 'viewing')
                                </if>
                                <if test="evaluationAreaCd == 'expression'">
                                    ('speaking', 'writing', 'presenting')
                                </if>
                )
                group by a.stdt_id, a.usd_ach_id
            ) c on a.stdt_id = c.stdt_id
            where a.cla_id = #{claId}
            and a.actvtn_at = 'Y'
        ) a
        group by stdt_id
        order by num;
    </select>

    <select id="selectTchDsbdDistributionAreaAchievementStudentList2" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdDistributionAreaAchievementStudentList2 */
        select
            stdt_id,
            flnm,
            num,
            round(avg(usd_ach_scr), 2)                       as usd_ach_scr_percent,
            sum(rflt_actv_cnt)                                 as total_rflt_actv_cnt,
            stdt_id,
            case
                when avg(usd_ach_scr) >= 70 then 1
                when avg(usd_ach_scr) > 30 then 2
                else 3
            end                                            as dfclt_lvl_ty,
            case
                when sum(rflt_actv_cnt) > 0 then 'Y'
                else 'N'
            end                                            as study_yn
        <if test="evaluationAreaCd != null and evaluationAreaCd != ''">
            , #{evaluationAreaCd} as evaluationAreaCd
        </if>
        from (
                 select a.stdt_id,
                        b.flnm,
                        b.num,
                        case
                            when c.usd_ach_id = 'pronunciation' then ifnull(round((c.usd_ach_scr/c.rflt_actv_cnt),2), 0)
                            else ifnull(round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2), 0)
                        end as usd_ach_scr,
--                         ifnull(round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2), 0) as usd_ach_scr,
                        (case
                             when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) >= 70 then 1
                             when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) > 30 then 2
                             else 3 end)                                              as dfclt_lvl_ty,
                        ifnull(c.rflt_actv_cnt, 0)                                   as rflt_actv_cnt,
                        (case when c.rflt_actv_cnt > 0 then 'Y' else 'N' end)       as study_yn
                 from aidt_lms.tc_cla_mb_info a
                          inner join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                          left join (
                     select x.stdt_id,
                            x.usd_ach_id,
                            sum(y.usd_ach_scr)     as usd_ach_scr,
                            sum(y.rflt_actv_cnt)   as rflt_actv_cnt
                     from aidt_lms.usd_ach_src2_info x
                              inner join aidt_lms.usd_ach_src2_detail y on x.id = y.usd_ach_src_id
                     where x.usd_ach_id = #{evaluationAreaCd}
                       and x.cla_id = #{claId}
                       and x.textbk_id = #{textbookId}
                       and x.std_dt = (
                         select max(c.std_dt)
                         from aidt_lms.usd_ach_src2_info c
                         where 1 = 1
                           and c.usd_ach_id = #{evaluationAreaCd}
                           and c.cla_id = #{claId} /* 클래스 아이디 */
                           and c.textbk_id = #{textbookId}
                     )
                     group by x.stdt_id, x.usd_ach_id, y.iem_cd
                 ) c on a.stdt_id = c.stdt_id
                 where a.cla_id = #{claId}
                 and a.actvtn_at = 'Y'
             ) as a
        group by stdt_id
        order by num;
    </select>

    <!-- 단원목록 조회 -->
    <select id="selectUnitList" parameterType="map" resultType="camelHashMap">
        SELECT
            row_number() over (order by b.`code`) as unitNum
            , b.id as meta_id
            , b.parent_id
            , b.code
            , b.val AS unit_nm
            , SUBSTRING_INDEX(b.val, ' ', 2) AS unit -- 첫 번째와 두 번째 단어만 추출
            , b.depth - 1 as depth
        FROM aidt_lcms.meta a
        inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
        inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
        left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
        WHERE a.is_active = 1
            and a.parent_id = (
                select curriBook from aidt_lcms.textbook where id = #{textbookId}
            )
        <if test="isProject == 0">
            and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
        </if>
    </select>

    <!-- 영어 영역 목록 조회 -->
    <select id="selectEngAreaList" resultType="camelHashMap">
        select
            id as metaId
            , code
            , val
        from aidt_lcms.meta
        where 1=1
            and name in ('evaluationArea','contentsItem','evaluationArea3')
            and brand_id = '3'
    </select>

    <!-- 학습이력있는 단원번호 조회 -->
    <select id="selectLearnedUnitList" resultType="camelHashMap">
        SELECT learnedUnitNum
        FROM (
            SELECT s.unit_num AS learnedUnitNum
            FROM (
                SELECT a.unit_num
                FROM aidt_lms.usd_ach_src2_info a
                WHERE usd_ach_id IN ('listening', 'reading', 'viewing', 'speaking', 'writing', 'presenting')
                    AND cla_id = #{claId}
                    AND textbk_id = #{textbookId}
                    AND std_dt = (
                        SELECT MAX(dt.std_dt)
                        FROM aidt_lms.usd_ach_src2_info dt
                        WHERE dt.cla_id = #{claId}
                            AND dt.textbk_id = #{textbookId}
                    )
                ) s
            GROUP BY s.unit_num

            UNION

            SELECT a.unit_num AS learnedUnitNum
            FROM aidt_lms.usd_ach_src2_info a
            INNER JOIN aidt_lms.usd_ach_src2_detail b
            ON a.id = b.usd_ach_src_id
            WHERE a.usd_ach_id IN ('vocabulary', 'grammar', 'pronunciation')
                AND a.cla_id = #{claId}
                AND a.textbk_id = #{textbookId}
                AND a.std_dt = (
                    SELECT MAX(dt.std_dt)
                    FROM aidt_lms.usd_ach_src2_info dt
                    WHERE dt.cla_id = #{claId}
                        AND dt.textbk_id = #{textbookId}
            )
            GROUP BY a.unit_num
            ) combined
        ORDER BY learnedUnitNum
    </select>


    <!-- 영역분포 그래프 데이터_학급 평균 이해도 조회 -->
    <select id="selectTchDsbdChapterUsdClassdDstribution" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdChapterUsdClassdDstribution */
        WITH max_std_dt as (
            select max(std_dt) as maxStdDt
            from aidt_lms.std_usd_content_area_hist a
            where 1=1
            and a.textbk_id = #{textbookId}
            and a.cla_id = #{claId}
        )
        SELECT
            a.contentAreaId as content_area_id, /* 영역 번호 */
            a.contentAreaNm as content_area_nm, /* 영역 명 */
            IFNULL(ROUND(AVG(sucah.usd_scr), 2), 0) AS usd_scr, /* 단원 평균 이해도 */
            IFNULL(sucah.std_at, 'N') as std_at
        FROM (
                 /* 모든 영역 조회 */
                 SELECT
                     a.id,
                     a.val AS unit_nm,
                     a.parent_id,
                     c.val AS contentAreaNm,
                     c.id AS contentAreaId
                 FROM aidt_lcms.meta a
                          LEFT JOIN aidt_lcms.meta_meta_map b
                                    ON a.id = b.meta_id_a
                          LEFT JOIN aidt_lcms.meta c
                                    ON b.meta_name_b = 'contentarea'
                                        AND b.meta_id_b = c.id
                 WHERE a.parent_id = (
                     /* textbookId로 단원 metaId 조회 */
                     SELECT
                         b.parent_id
                     FROM aidt_lcms.meta a
                              INNER JOIN aidt_lcms.meta b
                                         ON a.`code` = b.description
                                             AND b.is_active = 1
                                             AND b.name = 'studyMap1'
                              INNER JOIN aidt_lcms.meta c
                                         ON c.id = b.parent_id
                                             AND c.is_active = 1
                              LEFT JOIN aidt_lcms.meta_extension d
                                        ON b.meta_extension_id = d.meta_extension_id
                     WHERE 1=1
                       AND a.parent_id = (
                         SELECT curriBook FROM aidt_lcms.textbook WHERE id = 6993 /* 무조건 4개의 영역을 반환해달라는 요청에 따라 하드코딩 처리함. AIDTISS-3339 */
                     )
                       AND a.is_active = 1
                       AND IFNULL(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                     LIMIT 1
                )
            ) a
        LEFT JOIN aidt_lms.std_usd_content_area_hist sucah
            ON sucah.content_area_id = a.contentAreaId
                AND sucah.textbk_id = #{textbookId}
                AND sucah.cla_id = #{claId}
                AND sucah.std_at = 'Y'
                AND sucah.std_dt = (select maxStdDt from max_std_dt)
                <if test="contentAreaId !=null and contentAreaId != ''">
                    AND sucah.content_area_id = #{contentAreaId}
                </if>
        LEFT JOIN aidt_lms.tc_cla_mb_info tcmi
            ON tcmi.cla_id = sucah.cla_id
            AND tcmi.stdt_id = sucah.stdt_id
            AND tcmi.actvtn_at = 'Y'
        WHERE 1=1
          AND a.contentAreaId IS NOT NULL
        GROUP BY a.contentAreaId, a.contentAreaNm
        ORDER BY content_area_id;
    </select>

    <select id="selectTchDsbdChapterUsdClassdDstribution2" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdChapterUsdClassdDstribution2 */
        WITH original_data AS (
            SELECT
                T.meta_id,
                T.unit_num,
                T.unit_nm,
                T.kwg_main_id,
                T.kwgNm,
                T.std_at,
                round(T.usd_scr) AS usd_scr,
                T.depth - 1 AS depth,
                T.code
            FROM (
                     SELECT
                         X.id AS meta_id,
                         DENSE_RANK() OVER (order by X.id) AS unit_num,
                             X.unit_nm,
                         Y.id AS kwg_main_id,
                         Y.val AS kwgNm,
                         Y.depth,
                         Y.code,
                         ifnull((
                                    select if(count(1) > 0, 'Y','N') as std_at
                                    from aidt_lms.std_usd_info a
                                    where a.cla_id = #{claId}
                                      and a.meta_id = X.id
                                      and a.unit_num = unit_num
                                      and a.kwg_main_id = Y.id
                                      and a.textbk_id = #{textbookId}
                                      and a.std_at = 'Y'
                                ),'N') AS std_at,
                         (
                             select ifnull(round(avg(usd_scr),2),0) as usd_scr
                             from aidt_lms.std_usd_info a
                             where a.cla_id = #{claId}
                               and a.meta_id = X.id
                               and a.unit_num = unit_num
                               and a.kwg_main_id = Y.id
                               and a.textbk_id = #{textbookId}
                               and a.std_at = 'Y'
                         ) as usd_scr,
                         ROW_NUMBER() OVER (order by Y.id) as rowNo
                     FROM
                         (
                             SELECT
                                 b.id,
                                 b.parent_id,
                                 b.code,
                                 b.val AS unit_nm,
                                 b.depth
                             FROM
                                 aidt_lcms.meta a
                                     INNER JOIN aidt_lcms.meta b ON a.code = b.description
                                     AND b.is_active = 1
                                     AND b.name = 'studyMap1'
                                     INNER JOIN aidt_lcms.meta c
                                                on c.id = b.parent_id
                                                    and c.is_active = 1
                             WHERE
                                 a.parent_id = (
                                     SELECT curriBook FROM aidt_lcms.textbook WHERE id = #{textbookId}
                                 )
                               and a.is_active = 1
                         ) X
                             INNER JOIN aidt_lcms.meta Y ON Y.code LIKE CONCAT(X.code, '-%')
                             AND Y.name in ('studyMap2','studyMap3','studyMap_1') and Y.is_active = 1
                     where 1=1
                     ORDER BY Y.code
                 ) T
        ),
         content_areas AS (
                 /* 모든 영역 조회 */
                 SELECT
                     a.id,
                     a.val as unit_nm,
                     a.parent_id,
                     c.val as contentAreaNm,
                     c.id as contentAreaId
                 FROM aidt_lcms.meta a
                          LEFT JOIN aidt_lcms.meta_meta_map b
                                    ON a.id = b.meta_id_a
                          LEFT JOIN aidt_lcms.meta c
                                    ON b.meta_name_b = 'contentarea'
                                        AND b.meta_id_b = c.id
                 WHERE a.parent_id = (
                     /* textbookId로 단원 metaId 조회 */
                     SELECT
                         b.parent_id
                     FROM aidt_lcms.meta a
                              inner join aidt_lcms.meta b
                                         on a.`code` = b.description
                                             and b.is_active = 1
                                             and b.name = 'studyMap1'
                              inner join aidt_lcms.meta c
                                         on c.id = b.parent_id
                                             and c.is_active = 1
                              left join aidt_lcms.meta_extension d
                                        on b.meta_extension_id = d.meta_extension_id
                     WHERE 1=1
                       and a.parent_id = (
                         select curriBook from aidt_lcms.textbook where id = #{textbookId}
                     )
                       and a.is_active = 1
                       and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
            limit 1
            )
        ),
        expression_calc_data AS (
        /* 식의 계산 관련 데이터 */
        SELECT *
        FROM original_data
        where code LIKE 'mathMap14-A01-B02%'
        ),
        adjusted_data AS (
        /* 데이터 조정: 유리수 단원에서 식의 계산 제외, 부등식 단원에 식의 계산 추가 */
        SELECT
            meta_id,
            unit_num,
            unit_nm,
            kwg_main_id,
            kwgNm,
            std_at,
            usd_scr,
            depth,
            code
        FROM original_data
        WHERE NOT (meta_id = 45587 AND code LIKE 'mathMap14-A01-B02%')

        UNION ALL

        /* 부등식 단원에 식의 계산 데이터 추가 */
        SELECT
            45595 AS meta_id, /* 부등식과 연립방정식 meta_id */
            (SELECT unit_num FROM original_data WHERE meta_id = 45595 LIMIT 1) AS unit_num,
            '식의 계산을 포함한 부등식과 연립방정식' AS unit_nm,
            kwg_main_id,
            kwgNm,
            std_at,
            usd_scr,
            depth,
            code
        FROM expression_calc_data
        ),
        unit_avg AS (
        /* 단원별 평균 계산 */
        SELECT
            meta_id,
            unit_num,
            unit_nm,
            CASE
            WHEN SUM(CASE WHEN std_at = 'Y' THEN 1 ELSE 0 END) > 0
            THEN ROUND(SUM(CASE WHEN std_at = 'Y' THEN usd_scr ELSE 0 END) /
            SUM(CASE WHEN std_at = 'Y' THEN 1 ELSE 0 END), 2)
            ELSE 0
            END as avg_unit_score,
            CASE WHEN COUNT(CASE WHEN std_at = 'Y' THEN 1 END) <![CDATA[ > ]]> 0 THEN 'Y' ELSE 'N' END as std_at
        FROM adjusted_data
        GROUP BY meta_id
        ),
        unit_with_areas AS (
        /* 단원 평균과 영역 정보 연결 */
        SELECT
            ua.meta_id,
            ua.unit_num,
            ua.unit_nm,
            ua.avg_unit_score,
            ua.std_at,
            ca.contentAreaNm,
            ca.contentAreaId
        FROM unit_avg ua
            LEFT JOIN content_areas ca ON ua.meta_id = ca.id
        )

        /* 콘텐츠 영역별 단원 평균의 평균 계산 */
        SELECT
            contentAreaNm,
            contentAreaId,
            CASE
                WHEN COUNT(meta_id) <![CDATA[ > ]]> 0
                    THEN ROUND(AVG(avg_unit_score), 2)
                ELSE 0
                END as usdScr,
            std_at
        FROM unit_with_areas
        WHERE contentAreaNm IS NOT NULL
        GROUP BY contentAreaNm, contentAreaId
        ORDER BY contentAreaId;
    </select>

    <select id="selectTchDsbdChapterUsdDistributionSummary" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdChapterUsdDistributionSummary */
        with unit_scores as (
            select
                suui.meta_id,
                suui.unit_num,
                max(m.val) as unitNm,
                round(avg(suui.usd_scr), 2) as usd_scr
            from aidt_lms.std_usd_unit_info suui
                     join aidt_lms.tc_cla_mb_info tcmi
                          on tcmi.cla_id = suui.cla_id
                              and tcmi.stdt_id = suui.stdt_id
                     left join aidt_lcms.meta m
                               on m.id = suui.meta_id
            where 1=1
              and suui.textbk_id = #{textbookId}
              and suui.cla_id = #{claId}
              and suui.std_at = 'Y'
              and tcmi.user_id = #{userId}
              and tcmi.actvtn_at = 'Y'
            group by suui.meta_id, suui.unit_num
        ),
         min_max_scores as (
             select
                 min(usd_scr) as min_score,
                 max(usd_scr) as max_score
             from unit_scores
         )
        select
            us.unit_num,
            us.unitNm,
            us.usd_scr,
            case
                when us.usd_scr = (select max_score from min_max_scores) then 'high'
                when us.usd_scr = (select min_score from min_max_scores) then 'low'
                end as diff_type
        from
            unit_scores us
        where
            us.usd_scr = (select max_score from min_max_scores)
           or us.usd_scr = (select min_score from min_max_scores)
        order by
            diff_type;
    </select>

    <!-- 학생개인의 영역별 이해도 조회 -->
    <select id="selectTchDsbdChapterUsdStudentDistribution" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdChapterUsdStudentDistribution */
        WITH content_areas AS (
            /* 교재에 포함된 모든 영역 정보 조회 */
            SELECT
                c.id AS content_area_id,
                c.val AS content_area_nm
            FROM aidt_lcms.meta c
                     INNER JOIN aidt_lcms.meta_meta_map b ON b.meta_name_b = 'contentarea' AND b.meta_id_b = c.id
                     INNER JOIN aidt_lcms.meta a ON a.id = b.meta_id_a
            WHERE a.parent_id = (
                    /* textbookId로 단원 metaId 조회 */
                    SELECT b.parent_id
                    FROM aidt_lcms.meta a
                             INNER JOIN aidt_lcms.meta b ON a.`code` = b.description AND b.is_active = 1 AND b.name = 'studyMap1'
                             INNER JOIN aidt_lcms.meta c ON c.id = b.parent_id AND c.is_active = 1
                             LEFT JOIN aidt_lcms.meta_extension d ON b.meta_extension_id = d.meta_extension_id
                    WHERE 1=1
                      AND a.parent_id = (
                        SELECT curriBook FROM aidt_lcms.textbook WHERE id = 6993 /* 무조건 4개의 영역을 반환해달라는 요청에 따라 하드코딩 처리함. AIDTISS-3339 */
                    )
                      AND a.is_active = 1
                      AND IFNULL(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                    LIMIT 1
                )
            ),
            max_std_dt AS (
                select max(std_dt) as maxStdDt
                from aidt_lms.std_usd_content_area_hist a
                where 1=1
                and a.textbk_id = #{textbookId}
                and a.cla_id = #{claId}
            )
        SELECT
            ca.content_area_id,
            ca.content_area_nm,
            u.flnm,
            tcmi.stdt_id AS stdt_id,
            IFNULL(ROUND(AVG(sucah.usd_scr), 2), 0) AS usd_scr,
            IFNULL(sucah.std_at, 'N') as std_at
        FROM content_areas ca
            LEFT JOIN aidt_lms.std_usd_content_area_hist sucah
                ON sucah.content_area_id = ca.content_area_id
                    AND sucah.textbk_id = #{textbookId}
                    AND sucah.cla_id = #{claId}
                    AND sucah.stdt_id = #{stntId}
                    AND sucah.std_at = 'Y'
                    AND sucah.std_dt = (SELECT maxStdDt FROM max_std_dt)
            LEFT JOIN aidt_lms.tc_cla_mb_info tcmi
                ON tcmi.cla_id = #{claId}
                    AND tcmi.stdt_id = #{stntId}
                    and tcmi.actvtn_at = 'Y'
            LEFT JOIN aidt_lms.user u ON u.user_id = tcmi.stdt_id
        where 1=1
        GROUP BY ca.content_area_id
        ORDER BY ca.content_area_id;
</select>

    <!--영역에 대한 학생별 이해도 목록 조회-->
    <select id="selectTchDsbdDistributionChapterUsdStudentList" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdDistributionChapterUsdStudentList */
        WITH all_areas AS (
            /* 모든 영역 조회 */
            SELECT
                a.id,
                a.val AS unit_nm,
                a.parent_id,
                c.val AS contentAreaNm,
                c.id AS contentAreaId
            FROM aidt_lcms.meta a
                 LEFT JOIN aidt_lcms.meta_meta_map b
                           ON a.id = b.meta_id_a
                 LEFT JOIN aidt_lcms.meta c
                           ON b.meta_name_b = 'contentarea'
                               AND b.meta_id_b = c.id
            WHERE a.parent_id = (
                        /* textbookId로 단원 metaId 조회 */
                        SELECT
                            b.parent_id
                        FROM aidt_lcms.meta a
                             INNER JOIN aidt_lcms.meta b
                                        ON a.`code` = b.description
                                            AND b.is_active = 1
                                            AND b.name = 'studyMap1'
                             INNER JOIN aidt_lcms.meta c
                                        ON c.id = b.parent_id
                                            AND c.is_active = 1
                             LEFT JOIN aidt_lcms.meta_extension d
                                       ON b.meta_extension_id = d.meta_extension_id
                        WHERE 1=1
                          AND a.parent_id = (
                                    SELECT curriBook FROM aidt_lcms.textbook WHERE id = 6993 /* 무조건 4개의 영역을 반환해달라는 요청에 따라 하드코딩 처리함. AIDTISS-3339 */
                                )
                          AND a.is_active = 1
                          AND IFNULL(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                        LIMIT 1
                    )
            AND c.id IS NOT NULL
            ),
            max_std_dt AS (
                select max(std_dt) as maxStdDt
                from aidt_lms.std_usd_content_area_hist a
                where 1=1
                  and a.textbk_id = #{textbookId}
                  and a.cla_id = #{claId}
            )
        SELECT
            tcmi.stdt_id,
            u.flnm,
            (select num from aidt_lms.stdt_reg_info a where a.user_id = tcmi.stdt_id) as num,
            a.contentAreaId as content_area_id,
            a.contentAreaNm as content_area_nm,
            IFNULL(round(avg(sucah.usd_scr), 2), 0) AS usd_scr,
            IFNULL(sucah.std_at, 'N') as std_at
        FROM all_areas a
             JOIN (
                    SELECT contentAreaId FROM all_areas
                    WHERE contentAreaId =
                          CASE
                              WHEN #{contentAreaId} IS NOT NULL AND #{contentAreaId} != '' THEN #{contentAreaId}
                              ELSE (SELECT MIN(contentAreaId) FROM all_areas)
                          END
                    ) selected ON a.contentAreaId = selected.contentAreaId
             LEFT JOIN aidt_lms.tc_cla_mb_info tcmi
                       ON tcmi.cla_id = #{claId}
                       and tcmi.actvtn_at = 'Y'
             LEFT JOIN aidt_lms.user u
                       ON u.user_id = tcmi.stdt_id
             LEFT JOIN aidt_lms.std_usd_content_area_hist sucah
                       ON sucah.content_area_id = a.contentAreaId
                           AND sucah.textbk_id = #{textbookId}
                           AND sucah.cla_id = #{claId}
                           AND sucah.stdt_id = tcmi.stdt_id
                           AND sucah.std_dt = (select maxStdDt from max_std_dt)
        WHERE a.contentAreaId IS NOT NULL
        GROUP BY
            tcmi.stdt_id,
            a.contentAreaId
        ORDER BY num
    </select>

    <select id="selectStudentSelfLearningQuestionCount" resultType="camelHashMap">
        /* TchDsbdMapper.selectStudentSelfLearningQuestionCount */
        SELECT
            stdt_id,
            (select flnm from aidt_lms.user where user_id = s.stdt_id) as flnm,
            SUM(stdMdulCnt) AS totalStdMdulCnt
        FROM (
            SELECT
                A.id,
                stdt_id,
                (SELECT COUNT(*)
                 FROM aidt_lms.slf_std_result_info
                 WHERE std_id = A.id
                   AND std_at = 'Y') AS stdMdulCnt,
                B.stdTime
            FROM aidt_lms.slf_std_info A
            INNER JOIN (
                SELECT
                    y.std_id,
                    TIME_FORMAT(
                        SEC_TO_TIME(SUM(TIME_TO_SEC(TIMEDIFF(y.std_ed_dt, y.std_st_dt)))),
                        '%H:%i:%s'
                    ) AS stdTime,
                    y.std_st_dt,
                    IF(COUNT(CASE WHEN y.ai_tut_use_at = 'Y' THEN 1 END) > 0, 'Y', 'N') AS ai_tut_use_at
                FROM aidt_lms.slf_std_info x
                INNER JOIN aidt_lms.slf_std_result_info y
                    ON x.id = y.std_id
                    AND y.std_at = 'Y' /* 학습여부 */
                WHERE x.textbk_id = #{textbkId}
                  AND x.cla_id = #{claId}
                GROUP BY y.std_id
            ) B ON A.id = B.std_id
            WHERE DATE(A.reg_dt) = #{stdDt}
              AND (
                  SELECT brand_id
                  FROM tc_curriculum
                  WHERE textbk_id = A.textbk_id
                    AND brand_id IS NOT NULL
                  LIMIT 1
              ) = #{brandId}
            GROUP BY A.id, A.std_cd, A.std_nm, B.std_id
        ) s
        GROUP BY s.stdt_id
    </select>

    <select id="selectTchDsbdUsdParticipationQuadrant" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdUsdParticipationQuadrant */
        -- 수업 참여도 계산
        WITH class_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(CASE WHEN d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS numerator,
                (SELECT MAX(click_count) FROM (
                                                  SELECT
                                                      y_sub.mamoym_id,
                                                      COUNT(CASE WHEN d_sub.sub_mit_anw IS NOT NULL OR d_sub.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS click_count
                                                  FROM aidt_lms.tab_info x_sub
                                                           INNER JOIN aidt_lms.std_dta_result_info y_sub ON x_sub.id = y_sub.textbk_tab_id
                                                           INNER JOIN aidt_lms.std_dta_result_detail d_sub ON y_sub.id = d_sub.dta_result_id
                                                           INNER JOIN aidt_lms.tc_cla_mb_info tcmi_sub ON y_sub.mamoym_id = tcmi_sub.stdt_id
                                                                AND x_sub.cla_id = tcmi_sub.cla_id
                                                                AND tcmi_sub.actvtn_at = 'Y'
                                                  WHERE 1=1
                                                    AND x_sub.textbk_id = #{textbookId}
                                                    AND x_sub.cla_id = #{claId}
                                                    -- 날짜 필터링: 제출일 기준
                                                    AND DATE(d_sub.eak_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
        GROUP BY y_sub.mamoym_id
            ) max_clicks) AS denominator
        FROM aidt_lms.tab_info x
            INNER JOIN aidt_lms.std_dta_result_info y ON x.id = y.textbk_tab_id
            INNER JOIN aidt_lms.std_dta_result_detail d ON y.id = d.dta_result_id
            INNER JOIN aidt_lms.tc_cla_mb_info tcmi on y.mamoym_id = tcmi.stdt_id and x.cla_id = tcmi.cla_id and tcmi.actvtn_at = 'Y'
        WHERE 1=1
          AND x.textbk_id = #{textbookId}
          AND x.cla_id = #{claId}
        -- 날짜 필터링: 제출일 기준
          AND DATE(d.eak_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
        GROUP BY y.mamoym_id
        ),

        -- 과제 참여도 계산 (과제당 하루 최대 1점)
        task_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(DISTINCT CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DISTINCT DATE_FORMAT(COALESCE(y.eak_ed_dt, x.task_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.task_info x
                INNER JOIN aidt_lms.task_result_info y ON x.id = y.task_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = y.mamoym_id and tcmi.cla_id = x.cla_id and tcmi.actvtn_at = 'Y'
            WHERE
                x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND (x.pd_evl_ed_dt IS NOT null or x.task_cp_dt is not NULL)
            -- 날짜 필터링: 과제 완료일 또는 마감일 기준
              AND (
                (x.task_cp_dt IS NOT NULL AND DATE(x.task_cp_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                OR
                (x.pd_evl_ed_dt IS NOT NULL AND DATE(x.pd_evl_ed_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                )
            GROUP BY y.mamoym_id
        ),

        -- 평가 참여도 계산 (평가당 하루 최대 1점)
        eval_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbook_id AS textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(DISTINCT CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DISTINCT DATE_FORMAT(COALESCE(y.eak_ed_dt, x.evl_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.evl_info x
                INNER JOIN aidt_lms.evl_result_info y ON x.id = y.evl_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = y.mamoym_id and tcmi.cla_id = x.cla_id and tcmi.actvtn_at = 'Y'
            WHERE 1=1
              AND x.textbook_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND (x.pd_evl_ed_dt IS NOT null or x.evl_cp_dt is not NULL)
            -- 날짜 필터링: 평가 완료일 또는 마감일 기준
              AND (
                (x.evl_cp_dt IS NOT NULL AND DATE(x.evl_cp_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                OR
                (x.pd_evl_ed_dt IS NOT NULL AND DATE(x.pd_evl_ed_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                )
            GROUP BY y.mamoym_id
        ),

        -- 스스로학습 참여도 계산
        self_study_participation AS (
            SELECT
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_std_info x_sub
                INNER JOIN aidt_lms.slf_std_result_info y_sub ON x_sub.id = y_sub.std_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi_sub on tcmi_sub.stdt_id = x_sub.stdt_id and tcmi_sub.cla_id = x_sub.cla_id and tcmi_sub.actvtn_at = 'Y'
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND x_sub.std_cd = 2 -- 선택학습만 대상
                AND DATE(y_sub.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_std_info x
                INNER JOIN aidt_lms.slf_std_result_info y ON x.id = y.std_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = x.stdt_id and tcmi.cla_id = x.cla_id and tcmi.actvtn_at = 'Y'
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND x.std_cd = 2 -- 선택학습만 대상
              AND DATE(y.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY x.stdt_id
        ),

        -- AI 학습 참여도 계산
        ai_study_participation AS (
            SELECT
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_ai_std_info x_sub
                INNER JOIN aidt_lms.slf_ai_std_result_info y_sub ON x_sub.id = y_sub.std_ai_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi_sub on tcmi_sub.stdt_id = x_sub.stdt_id and tcmi_sub.cla_id = x_sub.cla_id and tcmi_sub.actvtn_at = 'Y'
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND DATE(y_sub.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_ai_std_info x
                INNER JOIN aidt_lms.slf_ai_std_result_info y ON x.id = y.std_ai_id
                INNER JOIN aidt_lms.tc_cla_mb_info tcmi on tcmi.stdt_id = x.stdt_id and tcmi.cla_id = x.cla_id and tcmi.actvtn_at = 'Y'
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND DATE(y.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY x.stdt_id
        ),

        -- 전체 평균 참여도 계산 (모든 학생의 분자 합 / 모든 학생의 분모 합)
        total_avg_participation AS (
            SELECT
                -- 전체 분자 합 / 전체 분모 합 (전체 평균 참여도)
                ROUND(
                    CASE
                    WHEN SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                    THEN 0
                    ELSE SUM(COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                    SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                    END, 2
                ) AS avg_total_participation_percent
            FROM (
                    -- 모든 학생 ID 목록
                    SELECT stdt_id FROM class_participation where numerator <![CDATA[>]]> 0
                    UNION
                    SELECT stdt_id FROM task_participation where numerator <![CDATA[>]]> 0
                    UNION
                    SELECT stdt_id FROM eval_participation where numerator <![CDATA[>]]> 0
                    UNION
                    SELECT stdt_id FROM self_study_participation where numerator <![CDATA[>]]> 0
                    UNION
                    SELECT stdt_id FROM ai_study_participation where numerator <![CDATA[>]]> 0
                ) s
                LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
                LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
                LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
                LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
                LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
        ),

        -- 참여도 있는 학생들을 하나의 테이블로 통합
        students_participation AS (
            SELECT stdt_id, cla_id, textbk_id FROM class_participation WHERE numerator <![CDATA[>]]> 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM task_participation WHERE numerator <![CDATA[>]]> 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM eval_participation WHERE numerator <![CDATA[>]]> 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM self_study_participation WHERE numerator <![CDATA[>]]> 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM ai_study_participation WHERE numerator <![CDATA[>]]> 0
        ), max_std_dt as (
            select max(std_dt) as maxStdDt
            from aidt_lms.std_usd_total_hist a
            where 1=1
              AND a.textbk_id =  #{textbookId}
              AND a.cla_id = #{claId}
              AND a.std_dt BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
        ),

        -- 이해도 정보 계산 (참여도 있는 학생만)
        understanding_scores AS (
            SELECT
                sutd.stdt_id,
                MAX(u.flnm) AS flnm,
                MAX(tcmi.cla_id) AS cla_id,
                sutd.textbk_id,
                ROUND(AVG(sutd.usd_scr), 2) AS usd_scr,
                DATE_FORMAT(sutd.std_dt, '%Y%m%d') AS std_dt
            FROM
                aidt_lms.std_usd_total_hist sutd
                JOIN
                    aidt_lms.tc_cla_mb_info tcmi ON tcmi.stdt_id = sutd.stdt_id
                    AND tcmi.actvtn_at = 'Y'
                    AND sutd.cla_id = tcmi.cla_id
                LEFT JOIN
                    aidt_lms.user u ON u.user_id = sutd.stdt_id
                JOIN
                    students_participation p ON sutd.stdt_id = p.stdt_id  -- 참여도 있는 학생만 JOIN
            WHERE 1=1
              AND sutd.textbk_id = #{textbookId}
              AND tcmi.user_id = #{userId}
              AND tcmi.cla_id = #{claId}
              AND sutd.std_at = 'Y'
              AND (sutd.std_dt BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d') and sutd.std_dt  = (select maxStdDt FROM max_std_dt ))
            GROUP BY
                sutd.stdt_id
        ),

        -- 전체 평균 이해도 계산
        avg_understanding_score AS (
            SELECT
                ROUND(AVG(usd_scr), 2) AS avg_understanding
            FROM understanding_scores
        ),

        -- 학생별 참여도와 이해도 종합 테이블
        student_stats AS (
            SELECT
                s.stdt_id,
                u.flnm,
                s.cla_id,
                s.textbk_id,
                -- 참여도 정보
                ROUND(CASE
                WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                THEN 0
                ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                END, 2) AS participation_rate_percent,
                tap.avg_total_participation_percent AS avg_participation_percent,
                -- 이해도 정보
                u.usd_scr AS understanding_score,
                aus.avg_understanding AS avg_understanding_score
            FROM students_participation s
                LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
                LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
                LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
                LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
                LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
                LEFT JOIN understanding_scores u ON s.stdt_id = u.stdt_id
                CROSS JOIN total_avg_participation tap
                CROSS JOIN avg_understanding_score aus
        )
        -- 최종 결과: 학생들을 4분면으로 나누어 표시
        SELECT
            stdt_id,
            flnm,
            cla_id,
            textbk_id,
            ifnull(participation_rate_percent, 0) as participation_rate_percent, /* 학생 참여도 */
            ifnull(avg_participation_percent, 0) as avg_participation_percent, /* 학급 참여도 평균 */
            ifnull(understanding_score, 0) as understanding_score, /* 학생 이해도 */
            ifnull(avg_understanding_score, 0) as avg_understanding_score, /* 학급 이해도 평균 */
            ifnull(CASE
                WHEN IFNULL(understanding_score, 0) <![CDATA[<=]]> IFNULL(avg_understanding_score, 0) AND IFNULL(participation_rate_percent, 0) <![CDATA[<=]]> IFNULL(avg_participation_percent, 0) THEN 3    -- 제3사분면: 이해도 낮음, 참여도 낮음
                WHEN IFNULL(understanding_score, 0)  <![CDATA[>]]> IFNULL(avg_understanding_score, 0) AND IFNULL(participation_rate_percent, 0) <![CDATA[>]]> IFNULL(avg_participation_percent, 0) THEN 1  -- 제1사분면: 이해도 높음, 참여도 높음
                WHEN IFNULL(understanding_score, 0)  <![CDATA[>]]> IFNULL(avg_understanding_score, 0) AND IFNULL(participation_rate_percent, 0) <![CDATA[<=]]> IFNULL(avg_participation_percent, 0) THEN 2   -- 제2사분면: 이해도 높음, 참여도 낮음
                WHEN IFNULL(understanding_score, 0) <![CDATA[<=]]> IFNULL(avg_understanding_score, 0) AND IFNULL(participation_rate_percent, 0) <![CDATA[>]]> IFNULL(avg_participation_percent, 0) THEN 4   -- 제4사분면: 이해도 낮음, 참여도 높음
                ELSE NULL -- 분류 불가능한 경우
            END, '') AS quadrant /* 사분면 */
        FROM
            student_stats
        ORDER BY
            flnm;
    </select>

    <select id="selectTchDsbdUsdParticipationStudentQuadrant" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdUsdParticipationStudentQuadrant */
        -- 수업 참여도 계산
        WITH class_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(CASE WHEN d.sub_mit_anw IS NOT NULL OR d.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS numerator,
                (SELECT MAX(click_count) FROM (
                                                  SELECT
                                                      y_sub.mamoym_id,
                                                      COUNT(CASE WHEN d_sub.sub_mit_anw IS NOT NULL OR d_sub.sub_mit_anw_url IS NOT NULL THEN 1 ELSE NULL END) AS click_count
                                                  FROM aidt_lms.tab_info x_sub
                                                           INNER JOIN aidt_lms.std_dta_result_info y_sub ON x_sub.id = y_sub.textbk_tab_id
                                                           INNER JOIN aidt_lms.std_dta_result_detail d_sub ON y_sub.id = d_sub.dta_result_id
                                                  WHERE 1=1
                                                    AND x_sub.textbk_id = #{textbookId}
                                                    AND x_sub.cla_id = #{claId}
                                                -- 날짜 필터링: 제출일 기준
                                                    AND DATE(d_sub.eak_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY y_sub.mamoym_id
                ) max_clicks) AS denominator
            FROM aidt_lms.tab_info x
                INNER JOIN aidt_lms.std_dta_result_info y ON x.id = y.textbk_tab_id
                INNER JOIN aidt_lms.std_dta_result_detail d ON y.id = d.dta_result_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
            -- 날짜 필터링: 제출일 기준
              AND DATE(d.eak_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY y.mamoym_id
        ),

        -- 과제 참여도 계산 (과제당 하루 최대 1점)
        task_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(DISTINCT CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DISTINCT DATE_FORMAT(COALESCE(y.eak_ed_dt, x.task_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.task_info x
                INNER JOIN aidt_lms.task_result_info y ON x.id = y.task_id
            WHERE
                x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND (x.pd_evl_ed_dt IS NOT null or x.task_cp_dt is not NULL)
            -- 날짜 필터링: 과제 완료일 또는 마감일 기준
              AND (
                (x.task_cp_dt IS NOT NULL AND DATE(x.task_cp_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                OR
                (x.pd_evl_ed_dt IS NOT NULL AND DATE(x.pd_evl_ed_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                )
            GROUP BY y.mamoym_id
        ),

        -- 평가 참여도 계산 (평가당 하루 최대 1점)
        eval_participation AS (
            SELECT
                y.mamoym_id AS stdt_id,
                x.cla_id,
                x.textbook_id AS textbk_id,
                -- 제출한 날짜 수(하루 최대 1점)
                COUNT(DISTINCT CASE WHEN y.subm_at = 'Y' THEN DATE_FORMAT(y.eak_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                -- 마감일 기준 날짜 수
                COUNT(DISTINCT DATE_FORMAT(COALESCE(y.eak_ed_dt, x.evl_cp_dt, x.pd_evl_ed_dt), '%Y-%m-%d')) AS denominator
            FROM aidt_lms.evl_info x
                INNER JOIN aidt_lms.evl_result_info y ON x.id = y.evl_id
            WHERE 1=1
              AND x.textbook_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND (x.pd_evl_ed_dt IS NOT null or x.evl_cp_dt is not NULL)
            -- 날짜 필터링: 평가 완료일 또는 마감일 기준
              AND (
                (x.evl_cp_dt IS NOT NULL AND DATE(x.evl_cp_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                OR
                (x.pd_evl_ed_dt IS NOT NULL AND DATE(x.pd_evl_ed_dt) BETWEEN
                <choose>
                    <when test="previousStartDate != null and previousStartDate != ''">#{previousStartDate}</when>
                    <otherwise>#{startDate}</otherwise>
                </choose>
                AND
                <choose>
                    <when test="previousEndDate != null and previousEndDate != ''">#{previousEndDate}</when>
                    <otherwise>#{endDate}</otherwise>
                </choose>)
                )
            GROUP BY y.mamoym_id
        ),

        -- 스스로학습 참여도 계산
        self_study_participation AS (
            SELECT
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_std_info x_sub
                INNER JOIN aidt_lms.slf_std_result_info y_sub ON x_sub.id = y_sub.std_id
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND x_sub.std_cd = 2 -- 선택학습만 대상
                AND DATE(y_sub.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_std_info x
                INNER JOIN aidt_lms.slf_std_result_info y ON x.id = y.std_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND x.std_cd = 2 -- 선택학습만 대상
              AND DATE(y.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY x.stdt_id
        ),

        -- AI 학습 참여도 계산
        ai_study_participation AS (
            SELECT
                x.stdt_id AS stdt_id,
                x.cla_id,
                x.textbk_id,
                COUNT(DISTINCT CASE WHEN x.ed_at = 'Y' AND y.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS numerator,
                (SELECT MAX(completion_count) FROM (
                SELECT
                x_sub.stdt_id,
                COUNT(DISTINCT CASE when x_sub.ed_at = 'Y' AND y_sub.std_ed_dt IS NOT NULL THEN DATE_FORMAT(y_sub.std_ed_dt, '%Y-%m-%d') ELSE NULL END) AS completion_count
                FROM aidt_lms.slf_ai_std_info x_sub
                INNER JOIN aidt_lms.slf_ai_std_result_info y_sub ON x_sub.id = y_sub.std_ai_id
                WHERE 1=1
                AND x_sub.textbk_id = #{textbookId}
                AND x_sub.cla_id = #{claId}
                AND DATE(y_sub.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
                GROUP BY x_sub.stdt_id
                ) max_completions) AS denominator
            FROM aidt_lms.slf_ai_std_info x
                INNER JOIN aidt_lms.slf_ai_std_result_info y ON x.id = y.std_ai_id
            WHERE 1=1
              AND x.textbk_id = #{textbookId}
              AND x.cla_id = #{claId}
              AND DATE(y.std_ed_dt) BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
            GROUP BY x.stdt_id
        ),

        -- 전체 평균 참여도 계산 (모든 학생의 분자 합 / 모든 학생의 분모 합)
        total_avg_participation AS (
            SELECT
                -- 전체 분자 합 / 전체 분모 합 (전체 평균 참여도)
                ROUND(
                    CASE
                        WHEN SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                        THEN 0
                        ELSE SUM(COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                        SUM(COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                    END, 2
                ) AS avg_total_participation_percent
            FROM (
                -- 모든 학생 ID 목록
                SELECT stdt_id FROM class_participation where numerator > 0
                UNION
                SELECT stdt_id FROM task_participation where numerator > 0
                UNION
                SELECT stdt_id FROM eval_participation where numerator > 0
                UNION
                SELECT stdt_id FROM self_study_participation where numerator > 0
                UNION
                SELECT stdt_id FROM ai_study_participation where numerator > 0
                ) s
                LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
                LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
                LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
                LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
                LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
        ),

        -- 참여도 있는 학생들을 하나의 테이블로 통합
        students_participation AS (
            SELECT stdt_id, cla_id, textbk_id FROM class_participation WHERE numerator > 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM task_participation WHERE numerator > 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM eval_participation WHERE numerator > 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM self_study_participation WHERE numerator > 0
            UNION
            SELECT stdt_id, cla_id, textbk_id FROM ai_study_participation WHERE numerator > 0
        ),max_std_dt as (
        select max(std_dt) as maxStdDt
        from aidt_lms.std_usd_total_hist a
        where 1=1
          AND a.textbk_id =  #{textbookId}
          AND a.cla_id = #{claId}
          AND a.std_dt BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d')
        ),

        -- 이해도 정보 계산 (참여도 있는 학생만)
        understanding_scores AS (
            SELECT
                sutd.stdt_id,
                MAX(u.flnm) AS flnm,
                MAX(tcmi.cla_id) AS cla_id,
                sutd.textbk_id,
                ROUND(AVG(sutd.usd_scr), 2) AS usd_scr,
                DATE_FORMAT(sutd.std_dt, '%Y%m%d') AS std_dt
            FROM
                aidt_lms.std_usd_total_hist sutd
                JOIN
                aidt_lms.tc_cla_mb_info tcmi ON tcmi.stdt_id = sutd.stdt_id
                AND tcmi.actvtn_at = 'Y'
                AND sutd.cla_id = tcmi.cla_id
                LEFT JOIN
                aidt_lms.user u ON u.user_id = sutd.stdt_id
                JOIN
                students_participation p ON sutd.stdt_id = p.stdt_id  -- 참여도 있는 학생만 JOIN
            WHERE 1=1
              AND sutd.textbk_id = #{textbookId}
              AND tcmi.user_id = #{userId}
              AND tcmi.cla_id = #{claId}
              AND sutd.std_at = 'Y'
              AND (sutd.std_dt BETWEEN STR_TO_DATE(#{startDate}, '%Y%m%d') AND STR_TO_DATE(#{endDate}, '%Y%m%d') and sutd.std_dt  = (select maxStdDt FROM max_std_dt ))
            GROUP BY
            sutd.stdt_id
        ),



        -- 전체 평균 이해도 계산
        avg_understanding_score AS (
        SELECT
            ROUND(AVG(usd_scr), 2) AS avg_understanding
        FROM understanding_scores
        ),

        -- 학생별 참여도와 이해도 종합 테이블
        student_stats AS (
            SELECT
                s.stdt_id,
                u.flnm,
                s.cla_id,
                s.textbk_id,
                -- 참여도 정보
                ROUND(CASE
                WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                THEN 0
                ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                END, 2) AS participation_rate_percent,
                -- 참여도 평균
                tap.avg_total_participation_percent AS avg_participation_percent,
                -- 이해도 정보
                u.usd_scr AS understanding_score,
                -- 이해도 평균
                aus.avg_understanding AS avg_understanding_score,
                -- 사분면 계산
                CASE
                    WHEN u.usd_scr <![CDATA[>=]]> aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                        END, 2) <![CDATA[>=]]>  tap.avg_total_participation_percent
                    THEN 1  -- 제1사분면: 이해도 높음, 참여도 높음

                    WHEN u.usd_scr <![CDATA[>=]]> aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                        END, 2) <![CDATA[<]]>  tap.avg_total_participation_percent
                    THEN 2   -- 제2사분면: 이해도 높음, 참여도 낮음

                    WHEN u.usd_scr <![CDATA[<]]>  aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                        END, 2) <![CDATA[<]]>  tap.avg_total_participation_percent
                    THEN 3    -- 제3사분면: 이해도 낮음, 참여도 낮음

                    WHEN u.usd_scr <![CDATA[<]]>  aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                        END, 2) <![CDATA[>=]]>  tap.avg_total_participation_percent
                    THEN 4   -- 제4사분면: 이해도 낮음, 참여도 높음
                    ELSE NULL -- 분류 불가능한 경우
                END AS quadrant,

                CASE
                    WHEN u.usd_scr <![CDATA[>=]]> aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                        END, 2) <![CDATA[>=]]>  tap.avg_total_participation_percent
                    THEN '우수 그룹'  -- 제1사분면: 이해도 높음, 참여도 높음

                    WHEN u.usd_scr <![CDATA[>=]]> aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                            END, 2) <![CDATA[<]]>  tap.avg_total_participation_percent
                    THEN '잠재력 있는 그룹'   -- 제2사분면: 이해도 높음, 참여도 낮음

                    WHEN u.usd_scr <![CDATA[<]]>  aus.avg_understanding AND
                        ROUND(CASE
                        WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                            END, 2) <![CDATA[<]]>  tap.avg_total_participation_percent
                    THEN '지원이 필요한 그룹'    -- 제3사분면: 이해도 낮음, 참여도 낮음

                    WHEN u.usd_scr <![CDATA[<]]>  aus.avg_understanding AND
                        ROUND(CASE
                            WHEN (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) = 0
                            THEN 0
                            ELSE (COALESCE(c.numerator, 0) + COALESCE(t.numerator, 0) + COALESCE(e.numerator, 0) + COALESCE(ss.numerator, 0) + COALESCE(ai.numerator, 0)) /
                                (COALESCE(c.denominator, 0) + COALESCE(t.denominator, 0) + COALESCE(e.denominator, 0) + COALESCE(ss.denominator, 0) + COALESCE(ai.denominator, 0)) * 100
                            END, 2) <![CDATA[>=]]>  tap.avg_total_participation_percent
                        THEN '노력형 그룹'   -- 제4사분면: 이해도 낮음, 참여도 높음
                    ELSE NULL -- 분류 불가능한 경우
                END AS quadrant_description
            FROM students_participation s
            LEFT JOIN class_participation c ON s.stdt_id = c.stdt_id
            LEFT JOIN task_participation t ON s.stdt_id = t.stdt_id
            LEFT JOIN eval_participation e ON s.stdt_id = e.stdt_id
            LEFT JOIN self_study_participation ss ON s.stdt_id = ss.stdt_id
            LEFT JOIN ai_study_participation ai ON s.stdt_id = ai.stdt_id
            LEFT JOIN understanding_scores u ON s.stdt_id = u.stdt_id
            CROSS JOIN total_avg_participation tap
            CROSS JOIN avg_understanding_score aus
        )
        -- 최종 결과: 선택한 사분면의 학생만 조회
        SELECT
            stdt_id,
            flnm,
            cla_id,
            textbk_id,
            ifnull(participation_rate_percent, 0) as participation_rate_percent, /* 학생 참여도 */
            ifnull(avg_participation_percent, 0) as avg_participation_percent, /* 학급 참여도 평균 */
            ifnull(understanding_score, 0) as understanding_score, /* 학생 이해도 */
            ifnull(avg_understanding_score, 0) as avg_understanding_score, /* 학급 이해도 평균 */
            ifnull(quadrant, '') as quadrant, /*사분면*/
            ifnull(quadrant_description, '') as quadrant_description /* 사분면 그룹 */
        FROM
            student_stats
        WHERE quadrant = #{quadrant}
        ORDER BY
            flnm;
    </select>

    <insert id="insertTchEncouragementNotification" parameterType="map">
        /* TchDsbdMapper.insertTchEncouragementNotification */
        INSERT INTO aidt_lms.ntcn_info (
            textbk_id, cla_id, trget_cd, ntcn_ty_cd, trget_ty_cd, trget_id, rcve_id,
            ntcn_cn, ntcn_idnty_at, redng_at, encrg_at, rgtr, reg_dt, mdfr, mdfy_dt
        )
        VALUES
            (
                #{textbookId},
                #{claId},
                'T',
                3,
                #{trgetTyCd},
                0,
                #{userId},
                #{tchNtcnCn},
                'N',
                'N',
                'Y',
                #{userId},
                NOW(),
                #{userId},
                NOW()
            )
    </insert>

    <insert id="insertStntEncouragementNotification" parameterType="map">
        /* TchDsbdMapper.insertStntEncouragementNotification */
        INSERT INTO ntcn_info (
        textbk_id, cla_id, trget_cd, ntcn_ty_cd, trget_ty_cd, trget_id, rcve_id,
        ntcn_cn, ntcn_idnty_at, redng_at, encrg_at, stnt_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        VALUES
            (
            #{textbookId},
            #{claId},
            'S',
            3,
            #{trgetTyCd},
            0,
            #{stdtId},
            #{stntNtcnCn},
            'N',
            'N',
            'Y',
            #{flnm},
            #{userId},
            NOW(),
            #{userId},
            NOW()
            )
    </insert>


    <select id="findTchDsbdConceptUsdTree" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.findTchDsbdConceptUsdTree */
        SELECT
            T.meta_id,
            T.unit_num,
            T.unit_nm,
            T.kwg_main_id,
            T.kwgNm,
            IFNULL(combined_data.std_at, 'N') AS std_at,
            ROUND(IFNULL(combined_data.usd_scr, 0)) AS usd_scr,
            T.depth - 1 AS depth,
            T.code
        FROM (
            SELECT
                X.id AS meta_id,
                DENSE_RANK() OVER (ORDER BY X.id) AS unit_num,
                X.unit_nm,
                Y.id AS kwg_main_id,
                Y.val AS kwgNm,
                Y.depth,
                Y.code,
                ROW_NUMBER() OVER (ORDER BY Y.id) AS rowNo
            FROM
            (
                SELECT
                    b.id,
                    b.parent_id,
                    b.code,
                    b.val AS unit_nm,
                    b.depth
                FROM
                    aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta b ON a.code = b.description
                    AND b.is_active = 1
                    AND b.name = 'studyMap1'
                INNER JOIN aidt_lcms.meta c
                    ON c.id = b.parent_id
                    AND c.is_active = 1
                WHERE
                    a.parent_id = (
                        SELECT curriBook FROM aidt_lcms.textbook WHERE id = #{textbookId}
                    )
                AND a.is_active = 1
                <if test="metaId != null and metaId != ''" >
                    AND b.id = #{metaId}
                </if>
            ) X
            INNER JOIN aidt_lcms.meta Y ON Y.code LIKE CONCAT(X.code, '-%')
                AND Y.name IN ('studyMap2','studyMap3','studyMap_1')
                AND Y.is_active = 1
            WHERE 1=1
            ORDER BY
                Y.parent_id,
                Y.code
        ) T
        LEFT JOIN (
                    SELECT
                        Y.kwg_main_id,
                        Z.meta_id,
                        Z.std_at,
                        Z.usd_scr
                    FROM (
                        SELECT DISTINCT meta_id AS kwg_main_id
                        FROM (
                            /* 학습자료 */
                            SELECT amm.meta_id
                            FROM aidt_lms.tab_info ti
                            INNER JOIN aidt_lms.std_dta_result_info sdri ON ti.id = sdri.textbk_tab_id
                            INNER JOIN aidt_lms.std_dta_result_detail sdrd ON sdri.id = sdrd.dta_result_id
                                AND sdrd.eak_at = 'Y' /* 응시 여부 */
                                AND sdrd.mrk_ty <![CDATA[<>]]> 3 /* 채점 불가 항목(3) 제외 */
                            INNER JOIN aidt_lcms.article_meta_map amm ON amm.article_id = sdrd.dta_iem_id
                                AND amm.sub_id = sdrd.sub_id
                                AND amm.meta_name = 'studyMap_1'
                            WHERE ti.cla_id = #{claId}
                            AND ti.textbk_id = #{textbookId}

                            UNION

                            /* 평가 */
                            SELECT amm.meta_id
                            FROM aidt_lms.evl_info ei
                            JOIN aidt_lms.evl_result_info eri ON ei.id = eri.evl_id
                                AND ei.evl_stts_cd = 5 /* 채점완료 */
                                AND eri.mrk_cp_at = 'Y' /* 채점 완료 여부 */
                                AND ei.rpt_othbc_at = 'Y'
                            JOIN aidt_lms.evl_result_detail erd ON eri.id = erd.evl_result_id
                                AND erd.eak_at = 'Y' /* 응시 여부 */
                                AND erd.mrk_ty <![CDATA[<>]]> 3 /* 채점 불가 항목(3) 제외 */
                            INNER JOIN aidt_lcms.article_meta_map amm ON amm.article_id = erd.evl_iem_id
                                AND amm.sub_id = erd.sub_id
                                AND amm.meta_name = 'studyMap_1'
                            WHERE ei.cla_id = #{claId}
                            AND ei.textbook_id = #{textbookId}

                            UNION

                            /* 과제 */
                            SELECT amm.meta_id
                            FROM aidt_lms.task_info ti
                            JOIN aidt_lms.task_result_info tri ON ti.id = tri.task_id
                                AND ti.task_stts_cd = 5
                                AND tri.subm_at = 'Y' /* 제출 여부 */
                                AND ti.rpt_othbc_at = 'Y'
                            JOIN aidt_lms.task_result_detail trd ON tri.id = trd.task_result_id
                                AND trd.eak_at = 'Y' /* 응시 여부 */
                                AND trd.mrk_ty <![CDATA[<>]]> 3 /* 채점 불가 항목(3) 제외 */
                                AND trd.mrk_cp_at = 'Y' /* 채점 완료 여부 */
                            INNER JOIN aidt_lcms.article_meta_map amm ON amm.article_id = trd.task_iem_id
                                AND amm.sub_id = trd.sub_id
                                AND amm.meta_name = 'studyMap_1'
                            WHERE ti.cla_id = #{claId}
                            AND ti.textbk_id = #{textbookId}

                            UNION

                            /* 자기주도학습 (선택학습/AI학습) */
                            SELECT amm.meta_id
                            FROM aidt_lms.slf_std_info ssi
                            JOIN aidt_lms.slf_std_result_info ssri ON ssi.id = ssri.std_id
                                AND ssi.ed_at = 'Y'
                            INNER JOIN aidt_lcms.article_meta_map amm ON amm.article_id = ssri.module_id
                                AND amm.sub_id = ssri.sub_id
                                AND amm.meta_name = 'studyMap_1'
                            WHERE ssi.cla_id = #{claId}
                            AND ssi.textbk_id = #{textbookId}
                        ) X
                    ) Y
                    INNER JOIN (
                        SELECT
                            a.meta_id,
                            a.kwg_main_id,
                            IF(COUNT(1) > 0, 'Y', 'N') AS std_at,
                            IFNULL(ROUND(AVG(a.usd_scr), 2), 0) AS usd_scr
                        FROM aidt_lms.std_usd_info a
                        JOIN aidt_lms.tc_cla_mb_info cm
                          ON cm.cla_id = a.cla_id
                         AND cm.stdt_id = a.stdt_id
                         AND cm.actvtn_at = 'Y'
                        WHERE a.cla_id = #{claId}
                        AND a.textbk_id = #{textbookId}
                        AND a.std_at = 'Y'
                        <if test="stdtId != null and stdtId != ''" >
                            AND a.stdt_id = #{stdtId}
                        </if>
                        GROUP BY a.meta_id, a.kwg_main_id
                    ) Z ON Z.kwg_main_id = Y.kwg_main_id
        ) combined_data ON combined_data.meta_id = T.meta_id
                           AND combined_data.kwg_main_id = T.kwg_main_id
        where 1=1
        <if test="textbookId == '6993'" >
            and T.kwg_main_id NOT IN (45845, 45850, 45861,45871,45879,45885,45894,45900,45908,45983)
        </if>
        <if test="textbookId == '1342'">
            /* 공통수학2 도형의 방정식 - 평행이동을 이용한 활용, 대칭이동을 이용한 활용 학습맵 제외 */
            and T.kwg_main_id not in (
            25908, 25914
            )
        </if>
        <if test="textbookId == '1152'">
            /* 중등수학1 ( 문자와 식 - 일차식의 덧셈의 원리, 일차식의 뺄셈의 원리 ) ( 좌표평면과 그래프 - 다양한 상황에 대한 그래프의 표현 ) ( 기본도형 - 작도 ) ( 통계 - 통계적 탐구 문제 설정, 공학 도구를 이용한 자료의 정리 및 해석 ) 학습맵 제외 */
            and T.kwg_main_id not in (
            945, 41914, 959, 983, 41932, 1026
            )
        </if>
    </select>

    <select id="findMetaInfoList" parameterType="map" resultType="map">
        SELECT
            id,
            val
        FROM aidt_lcms.meta
        WHERE id IN
        <foreach collection="idsList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- [교사] 학급관리 > 홈 대시보드 > 학습맵 > 성취 기준별 학생 점수 조회(수학) -->
    <select id="selectTchDsbdStdMapMathStudentScores" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdStdMapMathStudentScores */
        WITH student_list AS (
            SELECT a.stdt_id, b.flnm
            FROM aidt_lms.tc_cla_mb_info a
            INNER JOIN aidt_lms.stdt_reg_info b ON a.stdt_id = b.user_id
            WHERE a.cla_id = #{claId}
            and a.actvtn_at = 'Y'
        ),
        student_scores AS (
            SELECT
                a.meta_id,
                a.stdt_id,
                a.kwg_main_id,
                IFNULL(round(a.usd_scr, 0), '-') as usd_scr
            FROM aidt_lms.std_usd_info a
            WHERE 1=1
              AND a.textbk_id = #{textbookId}
              AND a.cla_id = #{claId}
        ),
        achievement_standards AS (
            WITH RECURSIVE curriculum AS (
                SELECT
                    b.id,
                    b.parent_id,
                    b.`code`,
                    b.name,
                    b.val,
                    CAST(b.id AS CHAR(1000) CHARACTER SET utf8) AS pk_path,
                    CAST(b.`code` AS CHAR(1000) CHARACTER SET utf8) AS id_path,
                    (b.depth -1) AS depth,
                    b.meta_extension_id
                FROM aidt_lcms.meta a
                INNER JOIN aidt_lcms.meta b
                    ON a.`code` = b.description
                    AND b.is_active = 1
                    AND b.name = 'studyMap1'
                INNER JOIN aidt_lcms.meta c
                    ON c.id = b.parent_id
                    AND c.is_active = 1
                WHERE 1=1
                    AND a.parent_id = (
                        SELECT curriBook FROM aidt_lcms.textbook WHERE id = #{textbookId}
                    )
                    AND a.is_active = 1
                    <if test="metaId > 0">
                    AND b.id = #{metaId}
                    </if>

                UNION ALL
                SELECT
                    b.id,
                    b.parent_id,
                    b.`code`,
                    b.name,
                    b.val,
                    CONCAT(c.pk_path, ',', b.id) AS pk_path,
                    CONCAT(c.id_path, ' > ', b.`code`) AS id_path,
                    1 + c.depth AS depth,
                    b.meta_extension_id
                FROM aidt_lcms.meta b
                INNER JOIN curriculum c
                    ON c.id = b.parent_id
                    AND b.is_active = 1
                WHERE b.name <![CDATA[ <> ]]> 'studyMap_2'
            )
            SELECT
                me.val4 AS achStdCd,
                CAST(SUBSTRING_INDEX(cc.pk_path,',',1) AS UNSIGNED) AS meta_id,
                cc.id AS kwg_main_id,
                cc.val AS kwg_main_nm
            FROM curriculum cc
            LEFT JOIN aidt_lcms.meta_extension me
                ON cc.meta_extension_id = me.meta_extension_id
            WHERE 1=1
                AND cc.meta_extension_id IS NOT NULL
            ORDER BY cc.id_path
        )
        SELECT
            a.meta_id,
            a.achStdCd,
            sl.stdt_id,
            sl.flnm,
            COALESCE(ROUND(AVG(s.usd_scr), 2),'-') AS avgUsdScr
        FROM achievement_standards a
        CROSS JOIN student_list sl
        LEFT JOIN student_scores s
            ON sl.stdt_id = s.stdt_id
            AND a.meta_id = s.meta_id
            AND a.kwg_main_id = s.kwg_main_id
        GROUP BY a.achStdCd, sl.stdt_id, a.meta_id
        ORDER BY sl.stdt_id, a.achStdCd, a.meta_id;
    </select>

    <select id="selectTchDsbdLastLesson" parameterType="map" resultType="camelHashMap">
        /* TchDsbdMapper.selectTchDsbdLastLesson */
        select
            d.id as metaId
        from
            aidt_lms.tc_cla_mb_info a
                inner join aidt_lms.tc_lastlesson b
                           on a.user_id = b.wrter_id
                               and a.cla_id = b.cla_id and b.textbk_id = #{textbookId}
                inner join aidt_lcms.textbookcurriculum_meta_map c
                           on b.textbk_idx_id = c.textbookIndex_id
                               and b.crcul_id = c.`key`
                               and c.meta_name = 'studyMap1'
                inner join aidt_lcms.meta d
                           on c.meta_id = d.id
        where
            1=1
            <if test="stdtId != null and stdtId != '' ">
                and a.stdt_id = #{stdtId}
            </if>
          and a.cla_id  = #{claId}
          and a.actvtn_at = 'Y'
        limit 1
    </select>

    <select id="selectBbsCalendarInfo" resultType="camelHashMap">
        /* TchDsbdMapper.selectBbsCalendarInfo */
        select
            '4' as trgt_se_cd,      /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 게시물 과제) */
            cb.ntt_id as id,
            cb.ntt_id as usd_tg_id,
            cb.ntt_sj as name,
            date_format(cb.ntce_bgnde, "%Y-%m-%d") as stdt,
            date_format(cb.ntce_endde, "%Y-%m-%d") as eddt,
            date_format(cb.reg_dt, "%Y-%m-%d") as reg_dt,
            (CASE
                WHEN cb.progress_at = 'Y' AND now() BETWEEN cb.ntce_bgnde AND cb.ntce_endde
                    THEN '2'
                WHEN cb.progress_at = 'Y'  AND now()  <![CDATA[<]]>  cb.ntce_bgnde
                    THEN '1'
                WHEN cb.progress_at = 'Y' AND now()  <![CDATA[>]]>  cb.ntce_endde
                    THEN '3'
                ELSE '3'
            END) as sttsCd,
            aidt_lms.F_CODE_NM('task_stts_cd',
                (CASE
                    WHEN cb.progress_at = 'Y' AND now() BETWEEN cb.ntce_bgnde AND cb.ntce_endde
                        THEN '2'
                    WHEN cb.progress_at = 'Y'  AND now()  <![CDATA[<]]>  cb.ntce_bgnde
                        THEN '1'
                    WHEN cb.progress_at = 'Y' AND now()  <![CDATA[>]]>  cb.ntce_endde
                        THEN '3'
                    ELSE '3'
                END)
            ) as sttsName,
            <if test="stntId != null and stntId != '' ">
                (select subm_at from aidt_lms.cla_bbs_stnt a where a.ntt_id = cb.ntt_id and a.mamoym_id = #{stntId}) as subm_at,
            </if>
            coalesce((select count(1) from aidt_lms.cla_bbs_stnt cbs1
                      where cbs1.ntt_id = cb.ntt_id group by cbs1.ntt_id), 0) as target_cnt,
            coalesce((select count(1) from aidt_lms.cla_bbs_stnt cbs2
                      where cbs2.ntt_id = cb.ntt_id and cbs2.subm_at = 'Y'
                      group by cbs2.ntt_id), 0) as submit_cnt
        from aidt_lms.cla_bbsmaster cbm
            join aidt_lms.cla_bbs cb
                on cbm.bbs_id = cb.bbs_id
        where cbm.cla_id = #{claId}
          and cbm.textbk_id = #{textbookId}
          and cb.ntt_id = #{trgtId}
          and cb.ntce_bgnde is not null
          and cb.ntce_endde is not null
    </select>

</mapper>