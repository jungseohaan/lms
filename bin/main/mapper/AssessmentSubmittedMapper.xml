<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.mq.mapper.bulk.AssessmentSubmittedMapper">

    <insert id="insertEvlMqTrnLog">
        /*insertEvlMqTrnLog 공개한 평가지 등록*/
        INSERT INTO aidt_lms.evl_mq_trn_log (
            evl_id
        )
        VALUES (
            #{evlId}
        )
    </insert>

    <update id="modifyAssessmentScore">
        /*modifyAssessmentScore 선생) 평가 공개 후 점수 수정*/
        update aidt_lms.evl_mq_trn_log
        set md_rflt_at = 'Y' /*수정 여부*/
            , trn_at = 'N' /*전송 여부*/
            , mdfy_dt = now()
        where evl_id = #{evlId}
    </update>

    <select id="findCompletedAssessmentsStudents" parameterType="com.visang.aidt.lms.api.mq.dto.real.RealMqReqDto" resultType="com.visang.aidt.lms.api.mq.dto.assessment.CompletedAssessments">
        /*findCompletedAssessmentsStudents 평가를 완료한 학생 목록 조회*/
        SELECT
            eri.id          as evlResultId,
            eri.evl_id      as evlId,
            eri.mamoym_id   as mamoymId
        FROM aidt_lms.evl_result_info eri
                 inner join aidt_lms.evl_info ei
                            on eri.evl_id = ei.id
                 inner join aidt_lms.evl_mq_trn_log emtl
                            on emtl.evl_id = ei.id
        WHERE 1=1
          /* 미 제출자는 MQ 전달 X, 하지만 교사가 점수를 수정한 경우 전달 O */
          and subm_at = 'Y'
          and eak_ed_dt is not null
          and ei.rpt_othbc_at = 'Y' /* 리포드 공개 여부 */
          and ei.evl_se_cd is not null
          <choose>
              <when test="userId != null and userId != ''">
                and eri.mamoym_id = #{userId}
              </when>
              <otherwise>
                and emtl.trn_at = 'N' /* 전송여부 */
              </otherwise>
          </choose>
        group by eri.mamoym_id
    </select>

    <select id="findAssessmentSheets" parameterType="map" resultType="com.visang.aidt.lms.api.mq.dto.assessment.AssessmentInfo">
        /*findAssessmentSheets 학생이 진행한 평가지 목록 조회*/
        SELECT
            eri.sets_id as setsId,
            CASE
                WHEN ei.evl_se_cd = 1 THEN 'D'
                WHEN ei.evl_se_cd = 2 THEN 'F'
                WHEN ei.evl_se_cd = 3 THEN 'S'
                WHEN ei.evl_se_cd = 4 THEN 'E'
                ELSE 'empty'
                END AS `type`,
            FALSE AS aitutorRecommended,
            if(eri.evl_result_scr is null, 0, eri.evl_result_scr) as score,
            if(eri.eak_ed_dt is null, now(), eri.eak_ed_dt) as `timestamp`,
            NULL AS assessmentDetailList,
            NULL AS curriculumStandardList,
            NULL AS userId,
            eri.evl_id as evlId,
            eri.id as evlResultId
        FROM aidt_lms.evl_result_info eri
                 inner join aidt_lms.evl_info ei
                            on eri.evl_id = ei.id
                 inner join aidt_lms.evl_mq_trn_log emtl
                            on emtl.evl_id = ei.id
        WHERE 1=1
          and ei.rpt_othbc_at = 'Y' /* 리포드 공개 여부 */
          <if test="userId == null or userId == ''">
          and emtl.trn_at = 'N' /* 전송여부 */
          </if>
          and ei.evl_se_cd is not null
          and eri.mamoym_id = #{stntId}
    </select>

    <select id="findCurriculumFormativeAssessment" resultType="map">
    /*findCurriculumScores 학생이 진행한 형성평가 커리큘럼Id 목록 조회*/
        SELECT c.val1 AS curriculumStr,
               round(coalesce((count(CASE WHEN erd.errata = 1 THEN 1 END) / count(1))*100,0)) AS percent
        FROM
            aidt_lms.evl_result_detail erd
                INNER JOIN aidt_lcms.article_meta_map amm ON erd.evl_iem_id = amm.article_id
                INNER JOIN aidt_lcms.meta b ON amm.meta_id = b.id
                INNER JOIN aidt_lcms.meta_extension c ON b.meta_extension_id = c.meta_extension_id
                INNER JOIN aidt_lms.evl_result_info eri ON erd.evl_result_id = eri.id
                INNER JOIN aidt_lcms.setsummary ss ON eri.sets_id = ss.set_id AND erd.evl_iem_id = ss.article_id
                INNER JOIN aidt_lms.evl_info ei ON ei.id = eri.evl_id
        WHERE 1=1
          AND erd.errata IS NOT NULL
          AND eri.mamoym_id = #{mamoymId}
          AND amm.meta_name = 'studyMap_1'
          AND ei.evl_se_cd = 2 /*1: 진단평가, 2: 형성평가, 3: 총괄평가, 4: 수행평가*/
        GROUP BY c.val1
    </select>

    <select id="findStdtEvalResultsDetail" resultType="com.visang.aidt.lms.api.mq.dto.assessment.AssessmentDetail">
    /**findStdtEvalResultsDetail*/
        SELECT
            eri.sets_id as setsId,
            erd.evl_iem_id AS id,
            'M' AS type, /*문항 유형은 정의된게 없음*/
            case b.meta_id
                when '52' then 1
                when '53' then 2
                when '54' then 3
                when '55' then 4
                when '56' then 5
                when '759' then 1
                when '760' then 2
                when '761' then 3
                else -1
            end as difficulty,
            1 AS difficultyMin,
            case e.id
               when '8' then 5
               when '355' then 3
               else -1
            end as difficultyMax,
            NULL AS curriculumStandardId,
            (SELECT c.val1
             FROM
                 aidt_lcms.article_meta_map a
                     INNER JOIN aidt_lcms.meta b on a.meta_id = b.id
                     INNER JOIN aidt_lcms.meta_extension c on b.meta_extension_id = c.meta_extension_id
             WHERE a.article_id = erd.evl_iem_id AND a.meta_name = 'studyMap_1' limit 1) AS curriculumStandardIdString,
            FALSE AS common,
            FALSE AS aitutorRecommended,
            CASE
                WHEN erd.sub_mit_anw IS NOT NULL AND erd.sub_mit_anw != '' THEN TRUE
                ELSE FALSE
                END AS completion,
            IFNULL(ROUND(erd.evl_iem_scr_result / eii.evl_iem_scr, 2), 0) AS success,
            IF(eri.subm_at = 'N', 0, IFNULL(ROUND(AVG(TIMESTAMPDIFF(SECOND, erd.eak_st_dt, erd.eak_ed_dt)), 0), 0)) AS duration,
            if(erd.re_idf_cnt is null, 0, erd.re_idf_cnt) as attempt
        FROM
            aidt_lms.evl_result_detail erd
                INNER JOIN aidt_lms.evl_result_info eri ON eri.id = erd.evl_result_id
                INNER JOIN aidt_lms.evl_iem_info eii ON eii.evl_iem_id = erd.evl_iem_id
                INNER JOIN aidt_lcms.article a ON a.id = erd.evl_iem_id
                INNER JOIN aidt_lcms.setsummary ss ON ss.article_id = erd.evl_iem_id
                LEFT OUTER JOIN aidt_lcms.article_meta_map b ON erd.evl_iem_id = b.article_id AND b.meta_name = 'difficulty'
                LEFT OUTER JOIN aidt_lcms.meta c ON b.meta_id = c.id
                LEFT OUTER JOIN aidt_lcms.article_meta_map d ON erd.evl_iem_id = d.article_id AND d.meta_name = 'curriSubject'
                LEFT OUTER JOIN aidt_lcms.meta e ON d.meta_id = e.id
        WHERE 1=1
          AND erd.evl_result_id = #{evlResultId}
        AND eii.evl_id = #{evlId}
        /*  AND a.creator_ty = 1 */ /* 비상에서 생성한 콘텐츠 */
        GROUP BY erd.id
    </select>

    <select id="findcurriSchoolByEvlId" resultType="String">
        SELECT m2.code AS curriSchool
        FROM aidt_lms.evl_info ei
                 LEFT JOIN aidt_lcms.textbook tb ON ei.textbook_id  = tb.id
                 LEFT JOIN (
            SELECT t.id
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriYear' THEN tmp.meta_id_b END) AS curriYear
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSchool' THEN tmp.meta_id_b END) AS curriSchool
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSubject' THEN tmp.meta_id_b END) AS curriSubject
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriGrade' THEN tmp.meta_id_b END) AS curriGrade
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSemester' THEN tmp.meta_id_b END) AS curriSemester
            FROM aidt_lcms.textbook t
                     LEFT JOIN (
                SELECT m.id, m.name, mmm.meta_id_a, mmm.meta_id_b, mmm.meta_name_b
                FROM aidt_lcms.meta_meta_map mmm
                         INNER JOIN aidt_lcms.meta m ON mmm.meta_id_a = m.id
            ) tmp on t.curriBook  = tmp.meta_id_a
            group by t.id
        ) t2 on tb.id = t2.id
                 LEFT JOIN aidt_lcms.meta m2 ON t2.curriSchool = m2.id
        where ei.id = #{evlId}
        ORDER BY ei.id desc
    </select>

    <select id="getUserInfo" resultType="camelHashMap" parameterType="String">
        select
            COALESCE(ptn_id, '') AS ptn_id
        from aidt_lms.user
        where user_id = #{userId}
    </select>

    <update id="updateEvlMqTrnAt">
        update aidt_lms.evl_mq_trn_log
        set trn_at = 'Y', /* 메세지큐 전송 여부 */
            trn_dt = now()
        where trn_at = 'N'
    </update>

</mapper>