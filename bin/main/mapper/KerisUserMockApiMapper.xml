<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.keris.mapper.KerisUserMockApiMapper">
    <select id="getStdtName" parameterType="java.util.Map" resultType="java.util.Map">
        select user_id, flnm as user_name
        from aidt_lms.stdt_reg_info
        where user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>
    <select id="getStdtSchoolName" parameterType="java.util.Map" resultType="java.util.Map">
        select user_id, schl_nm as school_name
        from aidt_lms.stdt_reg_info
        where user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>
    <select id="getStdtSchoolId" parameterType="java.util.Map" resultType="java.util.Map">
        select user_id, schl_id as school_id
        from aidt_lms.stdt_reg_info
        where user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>

    <select id="getStdtAll" parameterType="java.util.Map" resultType="java.util.Map">
        select a.user_id
             , a.flnm as user_name
             , a.schl_nm as school_name
             , a.schl_id as school_id
             , b.schl_ty_cd as user_division
             , a.grade_cd AS user_grade
             , tcmi.cla_nm AS user_class
             , CASE
                   WHEN tcmi.cla_nm LIKE '%반' THEN tcmi.cla_nm
                   WHEN tcmi.cla_nm IS NULL THEN '-'
                   ELSE CONCAT(tcmi.cla_nm, '반') END AS user_class
             , a.num AS user_number
             , if(c.sex = 'M','1', if(c.sex = 'W', '2', '')) as user_gender
        from aidt_lms.stdt_reg_info a
                 left join aidt_lms.school b on b.id = a.schl_id
                 left join aidt_lms.user c on c.user_id = a.user_id
                 inner join aidt_lms.tc_cla_mb_info tcmi ON a.user_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
        where a.user_id = #{user_id}
    </select>

    <select id="getTcName" parameterType="java.util.Map" resultType="java.util.Map">
        select user_id, flnm as user_name
        from aidt_lms.tc_reg_info
        where user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>
    <select id="getTcSchoolName" parameterType="java.util.Map" resultType="java.util.Map">
        select user_id, schl_nm as school_name
        from aidt_lms.tc_reg_info
        where user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>
    <select id="getTcSchoolId" parameterType="java.util.Map" resultType="java.util.Map">
        select a.user_id, b.id as school_id
        from aidt_lms.tc_reg_info a
        inner join aidt_lms.school b on a.schl_cd = b.schl_cd
        where a.user_id in (<foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>)
    </select>

    <select id="getTcAll" parameterType="java.util.Map" resultType="java.util.Map">
        select a.user_id
             , a.flnm as user_name
             , a.schl_nm as school_name
             , a.id as school_id
             , b.schl_ty_cd as user_division
        from aidt_lms.tc_reg_info a
                 left join aidt_lms.school b on a.schl_cd = b.schl_cd
        where a.user_id = #{user_id}
    </select>




    <select id="getStduentDivision" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getStduentDivision */
        SELECT SRI.user_id, S.SCHL_TY_CD AS user_division
        FROM AIDT_LMS.STDT_REG_INFO SRI
        INNER JOIN AIDT_LMS.SCHOOL S ON SRI.SCHL_ID = S.ID
        <if test="user_id != NULL and user_id != ''">
            WHERE SRI.USER_ID = #{user_id}
        </if>
        <if test="user_id == NULL or user_id == ''">
            WHERE SRI.USER_ID IN (
            <foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>
            )
        </if>
    </select>

    <select id="getStduentGrade" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getStduentGrade */
        SELECT user_id, GRADE_CD AS user_grade
        FROM AIDT_LMS.STDT_REG_INFO
        <if test="user_id != NULL and user_id != ''">
            WHERE USER_ID = #{user_id}
        </if>
        <if test="user_id == NULL or user_id == ''">
            WHERE USER_ID IN (
            <foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>
            )
        </if>
    </select>

    <select id="getStduentClass" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getStduentClass */
        SELECT sri.user_id, tcmi.CLA_NM AS user_class
        FROM AIDT_LMS.STDT_REG_INFO sri
        INNER JOIN AIDT_LMS.TC_CLA_MB_INFO tcmi ON sri.user_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
        <if test="user_id != NULL and user_id != ''">
            WHERE sri.USER_ID = #{user_id}
        </if>
        <if test="user_id == NULL or user_id == ''">
            WHERE sri.USER_ID IN (
            <foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>
            )
        </if>
    </select>

    <select id="getStduentNumber" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getStduentNumber */
        SELECT user_id, NUM AS user_number
        FROM AIDT_LMS.STDT_REG_INFO
        <if test="user_id != NULL and user_id != ''">
            WHERE USER_ID = #{user_id}
        </if>
        <if test="user_id == NULL or user_id == ''">
            WHERE USER_ID IN (
            <foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>
            )
        </if>
    </select>

    <select id="getClassList" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getClassList */
        SELECT schl_nm as school_name,
               grade_cd as user_grade,
               '' as user_order,
               '' as user_subject,
               '' as user_dang,
               concat(cla_nm, '반') as user_class,
               cla_id as class_code,
               estbl_sbjct_cd as open_course_code,
               course_rm_cd as lecture_room_code
        FROM AIDT_LMS.TC_CLA_INFO
        WHERE USER_ID = #{user_id}
    </select>

    <select id="scheduleList" parameterType="map" resultType="map">
    <![CDATA[
        select /* KerisUserMockApiMapper.scheduleList */
            '1' as day_week
             , '1' as class_peeriod
             , '과목' as subject_name
             , concat(grade_cd, '학년 ', cla_nm, '반 교실') as classroom_name
             , schl_nm as school_name
             , cla_id as lecture_code
        from tc_cla_info
        where user_id = #{user_id}
        order BY id asc
        ]]>
    </select>

    <select id="lectureList" parameterType="map" resultType="map">
        select /* KerisUserMockApiMapper.lectureList */
            '' as user_division
             , '' as school_id
             , a.schl_nm as school_name
             , a.grade_cd as user_grade
             , '' as user_order
             , '' as user_subject
             , '' as user_dyng
             , a.cla_nm as user_class
             , '' as lecture_room_code
            , case
                when (select count(1) from tc_cla_group_info tcgi where tcgi.origin_cla_id = a.cla_id) > 0
                then (
                    select tci.cla_nm from tc_cla_group_info tcgi
                    inner join tc_cla_info tci on tcgi.cla_id = tci.cla_id
                    where tcgi.origin_cla_id = a.cla_id
                )
                else a.cla_nm end as lecture_room_name
             , '' as subject_name
             , case when tcgi.origin_cla_id is not null then tcgi.origin_cla_id
                    else a.cla_id end as lecture_code
             , case when prev.id is null then 'N'
                    when tt.id is null then 'Y'
                    else 'N' end as paste_yn
        from tc_cla_user_info tcui
        inner join tc_cla_info a on tcui.cla_id = a.cla_id
        left join tc_cla_group_info tcgi on a.cla_id = tcgi.cla_id
        left join aidt_lms.tc_textbook tt ON tcui.cla_id = tt.cla_id
        left join (
            select tt.id
            from tc_cla_info a
            left join aidt_lms.tc_textbook tt ON a.cla_id  = tt.cla_id
            where a.user_id = #{user_id}
              and a.rgtr = 'preview'
             limit 1
        ) prev ON 1=1
        where tcui.user_id = #{user_id}
         <if test='lecture_code != null and lecture_code != ""'>
            AND COALESCE(tcgi.cla_id, a.cla_id) = #{lecture_code}
         </if>
          and a.rgtr != 'preview'
        order BY a.id asc
    </select>

    <update id="updateUserindvInfoAgreYn" parameterType="map">
        /* KerisUserMockApiMapper.updateUserindvInfoAgreYn */
        UPDATE `aidt_lms`.`user`
        SET indv_info_agre_yn = 'Y'
          , indv_info_agre_dt = current_timestamp
        WHERE user_id = #{user_id}
    </update>

    <select id="getClaIdFromTcId" parameterType="string" resultType="string">
        /* KerisUserMockApiMapper.getClaIdFromTcId */
        SELECT cla_id
        FROM aidt_lms.tc_cla_info
        where user_id = #{tcId}
    </select>

    <select id="getClassInfo" parameterType="map">
        SELECT tci.user_id AS tcId
             , tci.cla_id AS claId
        FROM aidt_lms.tc_cla_info tci
        WHERE tci.cla_id = #{claId}
    </select>

    <update id="updateClassActvtnAt" parameterType="map">
        UPDATE aidt_lms.tc_cla_mb_info
        SET actvtn_at = 'N'
          , mdfy_dt = now()
        WHERE stdt_id = #{stdtId}
    </update>

    <insert id="insertTcClaMbInfo" parameterType="map">
        -- 레코드 존재 여부 확인
        <selectKey keyProperty="exists" resultType="int" order="BEFORE">
            SELECT COUNT(*) FROM `aidt_lms`.`tc_cla_mb_info` WHERE stdt_id = #{stdtId} and cla_id = #{claId}
        </selectKey>

        <choose>
            <when test="exists > 0">
                -- 레코드가 존재하면 업데이트
                UPDATE aidt_lms.tc_cla_mb_info
                SET actvtn_at = 'Y'
                WHERE stdt_id = #{stdtId}
                AND cla_id = #{claId}
            </when>
            <otherwise>
                INSERT INTO aidt_lms.tc_cla_mb_info (
                cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, mdfr, monit_file_url
                )
                SELECT #{claId}, user_id, #{stdtId},yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, mdfr, #{monitUrl}
                FROM aidt_lms.tc_cla_info tci
                WHERE tci.cla_id = #{claId}
                LIMIT 1
            </otherwise>
        </choose>

    </insert>

    <select id="getTcInfo" parameterType="map" resultType="map">
        /* KerisUserMockApiMapper.getClassList */
        SELECT cla_id AS claId
        FROM AIDT_LMS.TC_CLA_INFO
        WHERE USER_ID = #{tcId}
            LIMIT 1
    </select>

    <insert id="insertStdtRegInfo" parameterType="map">
        insert into `aidt_lms`.`stdt_reg_info`  (
                  user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
                , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd
                , num, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
                            #{stdtId}
                     ,  #{stdtId}
                     , 'E'
                     , 5
                     , LEFT(SHA2('비상중학교', '256'), 50)
                     , '비상중학교'
                     , '19990101'
                     , 2023
                     , 'MAT'
                     , 1
                     , 1
                     , 1
                     , 1
                     , 'test'
                     , IFNULL((SELECT count(*) + 1 FROM tc_cla_mb_info tcmi WHERE cla_id = #{claId} AND actvtn_at  = 'Y'), 1)
                     , ''
                     , NOW()
                     , #{tcId}
                     , NOW()
                 )
    </insert>

    <insert id="insertUser" parameterType="map">
        insert into `aidt_lms`.`user` (
                                        user_id, sso_tk, flnm, user_se_cd, eml_addr, mbl_telno
                                      , sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn
                                      , rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
                   #{stdtId}
                 , CONCAT('token_', #{stdtId})
                 , #{stdtId}
                 , 'S'
                 , CONCAT(#{stdtId}, '@visang.com')
                 , '01000000000'
                 , 'M'
                 , '19990101'
                 , 'N'
                 , 'N'
                 , '20240120'
                 , ''
                 , #{tcId}
                 , now()
                 , #{tcId}
                 , now()
                 )
    </insert>

    <update id="updateTcClaInfo" parameterType="map">
        UPDATE aidt_lms.tc_cla_info
        SET user_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTcClaMbInfo" parameterType="map">
        UPDATE aidt_lms.tc_cla_mb_info
        SET user_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTcTextbook" parameterType="map">
        UPDATE aidt_lms.tc_textbook
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTcCurriculum" parameterType="map">
        UPDATE aidt_lms.tc_curriculum
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTabInfo" parameterType="map">
        UPDATE aidt_lms.tab_info
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTcLastLesson" parameterType="map">
        UPDATE aidt_lms.tc_lastlesson
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTbDgnssInfo" parameterType="map">
        UPDATE aidt_diagnosis.tb_dgnss_info
        SET tc_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateGlSetInfo" parameterType="map">
        UPDATE aidt_lms.gl_set_info
        SET user_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
          AND user_ty = 'T'
    </update>

    <update id="updateEvlInfo" parameterType="map">
        UPDATE aidt_lms.evl_info
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <update id="updateTaskInfo" parameterType="map">
        UPDATE aidt_lms.task_info
        SET wrter_id = #{trgTcId}
        WHERE cla_id = #{trgClaId}
    </update>

    <insert id="insertTcLecture" parameterType="map">
        /* KerisUserMockApi.insertTcLectureBulk */
        INSERT INTO aidt_lms.tc_lecture (
            cla_id, user_id, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
            (
              #{trgClaId}
            , #{srcTcId}
            , 'system'
            , now()
            , 'system'
            , now()
            )
            ON DUPLICATE KEY UPDATE
                                 mdfy_dt = now()
    </insert>

    <insert id="insertTcLectureBefore" parameterType="map">
        /* KerisUserMockApi.insertTcLectureBulk */
        INSERT INTO aidt_lms.tc_lecture (
            cla_id, user_id, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
            (
              #{trgClaId}
            , #{trgTcId}
            , 'system'
            , now()
            , 'system'
            , now()
            )
            ON DUPLICATE KEY UPDATE
                                 mdfy_dt = now()
    </insert>

    <select id="getPtnInfoById" parameterType="map" resultType="map">
        /* KerisUserMockApi.getPtnInfo */
        SELECT ptn_id AS ptnId
             , api_domain AS apiDomain
             , tc_main_url AS tcMainUrl
             , stdt_main_url AS stdtMainUrl
             , pa_main_url AS paMainUrl
             , curri_subject AS curriSubject
             , curri_school AS curriSchool
             , curri_grade AS curriGrade
        FROM `aidt_lms`.`aidt_ptn_info`
        WHERE ptn_id = #{partnerId}
    </select>

    <insert id="insertUserBulk" parameterType="list">
        /* KerisUserMockApi.insertUser - 배치 삽입 */
        insert into `aidt_lms`.`user` (
        user_id, sso_tk, flnm, user_se_cd, indv_info_agre_yn, eml_addr, mbl_telno,
        sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn,
        rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            '-',
            #{user.flnm},
            #{user.userType},
            'Y',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            #{user.rgtr},
            now(),
            #{user.rgtr},
            now()
            )
        </foreach>
    </insert>

    <insert id="insertStdtRegInfoBulk" parameterType="list">
        /* KerisUserMockApi.insertStdtRegInfo - 배치 삽입 */
        insert into `aidt_lms`.`stdt_reg_info` (
        user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
        , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd
        , num, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            #{user.flnm},
            'E',
            '0',
            LEFT(SHA2(#{user.schlNm}, '256'), 50),
            #{user.schlNm},
            '-',
            2024,
            '-',
            #{user.grade},
            '-',
            '-',
            '-',
            '-',
            #{user.num},
            #{user.rgtr},
            NOW(),
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>

    <insert id="insertTcClaInfo" parameterType="map">
        /* KerisUserMockApi.insertTcClaInfo */
        insert into `aidt_lms`.`tc_cla_info` (
            cla_id, user_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, estbl_sbjct_cd, course_rm_cd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
                   #{claId}
                 , #{userId}
                 , 2024
                 , 0
                 , #{schlNm}
                 , #{grade}
                 , '-'
                 , #{claNm}
                 , '-'
                 , '-'
                 , #{rgtr}
                 , NOW()
                 , #{rgtr}
                 , NOW()
                 )
        ;
    </insert>

    <update id="upsertTcClaUserInfo" parameterType="map">
        INSERT INTO aidt_lms.tc_cla_user_info (
            cla_id, user_id, activeyn, ref_tc_type
        ) VALUES (
            #{claId}, #{userId}, 'Y', CASE WHEN EXISTS (SELECT 1 FROM tc_cla_info WHERE user_id = #{userId} AND cla_id = #{claId}) THEN 'Y' ELSE 'N' END
        )
        ON DUPLICATE KEY UPDATE
            mdfy_dt = NOW()
    </update>

    <insert id="insertTcClaMbInfoBulk" parameterType="list">
        /* KerisUserMockApi.insertTcClaMbInfo - 배치 삽입 */
        insert into `aidt_lms`.`tc_cla_mb_info` (
        cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.claId},
            #{user.tcId},
            #{user.userId},
            2024,
            0,
            #{user.schlNm},
            #{user.grade},
            '-',
            #{user.claNm},
            #{user.rgtr},
            NOW(),
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>

    <insert id="insertShopSkinHistBulk" parameterType="list">
        /* KerisUserMockApi.insertShopSkinHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'S'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopGameHistBulk" parameterType="list">
        /* KerisUserMockApi.insertShopGameHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'G'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopProfileHistBulk" parameterType="list">
        /* KerisUserMockApi.insertShopProfileHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'P'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopSkinBulk" parameterType="list">
        /* KerisUserMockApi.insertShopSkinBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'S'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopGameBulk" parameterType="list">
        /* KerisUserMockApi.insertShopGameBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'G'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopProfileBulk" parameterType="list">
        /* KerisUserMockApi.insertShopProfileHist - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'P'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <select id="getUserInfo" parameterType="map" resultType="map">
        /* KerisUserMockApi.getUserInfo */
        SELECT u.id
        , u.user_id AS userId
        , u.rgtr
        , ifnull(sri.schl_cd, '') AS schlCd
        , ifnull(tri.schl_cd, '') AS tcSchlCd
        , ifnull(u.indv_info_agre_yn, 'N') AS indvInfoAgreYn
        , COALESCE(NULLIF(use_terms_agree_yn, ''), 'N') AS useTermsAgreeYn
        FROM `aidt_lms`.`user` u
        LEFT JOIN `aidt_lms`.`stdt_reg_info` sri ON u.user_id = sri.user_id
        LEFT JOIN `aidt_lms`.`tc_reg_info` tri ON u.user_id = tri.user_id
        WHERE u.user_id = #{user_id}
        <if test='user_type != null and user_type != ""'>
            AND u.user_se_cd = #{user_type}
        </if>
    </select>

    <select id="getTcClaInfo" parameterType="map" resultType="map">
        SELECT cla_id
             , course_rm_cd AS courseRmCd
             , user_id AS userId
        FROM aidt_lms.tc_cla_info
        WHERE cla_id = #{claId}
       LIMIT 1
    </select>

    <select id="getPrevClaId" parameterType="map" resultType="string">
        /* KerisUserMockApi.getPrevClaId */
        SELECT cla_id
        FROM aidt_lms.tc_cla_info
        WHERE user_id = #{user_id}
          AND rgtr = 'preview'
         LIMIT 1
    </select>

    <select id="getRegularClaExistsYn" parameterType="map" resultType="string">
        /* KerisUserMockApi.getRegularClaExistsYn */
        SELECT IFNULL( (
            SELECT 'Y'
            FROM tc_cla_user_info tcui
            INNER JOIN tc_cla_info tci ON tcui.cla_id = tci.cla_id
            INNER JOIN aidt_lms.tc_textbook tt ON tcui.cla_id = tt.cla_id
            WHERE tci.rgtr != 'preview'
            AND tcui.user_id = #{user_id}
            LIMIT 1
        ), 'N')
    </select>

    <select id="getStduentGender" parameterType="map" resultType="map">
        SELECT user_id,
        CASE
        WHEN sex = 'M' THEN 1
        WHEN sex = 'W' THEN 2
        ELSE 1
        END AS user_gender
        FROM AIDT_LMS.user
        <if test="user_id != NULL and user_id != ''">
            WHERE USER_ID = #{user_id}
        </if>
        <if test="user_id == NULL or user_id == ''">
            WHERE USER_ID IN (
            <foreach item="user_id" collection="user_ids" separator=",">#{user_id}</foreach>
            )
        </if>
    </select>

    <select id="getSubjectInfo" parameterType="map" resultType="map">
        select a.user_id
             , a.flnm as user_name
             , a.schl_nm as school_name
             , a.id as school_id
             , b.schl_ty_cd as user_division
             , tci.grade_cd  AS user_grade
             , '' AS user_order
             , '' AS user_subject
             , '' AS user_dyng
             , tci.cla_nm AS user_class
             , '' AS lecture_room_code
             , tci.cla_nm AS lecture_room_name
             , '' AS subject_name
             , '' AS api_version
        FROM tc_cla_info tci
        left join aidt_lms.tc_reg_info a ON a.user_id  = tci.user_id
        left join aidt_lms.school b on a.schl_cd = b.schl_cd
       WHERE tci.cla_id = #{lecture_code}
    </select>

</mapper>