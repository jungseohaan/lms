<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.materials.mapper.PortalPzMapper">

    <select id="getClassInfo" parameterType="map" resultType="camelHashMap">
        SELECT tci.cla_id, tci.id AS cla_idx
        FROM tc_cla_info tci
        WHERE tci.user_id = #{userId}
          AND tci.estbl_sbjct_cd = #{openCourseCode}
          AND tci.course_rm_cd = #{lectureRoomCode}
    </select>

    <select id="getClassInfoByClassCode" parameterType="map" resultType="camelHashMap">
        SELECT tci.cla_id, tci.id AS cla_idx
        FROM tc_cla_info tci
        WHERE tci.user_id = #{userId}
          AND tci.cla_id = #{classCode}
    </select>

    <select id="getClassInfoByLectureCode" parameterType="map" resultType="camelHashMap">
        SELECT tci.cla_id
             , tci.id AS cla_idx
             , (select count(*) from tc_cla_mb_info tcmi where tcmi.cla_id = tci.cla_id AND tcmi.actvtn_at = 'Y') AS stdt_cnt
        FROM tc_cla_info tci
        WHERE tci.cla_id = #{lectureCode}
    </select>

    <select id="getPtnInfo" parameterType="map" resultType="camelHashMap">
        SELECT ptn_id AS ptnId
             , curri_school AS curriSchool
             , curri_grade AS curriGrade
             , curri_subject AS curriSubject
             , curri_semester AS curriSemester
        FROM aidt_ptn_info
        WHERE ptn_id = #{partnerId}
    </select>

    <select id="getTcTextbookInfo" parameterType="map" resultType="camelHashMap">
        SELECT ut.id
        , ut.textbk_id AS textbk_id
        , ut.textbk_idx_id AS textbk_idx_id
        , tb.name AS textbk_nm
        /*[open]교과서 버젼 갱신 시 필요한 컬럼*/
        , ut.wrter_id as wrter_id
        , ut.cla_id as cla_id
        , ut.smte_cd as smte_cd
        , tb.`version`
        /*[close]교과서 버젼 갱신 시 필요한 컬럼*/
        FROM tc_textbook ut
        LEFT JOIN aidt_lcms.textbook tb ON ut.textbk_id = tb.id
        WHERE 1=1
        AND ut.cla_id = #{claId}
        <!-- AND ut.smte_cd = #{curriSemester} -->
        LIMIT 1
    </select>

    <select id="findLcmsTextbookList" parameterType="map" resultType="camelHashMap">
        SELECT tb.id AS textbk_id
             , tb.textbookIndex_id AS textbk_idx_id
             , tb.name AS textbk_nm
             , m1.code AS curriYear
             , m2.code AS curriSchool
             , m3.code AS curriSubject
             , m4.code AS curriGrade
             , m5.code AS curriSemester
             , tb.id AS textbk_crltn_id
             , tb.brand_id AS brandId
             , tb.deployServer_code AS deployServerCode
             , tb.version AS version
        FROM aidt_lcms.deploy_textbook tb
        LEFT JOIN (
            SELECT t.id
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriYear' THEN tmp.meta_id_b END) AS curriYear
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSchool' THEN tmp.meta_id_b END) AS curriSchool
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSubject' THEN tmp.meta_id_b END) AS curriSubject
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriGrade' THEN tmp.meta_id_b END) AS curriGrade
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSemester' THEN tmp.meta_id_b END) AS curriSemester
            FROM aidt_lcms.textbook t
             LEFT JOIN (
                SELECT m.id, m.name, mmm.meta_id_a, mmm.meta_id_b, mmm.meta_name_b
                FROM aidt_lcms.meta_meta_map mmm
                INNER JOIN aidt_lcms.meta m ON mmm.meta_id_a = m.id
            ) tmp on t.curriBook  = tmp.meta_id_a
            group by t.id
          ) t2 on tb.id = t2.id
         LEFT JOIN aidt_lcms.meta m1 ON t2.curriYear = m1.id
         LEFT JOIN aidt_lcms.meta m2 ON t2.curriSchool = m2.id
         LEFT JOIN aidt_lcms.meta m3 ON t2.curriSubject = m3.id
         LEFT JOIN aidt_lcms.meta m4 ON t2.curriGrade = m4.id
         LEFT JOIN aidt_lcms.meta m5 ON t2.curriSemester = m5.id
        WHERE 1=1
        <choose>
          <when test="deployServerCodeList == null or deployServerCodeList.size == 0">
          AND tb.deployServer_code = #{deployServerCode}
          </when>
          <otherwise>
            /*  비바샘 운영의 경우에는 하나의 서버에 다중으로 배포가 일어남 (VR - 비바샘운영, VW - 웹전시)
                향후 민간존 쪽은 `웹전시` 같은 서버가 추가 될 때 마다 property에 추가 후 in 조건 처리 하도록 함 */
          AND tb.deployServer_code in (<foreach item="serverCode" collection="deployServerCodeList" separator=",">#{serverCode}</foreach>)
          </otherwise>
        </choose>
          AND m2.code = #{curriSchool}
          AND m3.code = #{curriSubject}
          AND m4.code = #{curriGrade}
          AND m5.code = #{curriSemester}
          <if test='isPublish != null and isPublish == "Y"'>
              AND tb.is_publish = 1
          </if>
    </select>

    <select id="getLcmsTextbookInfo" parameterType="map" resultType="camelHashMap">
        SELECT tb.id AS textbk_id
             , tb.textbookIndex_id AS textbk_idx_id
             , tb.name AS textbk_nm
             , m1.code AS curriYear
             , m2.code AS curriSchool
             , m3.code AS curriSubject
             , m4.code AS curriGrade
             , m5.code AS curriSemester
             , tb.id AS textbk_crltn_id
             , tb.brand_id AS brandId
        FROM aidt_lcms.deploy_textbook tb
        LEFT JOIN (
            SELECT t.id
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriYear' THEN tmp.meta_id_b END) AS curriYear
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSchool' THEN tmp.meta_id_b END) AS curriSchool
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSubject' THEN tmp.meta_id_b END) AS curriSubject
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriGrade' THEN tmp.meta_id_b END) AS curriGrade
                 , MAX(CASE WHEN tmp.meta_name_b = 'curriSemester' THEN tmp.meta_id_b END) AS curriSemester
            FROM aidt_lcms.textbook t
             LEFT JOIN (
                SELECT m.id, m.name, mmm.meta_id_a, mmm.meta_id_b, mmm.meta_name_b
                FROM aidt_lcms.meta_meta_map mmm
                INNER JOIN aidt_lcms.meta m ON mmm.meta_id_a = m.id
            ) tmp on t.curriBook  = tmp.meta_id_a
            group by t.id
        ) t2 on tb.id = t2.id
         LEFT JOIN aidt_lcms.meta m1 ON t2.curriYear = m1.id
         LEFT JOIN aidt_lcms.meta m2 ON t2.curriSchool = m2.id
         LEFT JOIN aidt_lcms.meta m3 ON t2.curriSubject = m3.id
         LEFT JOIN aidt_lcms.meta m4 ON t2.curriGrade = m4.id
         LEFT JOIN aidt_lcms.meta m5 ON t2.curriSemester = m5.id
        WHERE tb.id = #{textbkCrltnId}
        <choose>
          <when test="deployServerCodeList == null or deployServerCodeList.size == 0">
          AND tb.deployServer_code = #{deployServerCode}
          </when>
          <otherwise>
            /*  비바샘 운영의 경우에는 하나의 서버에 다중으로 배포가 일어남 (VR - 비바샘운영, VW - 웹전시)
                향후 민간존 쪽은 `웹전시` 같은 서버가 추가 될 때 마다 property에 추가 후 in 조건 처리 하도록 함 */
          AND tb.deployServer_code in (<foreach item="serverCode" collection="deployServerCodeList" separator=",">#{serverCode}</foreach>)
          limit 1/*그럴일은 없겠지만 혹시라도 배포 교과서가 겹칠 경우 1row만 return 할 수 있도록 limit 1 처리*/
          </otherwise>
        </choose>
    </select>

    <insert id="insertTcTextbook" parameterType="map" useGeneratedKeys="true" keyProperty="tcTextbookId">
        INSERT INTO tc_textbook (
            wrter_id, cla_id, smte_cd, textbk_id, textbk_idx_id, rgtr
        ) VALUES (
            #{wrterId}, #{claId}, #{curriSemester}, #{textbkId}, #{textbkIdxId}, #{wrterId}
        )
    </insert>


    <insert id="insertTcCurriculum" parameterType="map">
        INSERT INTO tc_curriculum (
            wrter_id, cla_id, smte_cd, textbk_id, textbk_idx_id, textbk_idx_nm,  brand_id, `key`, `order`, parent
          , droppable, child_depth, tabIndex, `depth`, `text`, startPage, endPage, use_at
          , del_at, addcon_at, rgtr, reg_dt
          , curriUnit1, curriUnit2, curriUnit3, curriUnit4, curriUnit5
        )
        SELECT
            #{wrterId}, #{claId}, #{curriSemester}, #{textbkId}, #{textbkIdxId},
            indexName, #{brandId}, `key`, `order`, parent,
            droppable, child_depth, tabIndex, `depth`, `text`, startPage, endPage, IF(is_active=1, 'Y','N'),
            IF(is_delete=1, 'Y','N'), IF(is_addContents=1, 'Y','N'), #{wrterId}, NOW(),
            CASE
                WHEN LOCATE(',', tbc.curriUnitList) > 0 THEN
                    TRIM(BOTH '"' FROM SUBSTRING_INDEX(SUBSTRING_INDEX(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''), ',', 1), ',', -1))
                WHEN LENGTH(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', '')) > 0 THEN
                    TRIM(BOTH '"' FROM REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''))
                ELSE NULL
                END AS curriUnit1,
            CASE
                WHEN LENGTH(tbc.curriUnitList) - LENGTH(REPLACE(tbc.curriUnitList, ',', '')) >= 1 THEN
                    TRIM(BOTH '"' FROM SUBSTRING_INDEX(SUBSTRING_INDEX(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''), ',', 2), ',', -1))
                ELSE NULL
                END AS curriUnit2,
            CASE
                WHEN LENGTH(tbc.curriUnitList) - LENGTH(REPLACE(tbc.curriUnitList, ',', '')) >= 2 THEN
                    TRIM(BOTH '"' FROM SUBSTRING_INDEX(SUBSTRING_INDEX(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''), ',', 3), ',', -1))
                ELSE NULL
                END AS curriUnit3,
            CASE
                WHEN LENGTH(tbc.curriUnitList) - LENGTH(REPLACE(tbc.curriUnitList, ',', '')) >= 3 THEN
                    TRIM(BOTH '"' FROM SUBSTRING_INDEX(SUBSTRING_INDEX(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''), ',', 4), ',', -1))
                ELSE NULL
                END AS curriUnit4,
            CASE
                WHEN LENGTH(tbc.curriUnitList) - LENGTH(REPLACE(tbc.curriUnitList, ',', '')) >= 4 THEN
                    TRIM(BOTH '"' FROM SUBSTRING_INDEX(SUBSTRING_INDEX(REPLACE(REPLACE(tbc.curriUnitList, '[', ''), ']', ''), ',', 5), ',', -1))
                ELSE NULL
                END AS curriUnit5
            FROM aidt_lcms.deploy_textbookCurriculum tbc
            WHERE tbc.textbookIndex_id = #{textbkIdxId}
              <choose>
                  <when test="deployServerCodeList == null or deployServerCodeList.size == 0">
                    AND tbc.deployServer_code = #{deployServerCode}
                  </when>
                  <otherwise>
                    AND tbc.deployServer_code in (<foreach item="serverCode" collection="deployServerCodeList" separator=",">#{serverCode}</foreach>)
                  </otherwise>
              </choose>
            ORDER BY id
    </insert>

    <insert id="insertTabInfo" parameterType="map">
        insert into tab_info (
           wrter_id, cla_id, smte_cd, textbk_id, crcul_id, tab_nm, tab_seq, thm_cd, thm_path
         , sets_id, use_at
         , expos_at
         , setCategory, rgtr, reg_dt
         , ebk_id, ebk_use_at, startPage, endPage, thm_desc
        )
        SELECT
            #{wrterId}, #{claId}, #{curriSemester}, #{textbkId},
            textbookCurriculum_key, name, ROW_NUMBER() OVER (PARTITION BY textbookCurriculum_key ORDER BY id) AS tabSeq, theme_code, theme_path,
            set_id, IF(is_active=1, 'Y','N'),
            CASE
               WHEN accessLevel = 12 THEN 'Y'
               WHEN accessLevel = 1 THEN 'N'
               WHEN is_publicOpen = 1 THEN 'Y'
               ELSE 'N'
            END AS expos_at,
            setCategory, #{wrterId}, NOW(),
            ebook_id, IF(is_ebook_active=1, 'Y','N'), startPage, endPage, theme_desc
        FROM aidt_lcms.deploy_textbooktab
        WHERE textbookIndex_id = #{textbkIdxId}
        <choose>
            <when test="deployServerCodeList == null or deployServerCodeList.size == 0">
                AND deployServer_code = #{deployServerCode}
            </when>
            <otherwise>
                AND deployServer_code in (<foreach item="serverCode" collection="deployServerCodeList" separator=",">#{serverCode}</foreach>)
            </otherwise>
        </choose>
        ORDER BY textbookCurriculum_key, id
    </insert>

    <select id="getStdtRegInfo" parameterType="map" resultType="camelHashMap">
        SELECT sri.user_id AS stdt_id
             , tcmi.cla_id AS cla_id
             , tcmi.user_id AS tc_id
             , IFNULL(tci.id, -1) AS cla_idx
        FROM stdt_reg_info sri
        LEFT JOIN tc_cla_mb_info tcmi ON sri.user_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
        LEFT JOIN tc_cla_info tci ON tci.cla_id = tcmi.cla_id
        WHERE sri.user_id = #{userId}
        LIMIT 1
    </select>

    <select id="getStTextbookInfo" parameterType="map" resultType="camelHashMap">
        SELECT ut.textbk_id AS textbk_id
             , ut.textbk_idx_id AS textbk_idx_id
             , tb.name AS textbk_nm
        FROM tc_textbook ut
         LEFT JOIN aidt_lcms.textbook tb ON ut.textbk_id = tb.id
        WHERE 1=1
          AND ut.cla_id = #{claId}
    </select>

    <select id="findTcTextbookListByGroupKey" parameterType="map" resultType="map">
        SELECT ut.wrter_id as `wrterId`
            , ut.cla_id as `claId`
            , ut.textbk_id as `textbkId`
        FROM tc_textbook ut
        WHERE ut.wrter_id like concat(#{groupKey}, '%')
    </select>

    <insert id="insertTcTextbookVersion" parameterType="map">
        INSERT INTO aidt_lms.tc_textbook_version
            (
             tc_textbook_id,
             textbk_id,
             textbookVersion,
             rgtr,
             reg_dt
        ) VALUES
              (
               #{tcTextbookId},
               #{textbkId},
               #{version},
               #{wrterId},
               NOW()
              )
    </insert>

    <select id="selectCurrentTextbookVersion" parameterType="map" resultType="int">
        select ifnull( (
            select a1.textbookVersion
            from  aidt_lms.tc_textbook_version a1
            where a1.tc_textbook_id = #{tcTextbookId}
            and   a1.textbk_id = #{textbkId}
            order by a1.`id` desc
            limit 1
        ), 0 )
    </select>

    <select id="selectTextbookIndex" parameterType="map" resultType="map">
        select a1.`name` as textbkIdxNm
            , a1.brand_id as brandId
        from  aidt_lcms.textbookindex a1
        where a1.`id` = #{textbkIdxId}
    </select>

    <select id="selectTextbookCurriculum" parameterType="map" resultType="map">
        select a1.`key`
            , a1.`order`
            , a1.`parent`
            , a1.`droppable`
            , a1.child_depth
            , a1.tabIndex
            , a1.`depth`
            , a1.`text`
            , a1.startPage
            , a1.endPage
            , case
                when ifnull(a1.is_active, 0) = 1 then 'Y'
                else 'N'
              end use_at/*tc curri 등록 마이그레이션*/
            , case
                when ifnull(a1.is_delete, 0) = 1 then 'Y'
                else 'N'
              end del_at/*tc curri 등록 마이그레이션*/
            , case
                when ifnull(a1.is_addContents, 0) = 1 then 'Y'
                else 'N'
              end addcon_at/*tc curri 등록 마이그레이션*/
            /* -- 필요없는 column 제거
            , a1.onlytextbook
            , a1.curriUnitList
            , a1.studyMapList
            , a1.ea1List
            , a1.ea2List
            , a1.ea3List
            */
            , a1.indexName
            , a1.curriUnit1
            , a1.curriUnit2
            , a1.curriUnit3
            , a1.curriUnit4
            , a1.curriUnit5
        from  aidt_lcms.textbookcurriculum a1
        where a1.textbookIndex_id = #{textbkIdxId}
        and   a1.is_active = 1
        and   a1.is_delete = 0
        <if test="currentVersoin != null and currentVersoin > 0">
        and   exists(/*현재 버젼보다 이후 등록된 커리큘럼만 추출*/
            select 1
            from  aidt_lcms.deploy_textbookcurriculum a2_1
            where a2_1.textbookIndex_id = a1.textbookIndex_id
            and   a2_1.`key` = a1.`key`
            and   a2_1.textbookVersion > #{currentVersoin}
        )
        </if>
    </select>

    <select id="selectTcCurriculum" parameterType="map" resultType="map">
        select a1.`key`
             /*현재 차집합과 더불어 목차명 변경만 체크*/
            , a1.`text`
            , a1.`order`
            , a1.textbk_idx_nm as textbkIdxNm
        from  aidt_lms.tc_curriculum a1
        where 1=1
        and   a1.smte_cd = #{smteCd}
        and   a1.cla_id = #{claId}
        and   a1.textbk_idx_id = #{textbkIdxId}
    </select>

    <insert id="insertTcCurriculumFromVersionCheck" parameterType="map" useGeneratedKeys="true" keyProperty="tcCurriculumId">
        insert into aidt_lms.tc_curriculum (
            /*map으로 받은 값*/
              wrter_id
            , smte_cd
            , cla_id
            , textbk_id
            , textbk_idx_id
            , textbk_idx_nm
            , brand_id
            /*textbookcurriculum 조회 값*/
            , `key`
            , `order`
            , parent
            , droppable
            , child_depth
            , tabIndex
            , `depth`
            , text
            , page/*tc의 page는 end와 동일함*/
            , startPage
            , endPage
            , use_at
            , del_at
            , addcon_at
            , curriUnit1
            , curriUnit2
            , curriUnit3
            , curriUnit4
            , curriUnit5
            , indexName
            /*등록 정보*/
            , rgtr
            , reg_dt
            , mdfr
            , mdfy_dt
        ) values (
            /*map으로 받은 값*/
              #{wrterId}
            , #{smteCd}
            , #{claId}
            , #{textbkId}
            , #{textbkIdxId}
            , #{indexName}/*textbkIdxNm이 아닌 커리큘럼의 indexName 할당*/
            , #{brandId}
            /*textbookcurriculum 조회 값*/
            , #{key}
            , #{order}
            , #{parent}
            , #{droppable}
            , #{child_depth}
            , #{tabIndex}
            , #{depth}
            , #{text}
            , #{endPage}/*tc의 page는 end와 동일함*/
            , #{startPage}
            , #{endPage}
            , #{use_at}
            , #{del_at}
            , #{addcon_at}
            , #{curriUnit1}
            , #{curriUnit2}
            , #{curriUnit3}
            , #{curriUnit4}
            , #{curriUnit5}
            , #{indexName}
            /*등록 정보*/
            , #{wrterId}
            , now()
            , #{wrterId}
            , now()
        )
    </insert>

    <update id="updateTcCurriculum" parameterType="map">
        update aidt_lms.tc_curriculum
        set   textbk_idx_nm = #{indexName}
            , `order` = #{order}
            , text = #{text}
        where 1=1
        and   smte_cd = #{smteCd}
        and   cla_id = #{claId}
        and   textbk_id = #{textbkId}
        and   textbk_idx_id = #{textbkIdxId}
        and   `key` = #{key}
    </update>

    <select id="selectTextbookTab" parameterType="map" resultType="map">
        select a1.textbookCurriculum_key as crcul_id
            , a1.name as tab_nm
            , a1.set_id as sets_id
            , a1.setCategory
            , a1.ebook_id as ebk_id
            , case
                when ifnull(a1.is_ebook_active, 0) = 1 then 'Y'
                else 'N'
              end ebk_use_at/*tc tab 등록 마이그레이션*/
            , a1.startPage
            , a1.endPage
            , a1.theme_code as thm_cd
            , a1.theme_path as thm_path
            , a1.theme_desc as thm_desc
        from  aidt_lcms.textbooktab a1
        where a1.textbookIndex_id = #{textbkIdxId}
        <choose>
            <when test="key != null and key > 0">
        /*insert시에는 insert되는 커리큘럼의 탭만 세팅*/
        and   a1.textbookCurriculum_key = #{key}
            </when>
            <when test="keyList != null and keyList.size() > 0">
                <!-- 갱신시 keyList가 존재할 때만 NOT IN -->
        and a1.textbookCurriculum_key not in (<foreach item="key" collection="keyList" separator=",">#{key}</foreach>)
            </when>
            <!-- keyList가 비어있거나 null일 경우 조건 생략 -->
        </choose>
        and   a1.is_active = 1
        and   a1.is_publicOpen = 1
        <if test="currentVersoin != null and currentVersoin > 0">
        and   exists(/*현재 버젼보다 이후 등록된 커리큘럼만 추출*/
            select 1
            from  aidt_lcms.deploy_textbooktab a2_1
            where a2_1.is_active = 1
            and   a2_1.is_publicOpen = 1
            and   a2_1.textbookIndex_id = a1.textbookIndex_id
            and   a2_1.textbookCurriculum_key = a1.textbookCurriculum_key
            and   a2_1.set_id = a1.set_id
            and   a2_1.textbookVersion > #{currentVersoin}
        )
        </if>
    </select>

    <select id="selectTcTabInfo" parameterType="map" resultType="map">
        select crcul_id
            , sets_id
            , tab_nm
        from  aidt_lms.tab_info a1
        where a1.tab_add_at = 'N'/*교사 추가 탭 제외*/
        and   1=1
        and   a1.smte_cd = #{smteCd}
        and   a1.cla_id = #{claId}
        and   a1.textbk_id = #{textbkId}
    </select>

    <insert id="insertTcTabInfoFromVersionCheck" parameterType="map">
        insert into aidt_lms.tab_info (
            /*map으로 받은 값*/
              wrter_id
            , smte_cd
            , cla_id
            , textbk_id
            /*default 세팅*/
            , tab_seq/*tab max + 1*/
            , use_at/*사용여부 - default Y*/
            , expos_at/*노출여부 - default N*/
            , tab_add_at/*탭추가여부(교사가 등록할 경우 Y) - default N*/
            , ai_cstmzd_std_crt_at/*AI맞춤학습 생성 여부(세팅 값 확인 필요) - default N*/
            /*selectTextbookTab 조회 값*/
            , crcul_id
            , tab_nm
            , sets_id
            , setCategory
            , ebk_id
            , ebk_use_at
            , startPage
            , endPage
            , thm_cd
            , thm_path
            , thm_desc
            /*등록 정보*/
            , rgtr
            , reg_dt
            , mdfr
            , mdfy_dt
        ) values (
            /*map으로 받은 값*/
              #{wrterId}
            , #{smteCd}
            , #{claId}
            , #{textbkId}
            /*default 세팅*/
            , ( /*tab_seq 값 계산*/
                select ifnull( (
                    select max(a2_1.tab_seq)
                    from  aidt_lms.tab_info a2_1
                    where 1=1
                    and   a2_1.smte_cd = #{smteCd}
                    and   a2_1.cla_id = #{claId}
                    and   a2_1.textbk_id = #{textbkId}
                    and   a2_1.crcul_id = #{crcul_id}
                ), 1/*무조건 교과서는 있을 것이므로 default 1*/ ) + 1
              )/*tab max + 1*/
            , 'Y'/*사용여부 - default Y*/
            , 'N'/*노출여부 - default N*/
            , 'N'/*탭추가여부(교사가 등록할 경우 Y) - default N*/
            , 'N'/*AI맞춤학습 생성 여부(세팅 값 확인 필요) - default N*/
            /*selectTextbookTab 조회 값*/
            , #{crcul_id}
            , #{tab_nm}
            , #{sets_id}
            , #{setCategory}
            , #{ebk_id}
            , #{ebk_use_at}
            , #{startPage}
            , #{endPage}
            , #{thm_cd}
            , #{thm_path}
            , #{thm_desc}
            /*등록 정보*/
            , #{wrterId}
            , now()
            , #{wrterId}
            , now()
        )
    </insert>

    <select id="getTcClaUserInfo" parameterType="map" resultType="camelHashMap">
        SELECT
            id
             ,user_id
             ,cla_id
             ,activeyn
             ,ref_tc_type
             ,main_sub_flag
        FROM tc_cla_user_info
        WHERE ref_tc_type = 'Y'
          AND cla_id = #{claId}
    </select>

</mapper>