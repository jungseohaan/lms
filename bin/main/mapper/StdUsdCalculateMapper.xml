<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--suppress SqlDialectInspection -->
<mapper namespace="com.visang.aidt.lms.api.learning.mapper.StdUsdCalculateMapper">
    <delete id="deleteStdUsdTarget_1" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_1 */
        delete from aidt_lms.usd_cac_src_info ucsi
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteStdUsdTarget_2" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_2 */
        delete from aidt_lms.std_usd_stdt_unit_kwg_day_hist susukdh
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteStdUsdTarget_3" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_3 */
        delete from aidt_lms.std_usd_unit_kwg_day_hist suukdh
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteStdUsdTarget_4" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_4 */
        delete from aidt_lms.std_usd_notstdt_unit_day_hist suudh
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
            and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteStdUsdTarget_5" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_5 */
        delete from aidt_lms.std_usd_unit_day_hist suudh
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteStdUsdTarget_6" parameterType="map">
        /* StdUsdCalculateMapper.deleteStdUsdTarget_6 */
        delete from aidt_lms.std_usd_day_hist sudh
        where std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>

    <select id="findStdUsdTextbkTargetList" parameterType="map" resultType="camelHashMap" >
        /* StdUsdCalculateMapper.findStdUsdTextbkTargetList */
        select distinct
            a.textbk_id,
            a.textbk_idx_id
        from aidt_lms.tc_curriculum a
        inner join aidt_lcms.textbook b on a.textbk_id = b.id and b.brand_id = #{brandId}
        inner join aidt_lcms.meta c on c.id = b.textbookCategory and c.code = 'regular' /* 정규교과서 */
        where 1=1
        <if test="textbkIdList != null and textbkIdList.size() > 0 ">
            and a.textbk_id in (<foreach item="item" collection="textbkIdList" separator=",">#{item}</foreach>)
        </if>
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and a.cla_id =#{claId}
        </if>
        group by a.textbk_id, a.textbk_idx_id
        order by a.textbk_id
    </select>

    <select id="findStdUsdTargetList" parameterType="map" resultType="camelHashMap" >
        /* StdUsdCalculateMapper.findStdUsdTargetList */
        select distinct
            a.textbk_id,
            a.textbk_idx_id,
            a.wrter_id,
            a.cla_id
        from aidt_lms.tc_curriculum a
        inner join aidt_lcms.textbook b on a.textbk_id = b.id and b.brand_id = #{brandId}
        inner join aidt_lcms.meta c on c.id = b.textbookCategory and c.code = 'regular' /* 정규교과서 */
        where 1=1
          and a.textbk_id =#{textbkId} /* 교과서 ID */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and a.cla_id =#{claId}
        </if>
        order by a.textbk_id, a.wrter_id, a.cla_id
    </select>
    
    <insert id="insertUsdCacSrcInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertUsdCacSrcInfo */
        <![CDATA[
        insert into aidt_lms.usd_cac_src_info (
            id,
            textbk_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            std_dt,
            cla_id,
            stdt_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            kwg_main_tot_exm_num,
            gd_exm_num,
            gd_gnrl_rgt_asw_cnt,
            gd_gnrl_pat_asw_cnt,
            gd_hnt_gnrl_rgt_asw_cnt,
            gd_hnt_gnrl_pat_asw_cnt,
            gd_sm_exm_rgt_asw_cnt,
            gd_sm_exm_pat_asw_cnt,
            av_up_exm_num,
            av_up_gnrl_rgt_asw_cnt,
            av_up_gnrl_pat_asw_cnt,
            av_up_hnt_gnrl_rgt_asw_cnt,
            av_up_hnt_gnrl_pat_asw_cnt,
            av_up_sm_exm_rgt_asw_cnt,
            av_up_sm_exm_pat_asw_cnt,
            av_exm_num,
            av_gnrl_rgt_asw_cnt,
            av_gnrl_pat_asw_cnt,
            av_hnt_gnrl_rgt_asw_cnt,
            av_hnt_gnrl_pat_asw_cnt,
            av_sm_exm_rgt_asw_cnt,
            av_sm_exm_pat_asw_cnt,
            av_lw_exm_num,
            av_lw_gnrl_rgt_asw_cnt,
            av_lw_gnrl_pat_asw_cnt,
            av_lw_hnt_gnrl_rgt_asw_cnt,
            av_lw_hnt_gnrl_pat_asw_cnt,
            av_lw_sm_exm_rgt_asw_cnt,
            av_lw_sm_exm_pat_asw_cnt,
            bd_exm_num,
            bd_gnrl_rgt_asw_cnt,
            bd_gnrl_pat_asw_cnt,
            bd_hnt_gnrl_rgt_asw_cnt,
            bd_hnt_gnrl_pat_asw_cnt,
            bd_sm_exm_rgt_asw_cnt,
            bd_sm_exm_pat_asw_cnt,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        with tchInfo as (
            select distinct
                a.wrter_id,
                a.textbk_id,
                a.textbk_idx_id,
                a.cla_id,
                b.stdt_id
            from aidt_lms.tc_curriculum a
            inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where 1=1
              and a.textbk_id = #{textbkId} /* 교과서 ID */
              and a.wrter_id = #{wrterId} /* 교사 ID */
              and a.cla_id = #{claId} /* 학급 ID */
            order by
                a.textbk_id,
                a.wrter_id,
                a.cla_id,
                b.stdt_id
        )
        select
            id,
            textbk_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            std_dt,
            cla_id,
            stdt_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            kwg_main_tot_exm_num,
            gd_exm_num,
            gd_gnrl_rgt_asw_cnt,
            gd_gnrl_pat_asw_cnt,
            gd_hnt_gnrl_rgt_asw_cnt,
            gd_hnt_gnrl_pat_asw_cnt,
            gd_sm_exm_rgt_asw_cnt,
            gd_sm_exm_pat_asw_cnt,
            av_up_exm_num,
            av_up_gnrl_rgt_asw_cnt,
            av_up_gnrl_pat_asw_cnt,
            av_up_hnt_gnrl_rgt_asw_cnt,
            av_up_hnt_gnrl_pat_asw_cnt,
            av_up_sm_exm_rgt_asw_cnt,
            av_up_sm_exm_pat_asw_cnt,
            av_exm_num,
            av_gnrl_rgt_asw_cnt,
            av_gnrl_pat_asw_cnt,
            av_hnt_gnrl_rgt_asw_cnt,
            av_hnt_gnrl_pat_asw_cnt,
            av_sm_exm_rgt_asw_cnt,
            av_sm_exm_pat_asw_cnt,
            av_lw_exm_num,
            av_lw_gnrl_rgt_asw_cnt,
            av_lw_gnrl_pat_asw_cnt,
            av_lw_hnt_gnrl_rgt_asw_cnt,
            av_lw_hnt_gnrl_pat_asw_cnt,
            av_lw_sm_exm_rgt_asw_cnt,
            av_lw_sm_exm_pat_asw_cnt,
            bd_exm_num,
            bd_gnrl_rgt_asw_cnt,
            bd_gnrl_pat_asw_cnt,
            bd_hnt_gnrl_rgt_asw_cnt,
            bd_hnt_gnrl_pat_asw_cnt,
            bd_sm_exm_rgt_asw_cnt,
            bd_sm_exm_pat_asw_cnt,
            rgtr,
            reg_dt,
            #{serverInfo} as mdfr,
            mdfy_dt
        from (
            select
                null as id,
                M.textbk_id,
                M.trgt_se_cd as usd_clsf_cd,
                M.std_cd,
                M.trgt_id 	as usd_tg_id,
                M.tab_id,
                M.std_dt,
                M.cla_id,
                M.stdt_id,
                ifnull((   select unit_num
                    from (
                        select row_number() over () as unit_num, b.id
                        from aidt_lcms.meta a
                        inner join aidt_lcms.meta b on b.parent_id = a.parent_id and b.is_active = 1
                        where a.id = M.studyMap1
                        order by b.id
                    ) s
                    where id = M.studyMap1
                ),0) as unit_num,
                M.studyMap1	as meta_id,
                /* if(M.studyCnt > 0,'Y','N')  as std_at, */
                'Y' as std_at,
                M.studyMap_1 				as kwg_main_id,
                M.mudlCnt 					as kwg_main_tot_exm_num,
                /* 상 */
                M.MD01_cnt 					as gd_exm_num,
                M.MD01_answerCnt 			as gd_gnrl_rgt_asw_cnt,
                M.MD01_partAnswerCnt 		as gd_gnrl_pat_asw_cnt,
                M.MD01_hntUseAnswerCnt 		as gd_hnt_gnrl_rgt_asw_cnt,
                M.MD01_hntUsePartAnswerCnt 	as gd_hnt_gnrl_pat_asw_cnt,
                M.MD01_smExmAnswerCnt 		as gd_sm_exm_rgt_asw_cnt,
                M.MD01_smExmPartAnswerCnt 	as gd_sm_exm_pat_asw_cnt,
                /* 중상 */
                M.MD02_cnt 					as av_up_exm_num,
                M.MD02_answerCnt 			as av_up_gnrl_rgt_asw_cnt,
                M.MD02_partAnswerCnt 		as av_up_gnrl_pat_asw_cnt,
                M.MD02_hntUseAnswerCnt 		as av_up_hnt_gnrl_rgt_asw_cnt,
                M.MD02_hntUsePartAnswerCnt 	as av_up_hnt_gnrl_pat_asw_cnt,
                M.MD02_smExmAnswerCnt 		as av_up_sm_exm_rgt_asw_cnt,
                M.MD02_smExmPartAnswerCnt 	as av_up_sm_exm_pat_asw_cnt,
                /* 중 */
                M.MD03_cnt 					as av_exm_num,
                M.MD03_answerCnt 			as av_gnrl_rgt_asw_cnt,
                M.MD03_partAnswerCnt 		as av_gnrl_pat_asw_cnt,
                M.MD03_hntUseAnswerCnt 		as av_hnt_gnrl_rgt_asw_cnt,
                M.MD03_hntUsePartAnswerCnt 	as av_hnt_gnrl_pat_asw_cnt,
                M.MD03_smExmAnswerCnt 		as av_sm_exm_rgt_asw_cnt,
                M.MD03_smExmPartAnswerCnt 	as av_sm_exm_pat_asw_cnt,
                /* 중하 */
                M.MD04_cnt 					as av_lw_exm_num,
                M.MD04_answerCnt 			as av_lw_gnrl_rgt_asw_cnt,
                M.MD04_partAnswerCnt 		as av_lw_gnrl_pat_asw_cnt,
                M.MD04_hntUseAnswerCnt 		as av_lw_hnt_gnrl_rgt_asw_cnt,
                M.MD04_hntUsePartAnswerCnt 	as av_lw_hnt_gnrl_pat_asw_cnt,
                M.MD04_smExmAnswerCnt 		as av_lw_sm_exm_rgt_asw_cnt,
                M.MD04_smExmPartAnswerCnt 	as av_lw_sm_exm_pat_asw_cnt,
                /* 하 */
                M.MD05_cnt 					as bd_exm_num,
                M.MD05_answerCnt 			as bd_gnrl_rgt_asw_cnt,
                M.MD05_partAnswerCnt 		as bd_gnrl_pat_asw_cnt,
                M.MD05_hntUseAnswerCnt 		as bd_hnt_gnrl_rgt_asw_cnt,
                M.MD05_hntUsePartAnswerCnt 	as bd_hnt_gnrl_pat_asw_cnt,
                M.MD05_smExmAnswerCnt 		as bd_sm_exm_rgt_asw_cnt,
                M.MD05_smExmPartAnswerCnt 	as bd_sm_exm_pat_asw_cnt,
                'system' as rgtr,
                now() as reg_dt,
                'system' as mdfr,
                now() as mdfy_dt
            from (
                select
                    A.std_dt,
                    A.trgt_se_cd,
                    A.std_cd,
                    A.trgt_id,
                    A.tab_id,
                    A.cla_id,
                    A.stdt_id,
                    A.studyMap1,
                    A.studyMap_1,
                    (select textbk_id from tchInfo where stdt_id = A.stdt_id) as textbk_id,
                    sum(ifnull(A.studyCnt,0)) as studyCnt,
                    sum(ifnull(A.mudlCnt,0)) as mudlCnt,
                    sum(ifnull(A.MD01_cnt,0)) as MD01_cnt,
                    sum(ifnull(A.MD01_answerCnt,0)) as MD01_answerCnt,
                    sum(ifnull(A.MD01_partAnswerCnt,0)) as MD01_partAnswerCnt,
                    sum(ifnull(A.MD01_hntUseAnswerCnt,0)) as MD01_hntUseAnswerCnt,
                    sum(ifnull(A.MD01_hntUsePartAnswerCnt,0)) as MD01_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD01_smExmAnswerCnt,0)) as MD01_smExmAnswerCnt,
                    sum(ifnull(A.MD01_smExmPartAnswerCnt,0)) as MD01_smExmPartAnswerCnt,
                    sum(ifnull(A.MD02_cnt,0)) as MD02_cnt,
                    sum(ifnull(A.MD02_answerCnt,0)) as MD02_answerCnt,
                    sum(ifnull(A.MD02_partAnswerCnt,0)) as MD02_partAnswerCnt,
                    sum(ifnull(A.MD02_hntUseAnswerCnt,0)) as MD02_hntUseAnswerCnt,
                    sum(ifnull(A.MD02_hntUsePartAnswerCnt,0)) as MD02_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD02_smExmAnswerCnt,0)) as MD02_smExmAnswerCnt,
                    sum(ifnull(A.MD02_smExmPartAnswerCnt,0)) as MD02_smExmPartAnswerCnt,
                    sum(ifnull(A.MD03_cnt,0)) as MD03_cnt,
                    sum(ifnull(A.MD03_answerCnt,0)) as MD03_answerCnt,
                    sum(ifnull(A.MD03_partAnswerCnt,0)) as MD03_partAnswerCnt,
                    sum(ifnull(A.MD03_hntUseAnswerCnt,0)) as MD03_hntUseAnswerCnt,
                    sum(ifnull(A.MD03_hntUsePartAnswerCnt,0)) as MD03_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD03_smExmAnswerCnt,0)) as MD03_smExmAnswerCnt,
                    sum(ifnull(A.MD03_smExmPartAnswerCnt,0)) as MD03_smExmPartAnswerCnt,
                    sum(ifnull(A.MD04_cnt,0)) as MD04_cnt,
                    sum(ifnull(A.MD04_answerCnt,0)) as MD04_answerCnt,
                    sum(ifnull(A.MD04_partAnswerCnt,0)) as MD04_partAnswerCnt,
                    sum(ifnull(A.MD04_hntUseAnswerCnt,0)) as MD04_hntUseAnswerCnt,
                    sum(ifnull(A.MD04_hntUsePartAnswerCnt,0)) as MD04_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD04_smExmAnswerCnt,0)) as MD04_smExmAnswerCnt,
                    sum(ifnull(A.MD04_smExmPartAnswerCnt,0)) as MD04_smExmPartAnswerCnt,
                    sum(ifnull(A.MD05_cnt,0)) as MD05_cnt,
                    sum(ifnull(A.MD05_answerCnt,0)) as MD05_answerCnt,
                    sum(ifnull(A.MD05_partAnswerCnt,0)) as MD05_partAnswerCnt,
                    sum(ifnull(A.MD05_hntUseAnswerCnt,0)) as MD05_hntUseAnswerCnt,
                    sum(ifnull(A.MD05_hntUsePartAnswerCnt,0)) as MD05_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD05_smExmAnswerCnt,0)) as MD05_smExmAnswerCnt,
                    sum(ifnull(A.MD05_smExmPartAnswerCnt,0)) as MD05_smExmPartAnswerCnt
                from (
                    select
                        X.trgt_id,	  		/* 대상 ID */
                        X.tab_id,           /* 탭 ID */
                        X.std_cd,			/* 학습구분 */
                        X.trgt_se_cd,		/* 대상구분 */
                        #{stdDt} as std_dt,	/* 학습날짜 (배치 실행시점에 구해놓은 날짜값) */
                        X.cla_id,	  		/* 학급 ID */
                        X.stdt_id,	  		/* 학생 ID */
                        X.studyMap1,	  	/* 학습맵(단원) */
                        X.studyMap_1,	  	/* 학습맵(지식요인) */
                        sum(X.is_study) as studyCnt,
                        count(X.article_id) as mudlCnt,
                        /* 난이도 (상) */
                        sum(case when X.difficulty = 'MD01' then 1 else 0 end) as MD01_cnt,
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD01_answerCnt,	 /* 난이도(상) - 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD01_partAnswerCnt,/* 난이도(상) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD01_hntUseAnswerCnt,	    /* 난이도(상) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD01_hntUsePartAnswerCnt,	 /* 난이도(상) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD01_smExmAnswerCnt,	    /* 난이도(상) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD01_smExmPartAnswerCnt,	/* 난이도(상) - 유사문항 부분 정답수 */
                        /* 난이도 (중상) */
                        sum(case when X.difficulty = 'MD02' then 1 else 0 end) as MD02_cnt,
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD02_answerCnt,	 /* 난이도(중상) - 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD02_partAnswerCnt,/* 난이도(중상) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD02_hntUseAnswerCnt,	    /* 난이도(중상) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD02_hntUsePartAnswerCnt,	 /* 난이도(중상) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD02_smExmAnswerCnt,	    /* 난이도(중상) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD02_smExmPartAnswerCnt,	/* 난이도(중상) - 유사문항 부분 정답수 */
                        /* 난이도 (중) */
                        sum(case when X.difficulty = 'MD03' then 1 else 0 end) as MD03_cnt,
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD03_answerCnt,	 /* 난이도(중) - 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD03_partAnswerCnt,/* 난이도(중) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD03_hntUseAnswerCnt,	    /* 난이도(중) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD03_hntUsePartAnswerCnt,	 /* 난이도(중) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD03_smExmAnswerCnt,	    /* 난이도(중) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD03_smExmPartAnswerCnt,	/* 난이도(중) - 유사문항 부분 정답수 */
                        /* 난이도 (중하) */
                        sum(case when X.difficulty = 'MD04' then 1 else 0 end) as MD04_cnt,
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD04_answerCnt,	 /* 난이도(중하) - 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD04_partAnswerCnt,/* 난이도(중하) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD04_hntUseAnswerCnt,	    /* 난이도(중하) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD04_hntUsePartAnswerCnt,	 /* 난이도(중하) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD04_smExmAnswerCnt,	    /* 난이도(중하) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)  as MD04_smExmPartAnswerCnt,	/* 난이도(중하) - 유사문항 부분 정답수 */
                        /* 난이도 (하) */
                        sum(case when X.difficulty = 'MD05' then 1 else 0 end) as MD05_cnt,
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD05_answerCnt,	 /* 난이도(하) - 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD05_partAnswerCnt,/* 난이도(하) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD05_hntUseAnswerCnt,	    /* 난이도(하) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD05_hntUsePartAnswerCnt,	 /* 난이도(하) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD05_smExmAnswerCnt,	    /* 난이도(하) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD05_smExmPartAnswerCnt	    /* 난이도(하) - 유사문항 부분 정답수 */
                    from (
                         /* 평가 */
                         select
                             3 as trgt_se_cd,				/* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                             c.evl_id as trgt_id,	  		/* 대상 ID */
                             0 as tab_id,                   /* 탭 ID */
                             b.cla_id,                      /* 학급 ID */
                             c.mamoym_id as stdt_id,		/* 학생 ID */
                             d.evl_iem_id as article_id,    /* 아티클 ID */
                             d.sub_id,                      /* 서브 ID */
                             if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                             ifnull(d.errata,4) as errata,	/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             d.hnt_use_at,					/* 힌트 사용여부 */
                             'N' as sm_exm_at,				/* 유사문항 여부 */
                             f.meta_id as studyMap1,		/* 단원(대분류) */
                             g.meta_id as studyMap_1,		/* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                            aidt_lms.evl_info a
                            inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                            inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y' 	/* 제출여부 */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                            inner join aidt_lms.evl_result_detail d
                            on c.id = d.evl_result_id and d.mrk_ty in (1,2)	/* 1: 자동, 2: 수동 */
                                and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                            inner join aidt_lcms.article e on d.evl_iem_id = e.id
                            inner join aidt_lcms.article_meta_map f
                                on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                            inner join aidt_lcms.article_meta_map g
                                on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                            left join aidt_lcms.article_meta_map h
                                on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                            left join aidt_lcms.article_meta_map i
                              	on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                         union all
                         /* 과제 */
                         select
                             2 as trgt_se_cd,				/* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                             c.task_id as trgt_id,	  		/* 대상 ID */
                             0 as tab_id,                   /* 탭 ID */
                             b.cla_id,                      /* 학급 ID */
                             c.mamoym_id as stdt_id,		/* 학생 ID */
                             d.task_iem_id as article_id,   /* 아티클 ID */
                             d.sub_id,                      /* 서브 ID */
                             if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                             ifnull(d.errata,4) as errata,	/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             d.hnt_use_at,					/* 힌트 사용여부 */
                             'N' as sm_exm_at,				/* 유사문항 여부 */
                             f.meta_id as studyMap1,		/* 단원(대분류) */
                             g.meta_id as studyMap_1,		/* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                             aidt_lms.task_info a
                             inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                             inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'  /* 제출여부 */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                             inner join aidt_lms.task_result_detail d
                                on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                    and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                             inner join aidt_lcms.article e on d.task_iem_id = e.id
                             inner join aidt_lcms.article_meta_map f
                                on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                             inner join aidt_lcms.article_meta_map g
                                on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                             left join aidt_lcms.article_meta_map h
                                on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                             left join aidt_lcms.article_meta_map i
                                on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                         union all
                         /* 학습자료 */
                         select
                             1 as trgt_se_cd,				/* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                             a.crcul_id as trgt_id,	  		/* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                             a.id as tab_id,                /* 탭 ID */
                             b.cla_id,                      /* 학급 ID */
                             c.mamoym_id as stdt_id,		/* 학생 ID */
                             d.dta_iem_id as article_id,    /* 아티클 ID */
                             d.sub_id,                      /* 서브 ID */
                             if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study, /* 학습이력 체크 */
                             ifnull(d.errata,4) as errata,	/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             d.hnt_use_at,					/* 힌트 사용여부 */
                             d.sm_exm_at,					/* 유사문항 여부 */
                             f.meta_id as studyMap1,		/* 단원(대분류) */
                             g.meta_id as studyMap_1,		/* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                             aidt_lms.tab_info a
                             inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                             inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                             inner join aidt_lms.std_dta_result_detail d
                                on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                    and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                             inner join aidt_lcms.article e on d.dta_iem_id = e.id
                             inner join aidt_lcms.article_meta_map f
                                on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                             inner join aidt_lcms.article_meta_map g
                                on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                             left join aidt_lcms.article_meta_map h
                                on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                             left join aidt_lcms.article_meta_map i
                                on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                         union all
                         /* 자기주도학습 (선택학습) */
                         select
                             4 as trgt_se_cd,			  /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             a.std_cd,                    /* 학습구분(1: AI학습, 2: 선택학습) */
                             a.id as trgt_id,	  		  /* 대상 ID */
                             0 as tab_id,                 /* 탭 ID */
                             b.cla_id,                    /* 학급 ID */
                             a.stdt_id,					  /* 학생 ID */
                             c.module_id as article_id,   /* 아티클 ID */
                             0 as sub_id,	  		  	  /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                             if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                             ifnull(c.errata,4) as errata,/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             c.hnt_use_at,				  /* 힌트 사용여부 */
                             c.sm_exm_at,				  /* 유사문항 여부 */
                             f.meta_id as studyMap1,	  /* 단원(대분류) */
                             g.meta_id as studyMap_1,	  /* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                             aidt_lms.slf_std_info a
                             inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                             inner join aidt_lms.slf_std_result_info c on a.id = c.std_id	and c.std_at = 'Y'	     /* 자기주도학습은 모두 자동채점유형임. */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                             inner join aidt_lcms.article e on c.module_id = e.id
                             inner join aidt_lcms.article_meta_map f
                                on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                             inner join aidt_lcms.article_meta_map g
                                on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                             left join aidt_lcms.article_meta_map h
                                on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                             left join aidt_lcms.article_meta_map i
                                on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and a.std_cd = 2 /* 선택학습만 대상, 1은 영어가 사용한다고 함. */
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                         union all
                         /* 자기주도학습 (AI학습) */
                         select
                             4 as trgt_se_cd,			  /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             1 as std_cd,                 /* 학습구분(1: AI학습, 2: 선택학습) */
                             a.id as trgt_id,	  		  /* 대상 ID */
                             0 as tab_id,                 /* 탭 ID */
                             b.cla_id,                    /* 학급 ID */
                             a.stdt_id,					  /* 학생 ID */
                             c.module_id as article_id,   /* 아티클 ID */
                             0 as sub_id,	  		  	  /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                             if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                             ifnull(c.errata,4) as errata,/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             c.hnt_use_at,				  /* 힌트 사용여부 */
                             c.sm_exm_at,				  /* 유사문항 여부 */
                             f.meta_id as studyMap1,	  /* 단원(대분류) */
                             g.meta_id as studyMap_1,	  /* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                             aidt_lms.slf_ai_std_info a
                             inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                             inner join aidt_lms.slf_ai_std_result_info c on a.id = c.std_ai_id and c.std_at = 'Y'		  /* 자기주도학습은 모두 자동채점유형임. */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                             inner join aidt_lcms.article e on c.module_id = e.id
                             inner join aidt_lcms.article_meta_map f
                                on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                             inner join aidt_lcms.article_meta_map g
                                on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                             left join aidt_lcms.article_meta_map h
                                on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                             left join aidt_lcms.article_meta_map i
                                on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                         order by
                             trgt_se_cd, std_cd, trgt_id, article_id, sub_id
                    ) X
                    where
                        1=1
                        and X.studyMap1 is not null
                        and X.studyMap_1 is not null
                        and X.difficulty is not null
                        and X.curriSubject = 'mathematics' /* 교과목이 (수학)인 아티클만 대상으로 처리 */
                    group by
                        X.trgt_se_cd,
                        X.std_cd,
                        X.trgt_id,
                        X.tab_id,
                        X.cla_id,
                        X.stdt_id,
                        X.studyMap1,
                        X.studyMap_1
            ) A
            group by
                A.std_dt,
                A.trgt_se_cd,
                A.std_cd,
                A.trgt_id,
                A.tab_id,
                A.cla_id,
                A.stdt_id,
                A.studyMap1,
                A.studyMap_1
            order by
                A.cla_id,
                A.stdt_id,
                A.trgt_id,
                A.studyMap1,
                A.studyMap_1
            ) M
        ) N
        where
            1=1
            /* and std_at = 'Y' */
            and meta_id >  0 /* 학습맵 정보가 설정되어 있지 않는 아티클은 제외 */
        order by
            textbk_id,
            cla_id,
            stdt_id,
            usd_clsf_cd,
            unit_num,
            meta_id,
            kwg_main_id
        ]]>
    </insert>

    <insert id="insertStdUsdDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdDayHist */
        insert into std_usd_day_hist (
            id,
            std_dt,
            trgt_se_cd,
            std_cd,
            trgt_id,
            tab_id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            usd_clsf_cd as trgt_se_cd,
            std_cd,
            usd_tg_id as trgt_id,
            tab_id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            case when std_at = 'Y' then
                round(((
                     /* 상 */
                    (gd_gnrl_rgt_asw_cnt * 1)
                     + (gd_gnrl_pat_asw_cnt * 0.5)
                     + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                     + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                     + (gd_sm_exm_rgt_asw_cnt * 0.5)
                     + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                     /* 중상(6) */
                     + (av_up_gnrl_rgt_asw_cnt * 6)
                     + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                     + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                     + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                     + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                     + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                     /* 중(5) */
                     + (av_gnrl_rgt_asw_cnt * 5)
                     + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                     + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                     + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                     + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                     + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                     /* 중하(3) */
                     + (av_lw_gnrl_rgt_asw_cnt * 3)
                     + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                     + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                     + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                     + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                     + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                     /* 하(2) */
                     + (bd_gnrl_rgt_asw_cnt * 2)
                     + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                     + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                     + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                     + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                     + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) / (
                    gd_exm_num
                    + av_up_exm_num * 6
                    + av_exm_num * 5
                    + av_lw_exm_num * 3
                    + bd_exm_num * 2
                )
                ) * 100,2)
            else 0 end as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from
            usd_cac_src_info
        where std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
          and textbk_id = #{textbkId} /* 교과서 ID */
          and (
                gd_exm_num
                + av_up_exm_num
                + av_exm_num
                + av_lw_exm_num
                + bd_exm_num
            ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
        order by
            textbk_id,
            cla_id,
            stdt_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            unit_num,
            meta_id,
            kwg_main_id
    </insert>

    <insert id="insertStdUsdNotStdtUnitDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdNotStdtUnitDayHist */
        insert into aidt_lms.std_usd_notstdt_unit_day_hist (
            id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            max(std_at) as std_at,
            round(avg(usd_scr),2) as usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        from (
            select
                std_dt,
                stdt_id,
                cla_id,
                textbk_id,
                unit_num,
                meta_id,
                if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
                if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
                'system' as rgtr,
                now() as reg_dt,
                'system' as mdfr,
                now() as mdfy_dt
            from (
                select
                    std_dt,
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id,
                    ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                    sum(
                        /* 상 */
                        (gd_gnrl_rgt_asw_cnt * 1)
                        + (gd_gnrl_pat_asw_cnt * 0.5)
                        + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                        + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                        + (gd_sm_exm_rgt_asw_cnt * 0.5)
                        + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                        /* 중상(6) */
                        + (av_up_gnrl_rgt_asw_cnt * 6)
                        + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                        + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                        + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                        + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                        + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                        /* 중(5) */
                        + (av_gnrl_rgt_asw_cnt * 5)
                        + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                        + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                        + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                        + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                        + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                        /* 중하(3) */
                        + (av_lw_gnrl_rgt_asw_cnt * 3)
                        + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                        + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                        + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                        + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                        + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                        /* 하(2) */
                        + (bd_gnrl_rgt_asw_cnt * 2)
                        + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                        + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                        + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                        + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                        + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                    ) as x1,
                    sum(
                        gd_exm_num
                        + av_up_exm_num * 6
                        + av_exm_num * 5
                        + av_lw_exm_num * 3
                        + bd_exm_num * 2
                    ) as x2
                from
                    usd_cac_src_info
                where 1=1
                    and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
                    and std_at = 'Y' /* 2024-07-15, 학습이력이 있는 학생만 대상 */
                    and textbk_id = #{textbkId} /* 교과서 ID */
                    and (
                        gd_exm_num
                        + av_up_exm_num
                        + av_exm_num
                        + av_lw_exm_num
                        + bd_exm_num
                    ) > 0  /* 방어코드 추가 */
                    <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
                        and cla_id =#{claId}
                    </if>
                group by
                    std_dt,
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id
                order by
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id
            ) A
        ) B
        group by
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id
    </insert>

    <insert id="insertStdUsdUnitDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitDayHist */
        insert into aidt_lms.std_usd_unit_day_hist (
            id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from (
            select
                std_dt,
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                sum(
                    /* 상 */
                    (gd_gnrl_rgt_asw_cnt * 1)
                    + (gd_gnrl_pat_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                    + (gd_sm_exm_rgt_asw_cnt * 0.5)
                    + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                    /* 중상(6) */
                    + (av_up_gnrl_rgt_asw_cnt * 6)
                    + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                    + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                    + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                    /* 중(5) */
                    + (av_gnrl_rgt_asw_cnt * 5)
                    + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                    + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                    + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                    /* 중하(3) */
                    + (av_lw_gnrl_rgt_asw_cnt * 3)
                    + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                    + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                    /* 하(2) */
                    + (bd_gnrl_rgt_asw_cnt * 2)
                    + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                    + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                    + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) as x1,
                sum(
                    gd_exm_num
                    + av_up_exm_num * 6
                    + av_exm_num * 5
                    + av_lw_exm_num * 3
                    + bd_exm_num * 2
                ) as x2
            from
                usd_cac_src_info
            where 1=1
              and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
              and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
              and textbk_id = #{textbkId} /* 교과서 ID */
              and (
                    gd_exm_num
                    + av_up_exm_num
                    + av_exm_num
                    + av_lw_exm_num
                    + bd_exm_num
                ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
            group by
                std_dt,
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id
            order by
                textbk_id,
                cla_id,
                stdt_id,
                unit_num,
                meta_id
        ) A
    </insert>

    <insert id="insertStdUsdUnitKwgDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitKwgDayHist */
        insert into aidt_lms.std_usd_unit_kwg_day_hist (
            id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            max(std_at) as std_at,
            kwg_main_id,
            round(avg(usd_scr),2) as usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        from (
            select
                std_dt,
                stdt_id,
                cla_id,
                textbk_id,
                unit_num,
                meta_id,
                if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
                kwg_main_id,
                if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
                'system' as rgtr,
                now() as reg_dt,
                'system' as mdfr,
                now() as mdfy_dt
            from (
                select
                    std_dt,
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id,
                    kwg_main_id,
                    ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                    sum(
                        /* 상 */
                        (gd_gnrl_rgt_asw_cnt * 1)
                        + (gd_gnrl_pat_asw_cnt * 0.5)
                        + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                        + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                        + (gd_sm_exm_rgt_asw_cnt * 0.5)
                        + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                        /* 중상(6) */
                        + (av_up_gnrl_rgt_asw_cnt * 6)
                        + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                        + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                        + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                        + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                        + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                        /* 중(5) */
                        + (av_gnrl_rgt_asw_cnt * 5)
                        + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                        + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                        + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                        + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                        + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                        /* 중하(3) */
                        + (av_lw_gnrl_rgt_asw_cnt * 3)
                        + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                        + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                        + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                        + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                        + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                        /* 하(2) */
                        + (bd_gnrl_rgt_asw_cnt * 2)
                        + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                        + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                        + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                        + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                        + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                    ) as x1,
                    sum(
                        gd_exm_num
                        + av_up_exm_num * 6
                        + av_exm_num * 5
                        + av_lw_exm_num * 3
                        + bd_exm_num * 2
                    ) as x2
                from
                    usd_cac_src_info
                where 1=1
                  and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
                  and std_at = 'Y' /* 2024-07-15, 학습이력이 있는 학생만 대상 */
                  and textbk_id = #{textbkId} /* 교과서 ID */
                  and (
                        gd_exm_num
                        + av_up_exm_num
                        + av_exm_num
                        + av_lw_exm_num
                        + bd_exm_num
                    ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
                group by
                    std_dt,
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id,
                    kwg_main_id
                order by
                    stdt_id,
                    cla_id,
                    textbk_id,
                    unit_num,
                    meta_id,
                    kwg_main_id
            ) A
        ) B
        group by
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id
    </insert>

    <insert id="insertStdUsdStdtUnitKwgDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdStdtUnitKwgDayHist */
        insert into aidt_lms.std_usd_stdt_unit_kwg_day_hist (
            id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            kwg_main_id,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from (
            select
                std_dt,
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id,
                ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                sum(
                    /* 상 */
                    (gd_gnrl_rgt_asw_cnt * 1)
                    + (gd_gnrl_pat_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                    + (gd_sm_exm_rgt_asw_cnt * 0.5)
                    + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                    /* 중상(6) */
                    + (av_up_gnrl_rgt_asw_cnt * 6)
                    + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                    + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                    + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                    /* 중(5) */
                    + (av_gnrl_rgt_asw_cnt * 5)
                    + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                    + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                    + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                    /* 중하(3) */
                    + (av_lw_gnrl_rgt_asw_cnt * 3)
                    + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                    + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                    /* 하(2) */
                    + (bd_gnrl_rgt_asw_cnt * 2)
                    + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                    + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                    + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) as x1,
                sum(
                    gd_exm_num
                    + av_up_exm_num * 6
                    + av_exm_num * 5
                    + av_lw_exm_num * 3
                    + bd_exm_num * 2
                ) as x2
            from
                usd_cac_src_info
            where 1=1
              and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
              and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
              and textbk_id = #{textbkId} /* 교과서 ID */
              and (
                    gd_exm_num
                    + av_up_exm_num
                    + av_exm_num
                    + av_lw_exm_num
                    + bd_exm_num
                ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
            group by
                std_dt,
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id
            order by
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id
        ) A
    </insert>

    <insert id="insertStdUsdInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdInfo */
        insert into aidt_lms.std_usd_info(
            id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            kwg_main_id,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from (
            select
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id,
                ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                sum(
                    /* 상 */
                    (gd_gnrl_rgt_asw_cnt * 1)
                    + (gd_gnrl_pat_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                    + (gd_sm_exm_rgt_asw_cnt * 0.5)
                    + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                    /* 중상(6) */
                    + (av_up_gnrl_rgt_asw_cnt * 6)
                    + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                    + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                    + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                    /* 중(5) */
                    + (av_gnrl_rgt_asw_cnt * 5)
                    + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                    + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                    + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                    /* 중하(3) */
                    + (av_lw_gnrl_rgt_asw_cnt * 3)
                    + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                    + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                    /* 하(2) */
                    + (bd_gnrl_rgt_asw_cnt * 2)
                    + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                    + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                    + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) as x1,
                sum(
                    gd_exm_num
                    + av_up_exm_num * 6
                    + av_exm_num * 5
                    + av_lw_exm_num * 3
                    + bd_exm_num * 2
                ) as x2
            from
                usd_cac_src_info
            where 1=1
              and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
              and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
              and textbk_id = #{textbkId} /* 교과서 ID */
              and (
                    gd_exm_num
                    + av_up_exm_num
                    + av_exm_num
                    + av_lw_exm_num
                    + bd_exm_num
                ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
            group by
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id
            order by
                textbk_id,
                cla_id,
                stdt_id,
                unit_num,
                meta_id,
                kwg_main_id
            ) A
            ON DUPLICATE KEY UPDATE
                textbk_id = values(textbk_id),
                unit_num = values(unit_num),
                std_at = values(std_at),
                usd_scr = values(usd_scr),
                mdfy_dt = values(mdfy_dt)
    </insert>

    <insert id="insertStdUsdUnitInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitInfo */
        insert into aidt_lms.std_usd_unit_info (
            id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from (
            select
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id,
                ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                sum(
                    /* 상 */
                    (gd_gnrl_rgt_asw_cnt * 1)
                    + (gd_gnrl_pat_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                    + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                    + (gd_sm_exm_rgt_asw_cnt * 0.5)
                    + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                    /* 중상(6) */
                    + (av_up_gnrl_rgt_asw_cnt * 6)
                    + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                    + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                    + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                    + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                    /* 중(5) */
                    + (av_gnrl_rgt_asw_cnt * 5)
                    + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                    + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                    + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                    + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                    /* 중하(3) */
                    + (av_lw_gnrl_rgt_asw_cnt * 3)
                    + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                    + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                    + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                    /* 하(2) */
                    + (bd_gnrl_rgt_asw_cnt * 2)
                    + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                    + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                    + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                    + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) as x1,
                sum(
                    gd_exm_num
                    + av_up_exm_num * 6
                    + av_exm_num * 5
                    + av_lw_exm_num * 3
                    + bd_exm_num * 2
                ) as x2
            from
                usd_cac_src_info
            where 1=1
              and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
              and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
              and textbk_id = #{textbkId} /* 교과서 ID */
              and (
                    gd_exm_num
                    + av_up_exm_num
                    + av_exm_num
                    + av_lw_exm_num
                    + bd_exm_num
                ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
        </if>
            group by
                cla_id,
                stdt_id,
                textbk_id,
                unit_num,
                meta_id
            order by
                textbk_id,
                cla_id,
                stdt_id,
                unit_num,
                meta_id
        ) A
        ON DUPLICATE KEY UPDATE
            textbk_id = values(textbk_id),
            unit_num = values(unit_num),
            std_at = values(std_at),
            usd_scr = values(usd_scr),
            mdfy_dt = values(mdfy_dt)
    </insert>
    
    
    <!--영어 성취도 (사용안함)-->
    <select id="findEngStdUsdTargetList" resultType="camelHashMap">
        /* StdUsdCalculateMapper.findStdUsdTargetList */
        select  distinct a.textbk_id
        ,       a.textbk_idx_id
        ,       a.wrter_id
        ,       a.cla_id
        from    aidt_lms.tc_curriculum a
            inner join aidt_lcms.textbook b on a.textbk_id = b.id and b.brand_id = 3 /* 영어 */
            inner join aidt_lcms.meta c on c.id = b.textbookCategory and c.code = 'regular' /* 정규교과서 */
        where   1=1
        <if test="textbkIdList != null and textbkIdList.size() > 0 ">
            and a.textbk_id in (<foreach item="item" collection="textbkIdList" separator=",">#{item}</foreach>)
        </if>
        order by a.textbk_id, a.wrter_id, a.cla_id
    </select>
    
    <insert id="insertEngUsdAchSrc2Info" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Info */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_info (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   tab_id
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   usd_ach_id
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.wrter_id = #{wrterId} /* 교사 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by    textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       #{stdDt} as std_dt
        ,       tab_id
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num

        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.evaluationArea_cd as usd_ach_id
        ,       Z.mudlSum as usd_ach_scr
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 80 then 1 when round((mudlSum/mudlCnt)*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty
        ,       mudlCnt as rflt_actv_cnt
        ,       mudlList as article_list
        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.tab_id
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       (select `code` from aidt_lcms.meta where id = X.evaluationArea_id) as evaluationArea_cd     /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 */
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       a.id as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /*- 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id  /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 발음*/
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       a.id as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all
                            /* 자기주도학습 (선택학습/AI학습) 발음 */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /*- 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */



                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 > 0     /* 단원 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_id
        ]]>
    </insert>
    
    <insert id="insertEngUsdAchSrc2Detail" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Detail */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_detail (
                usd_ach_src_id
            ,   std_dt
            ,   iem_id
            ,   iem_cd
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.wrter_id = #{wrterId} /* 교사 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  ifnull((select id from aidt_lms.usd_ach_src2_info where usd_clsf_cd = Z.trgt_se_cd and usd_tg_id = Z.trgt_id and cla_id = Z.cla_id and stdt_id = Z.stdt_id and meta_id = Z.studyMap1 and Z.evaluationArea_cd like concat(usd_ach_id, '%') and date_format(std_dt, '%Y-%m-%d') = left(#{stdDt}, 10) order by std_dt desc, reg_dt desc limit 1), 0) as usd_ach_src_id
        ,       #{stdDt} as std_dt
        ,       Z.evaluationArea_id as iem_id
        ,       Z.evaluationArea_nm as iem_cd
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then Z.totScr else Z.mudlSum end) as usd_ach_scr
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then (case when round((Z.totScr/Z.mudlCnt),2) >= 80 then 1 when round((Z.totScr/Z.mudlCnt),2) > 50 then 2 else 3 end) else (case when round((Z.mudlSum/Z.mudlCnt)*100,2) >= 80 then 1 when round((Z.mudlSum/Z.mudlCnt)*100,2) > 50 then 2 else 3 end) end) as dfclt_lvl_ty
        ,       Z.mudlCnt as rflt_actv_cnt

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       #{serverInfo} as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       X.evaluationArea_cd     /* 영역별 코드 */
                ,       X.evaluationArea_nm     /* 영역별 명 */
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                ,       sum(cast(tot_scr as decimal(10,1))) as totScr

                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.evl_id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.evl_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.evl_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 */
                            select  2 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.task_id as trgt_id                /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.task_iem_id as article_id         /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.task_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 */
                            select  1 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.crcul_id as trgt_id               /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.dta_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.dta_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.id as trgt_id                     /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       a.stdt_id                           /*  학생 ID */
                                 ,       c.module_id as article_id           /* 아티클 ID */
                                 ,       0 as sub_id                         /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on c.module_id = g3.article_id and c.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on c.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */



                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.evl_id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.evl_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.evl_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 발음*/
                            select  2 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.task_id as trgt_id                /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.task_iem_id as article_id         /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id  /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.task_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.crcul_id as trgt_id               /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.dta_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */


                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.dta_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) 발음*/
                            select  4 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.id as trgt_id                     /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       a.stdt_id                           /*  학생 ID */
                                 ,       c.module_id as article_id           /* 아티클 ID */
                                 ,       0 as sub_id                         /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on c.module_id = g3.article_id and c.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on c.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                and     X.tot_scr > -1 /*  */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1,X.g2code, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 >  0 /* 단원 정보가 설정되어 있지 않는 아티클은 제외*/
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_cd, Z.trgt_id
        ]]>
    </insert>
    
    <insert id="insertEngUsdAchSrc2Kwg" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Kwg */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_kwg (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   kwg_main_cd
            ,   kwg_main_id
            ,   kwg_main_tot_exm_num
            ,   kwg_ach_num
            ,   dfclt_lvl_ty
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id     = #{textbkId} /* 교과서 ID */
              and   a.wrter_id      = #{wrterId} /* 교사 ID */
              and   a.cla_id        = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       #{stdDt} as std_dt
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num
        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.studyMap_cd as kwg_main_cd
        ,       Z.studyMap_1 as kwg_main_id
        ,       mudlCnt as kwg_main_tot_exm_num
        ,       Z.mudlSum as kwg_ach_num
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 80 then 1 when round((mudlSum/mudlCnt)*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id           /* 대상 ID */
                ,       X.trgt_se_cd        /* 대상구분 */
                ,       X.cla_id            /* 학급 ID */
                ,       X.stdt_id           /* 학생 ID */
                ,       X.studyMap1         /* 단원 */
                ,       X.studyMap_1        /* 영역별 아이디 */
                ,       X.studyMap_cd       /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all

                            /* 과제 */
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /* 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'


                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all

                            /* 과제 발음*/
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 자기주도학습 (선택학습/AI학습) 발음*/
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /* 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */


                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'
                ) X
                where   X.studyMap1 is not null
                and     X.studyMap_1 is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.studyMap_1
        ) Z
        where   Z.studyMap1 > 0 /* 학습맵 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.studyMap_1 > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.studyMap_1
        ]]>
    </insert>
    
    <update id="updateEngUsdAchSrc2Info">
        /* StdUsdCalculateMapper.updateEngUsdAchSrc2Info */
        <![CDATA[
        update aidt_lms.usd_ach_src2_info x, (
                select  a.id
                ,       sum(b.usd_ach_scr) as usd_ach_scr
                ,       count(b.id) as rflt_actv_cnt
                ,       (case when round((sum(b.usd_ach_scr)/count(*))*100,2) >= 80 then 1 when round((sum(b.usd_ach_scr)/count(*))*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.usd_ach_src2_info a
                    inner join aidt_lms.usd_ach_src2_detail b on a.id = b.usd_ach_src_id
                where   a.id = b.usd_ach_src_id
                  and   date_format(a.std_dt, '%Y-%m-%d') = left(#{stdDt}, 10)
                  and   a.textbk_id = #{textbkId}
                  and   a.cla_id = #{claId}
                /*  and   a.usd_ach_id = 'pronunciation' */    /* pronunciation이외 vocabulary, grammar도 적용 */
                group by a.id
        ) y
        set x.usd_ach_scr = y.usd_ach_scr
        ,   x.rflt_actv_cnt = y.rflt_actv_cnt
        ,   x.dfclt_lvl_ty = y.dfclt_lvl_ty
        where x.id = y.id
        ]]>
        </update>

    <delete id="deleteEngStdUsdTarget_1" parameterType="map">
        /* StdUsdCalculateMapper.deleteEngStdUsdTarget_1 */
        delete from aidt_lms.usd_ach_src2_info
        where 1=1
          and std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteEngStdUsdTarget_2" parameterType="map">
        /* StdUsdCalculateMapper.deleteEngStdUsdTarget_2 */
        delete from aidt_lms.usd_ach_src2_detail
        where 1=1
          and usd_ach_src2_detail.std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and usd_ach_src_id in (
        select a2_1.`id`
        from  aidt_lms.usd_ach_src2_info a2_1
        where std_dt = #{stdDt}
            and cla_id =#{claId}
            and textbk_id = #{textbkId}
          )
        </if>
    </delete>
    <delete id="deleteEngStdUsdTarget_3" parameterType="map">
        /* StdUsdCalculateMapper.deleteEngStdUsdTarget_3 */
        delete from aidt_lms.usd_ach_src2_kwg
        where 1=1
          and std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id =#{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>
    <delete id="deleteEngStdUsdTarget_4" parameterType="map">
        /* StdUsdCalculateMapper.deleteEngStdUsdTarget_3 */
        delete from aidt_lms.ach_cac_src_info
        where 1=1
          and std_dt = #{stdDt}
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and cla_id = #{claId}
          and textbk_id = #{textbkId}
        </if>
    </delete>

    <insert id="insertAchCacSrcInfo" parameterType="map">
        <![CDATA[
        insert into aidt_lms.ach_cac_src_info
        with tchInfo as (
                    select  distinct a.wrter_id
                    ,       a.textbk_id
                    ,       a.textbk_idx_id
                    ,       a.cla_id
                    ,       b.stdt_id
                    from    aidt_lms.tc_curriculum a
                        inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
                    where   1=1
                      and   a.textbk_id     = #{textbkId} /* 교과서 ID */
                      and   a.wrter_id      = #{wrterId} /* 교사 ID */
                      and   a.cla_id        = #{claId} /* 학급 ID */
                    order by textbk_id, wrter_id, cla_id, stdt_id
                )
        	            select
        	            null as id,
        	            X.textbk_id as textbk_id,
        	            X.cla_id,
        	            X.trgt_se_cd,
        	            X.std_cd,
        	            X.trgt_id,
        	            date_format(now(),'%Y-%m-%d') as std_dt,	/* 학습날짜 (배치 실행시점에 구해놓은 날짜값) */
        	            X.stdt_id,
        	            X.article_id,
        	            X.sub_id,
        	            X.errata,
        	            X.hnt_use_at,
        	            X.sm_exm_at,
        	            X.thumbnail,
        	            X.studyMap1 as meta_id,
        	            X.studyMap_1 as kwg_main_id,
        	            X.studyMap_cd,
        	            'system' as rgtr,
        	            now() as reg_dt,
        	            'system' as mdfr,
        	            now() as mdfy_dt
                        from    (
                                    /* 평가 */
        			                select 3            as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , c.evl_id     as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id  as stdt_id    /* 학생 ID */
        			                     , d.evl_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                   /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at               /* 힌트 사용여부 */
        			                     , 'N'          as sm_exm_at  /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.evl_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	  /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
                                          , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.evl_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lms.evl_result_detail d
                                                           on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.evl_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                                      union all
                                    /* 과제 */
        			                select 2             as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                 /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , c.task_id     as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id   as stdt_id    /* 학생 ID */
        			                     , d.task_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at                /* 힌트 사용여부 */
        			                     , 'N'           as sm_exm_at  /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.task_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	   /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
                                          , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.task_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lms.task_result_detail d
                                                           on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                inner join aidt_lcms.article e on d.task_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.task_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                                      union all
                                    /* 학습자료 */
        			                select
        			                    1            as trgt_se_cd   /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , 0            as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id  as stdt_id    /* 학생 ID */
        			                     , d.dta_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                   /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at               /* 힌트 사용여부 */
        			                     , d.sm_exm_at                /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.dta_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	  /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
        			                     , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.tab_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                                inner join aidt_lms.std_dta_result_detail d
                                                           on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.dta_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                                  union all
                                    /* 자기주도학습 (선택학습/AI학습) */
        			                select 4           as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , a.std_cd                	 /* 학습구분(1: AI학습, 2: 선택학습) */
        			                     , a.id        as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , a.stdt_id                 /* 학생 ID */
        			                     , c.module_id as article_id
        			                     , c.sub_id
        			                     , c.errata                  /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , c.hnt_use_at              /* 힌트 사용여부 */
        			                     , c.sm_exm_at               /* 유사문항 여부 */
        			                     , e.thumbnail               /* 문항유형이므로 setsummary의 thumbnail로 처리할 필요 없음 */
        			                     , f.meta_id as studyMap1	 /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
        			                     , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.slf_std_info a
                                                inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                                inner join aidt_lms.slf_std_result_info c
                                                           on a.id = c.std_id and c.errata <> 4
                                                          and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lcms.article e on c.module_id = e.id
                                                inner join aidt_lcms.article_meta_map f
                                                           on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                        inner join aidt_lcms.article_meta_map amm
        				                                    on c.module_id = amm.article_id and c.sub_id = amm.sub_id
        				                        inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'
                                    union all
                                    /* 이하 발음*/
                                    /* 평가 발음*/
        			                select 3            as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , c.evl_id     as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id  as stdt_id    /* 학생 ID */
        			                     , d.evl_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                   /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at               /* 힌트 사용여부 */
        			                     , 'N'          as sm_exm_at  /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.evl_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	  /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
                                          , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.evl_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lms.evl_result_detail d
                                                           on c.id = d.evl_result_id /* and d.mrk_ty in (1,2) */
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map ptqz
                                                           on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.evl_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                                    union all
                                    /* 과제 발음*/
        			                select 2             as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                 /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , c.task_id     as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id   as stdt_id    /* 학생 ID */
        			                     , d.task_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at                /* 힌트 사용여부 */
        			                     , 'N'           as sm_exm_at  /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.task_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	   /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
                                          , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.task_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lms.task_result_detail d
                                                           on c.id = d.task_result_id /* and d.mrk_ty in (1,2) */
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                inner join aidt_lcms.article e on d.task_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map ptqz
                                                           on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.task_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                                    union all
                                    /* 학습자료 발음*/
        			                select
        			                    1            as trgt_se_cd   /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , 0 as std_cd                /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
        			                     , 0            as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , c.mamoym_id  as stdt_id    /* 학생 ID */
        			                     , d.dta_iem_id as article_id
        			                     , d.sub_id
        			                     , d.errata                   /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , d.hnt_use_at               /* 힌트 사용여부 */
        			                     , d.sm_exm_at                /* 유사문항 여부 */
        			                     , ifnull(
        			                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.dta_iem_id and sub_id = d.sub_id),
        			                            e.thumbnail
        			                       ) as thumbnail
        			                     , f.meta_id as studyMap1	  /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
        			                     , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.tab_info a
                                                inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                                inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                                inner join aidt_lms.std_dta_result_detail d
                                                           on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                               and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                               and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                                inner join aidt_lcms.article_meta_map ptqz
                                                           on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */
                                                inner join aidt_lcms.article_meta_map f
                                                           on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                         inner join aidt_lcms.article_meta_map amm
        				                                    on d.dta_iem_id = amm.article_id and d.sub_id = amm.sub_id
        				                         inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                                    union all
                                    /* 자기주도학습 (선택학습/AI학습) 발음*/
        			                select 4           as trgt_se_cd /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
        			                     , a.std_cd                	 /* 학습구분(1: AI학습, 2: 선택학습) */
        			                     , a.id        as trgt_id    /* 대상 ID */
        			                     , b.cla_id
        			                     , a.stdt_id                 /* 학생 ID */
        			                     , c.module_id as article_id
        			                     , c.sub_id
        			                     , c.errata                  /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
        			                     , c.hnt_use_at              /* 힌트 사용여부 */
        			                     , c.sm_exm_at               /* 유사문항 여부 */
        			                     , e.thumbnail               /* 문항유형이므로 setsummary의 thumbnail로 처리할 필요 없음 */
        			                     , f.meta_id as studyMap1	 /* 단원(대분류) */
        			                     , g3.meta_id_b as studyMap_1
        			                     , g3.meta_name_b as studyMap_cd
        			                     , m2.id		     as articleCategory /*교과서/비교과서*/
        			                     , 'N'		     as ai_yn
        			                     , b.textbk_id as textbk_id
                                         ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                    from    aidt_lms.slf_std_info a
                                                inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                                inner join aidt_lms.slf_std_result_info c
                                                           on a.id = c.std_id and c.errata = 4
                                                          and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                   and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                                </if><![CDATA[
                                                inner join aidt_lcms.article e on c.module_id = e.id
                                                inner join aidt_lcms.article_meta_map ptqz
                                                           on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */
                                                inner join aidt_lcms.article_meta_map f
                                                           on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                                left join aidt_lcms.article_meta_map g
                                                          on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                                left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                                left join aidt_lcms.meta_meta_map g3
                                                          on g2.id = g3.meta_id_a
                                                              and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                                left join aidt_lcms.article_meta_map h
                                                          on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                                left join aidt_lcms.article_meta_map i
                                                          on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
        				                        inner join aidt_lcms.article_meta_map amm
        				                                    on c.module_id = amm.article_id and c.sub_id = amm.sub_id
        				                        inner join aidt_lcms.meta m2
        				                                    on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                    where   1 = 1
                                      and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                      and e.hashTags not like '%수행평가%'
                                      ) X
        			        where
        			            1=1
        			          and X.studyMap1 is not null
        			          and X.studyMap_1 is not null
        			          and X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
        			        order by
        			            X.articleCategory
        			            , case X.trgt_se_cd
        			                    when 1 then 1
        			                    when X.trgt_se_cd = 4 and X.ai_yn = 'Y' then 2
        			                    when 2 then 3
        			                    when 3 then 4
        			               else 5
        			               end
        			            , X.article_id
        ]]>
    </insert>

    <select id="selectUsdAchSrc2JobIdList" parameterType="map" resultType="int">
        select a.`id`
        from  aidt_lms.usd_ach_src2_info a
        where 1=1
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
          and a.cla_id = #{claId}
        </if>
          and a.std_dt = (
              select max(b.std_dt)
              from aidt_lms.usd_ach_src2_info b
              where 1=1
                <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
                    and a.cla_id = b.cla_id
                </if>
              )
    </select>

    <!--daily achieve -->
    <insert id="insertEngUsdAchSrc2InfoDaily" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2InfoDaily */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_info_daily (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   tab_id
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   usd_ach_id
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.wrter_id = #{wrterId} /* 교사 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by    textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       DATE_SUB(CURDATE(), INTERVAL 1 DAY) as std_dt
        ,       tab_id
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num

        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.evaluationArea_cd as usd_ach_id
        ,       Z.mudlSum as usd_ach_scr
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 80 then 1 when round((mudlSum/mudlCnt)*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty
        ,       mudlCnt as rflt_actv_cnt
        ,       mudlList as article_list
        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.tab_id
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       (select `code` from aidt_lcms.meta where id = X.evaluationArea_id) as evaluationArea_cd     /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 */
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       a.id as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /*- 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id  /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 발음*/
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       a.id as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all
                            /* 자기주도학습 (선택학습/AI학습) 발음 */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       0 as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /*- 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */



                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 > 0     /* 단원 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_id
        ]]>
    </insert>

    <insert id="insertEngUsdAchSrc2DetailDaily" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2DetailDaily */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_detail_daily (
                usd_ach_src_id
            ,   std_dt
            ,   iem_id
            ,   iem_cd
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.wrter_id = #{wrterId} /* 교사 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  ifnull((select id from aidt_lms.usd_ach_src2_info_daily where usd_clsf_cd = Z.trgt_se_cd and usd_tg_id = Z.trgt_id and cla_id = Z.cla_id and stdt_id = Z.stdt_id and meta_id = Z.studyMap1 and Z.evaluationArea_cd like concat(usd_ach_id, '%') and date_format(std_dt, '%Y-%m-%d') = left(DATE_SUB(CURDATE(), INTERVAL 1 DAY), 10) order by std_dt desc, reg_dt desc limit 1), 0) as usd_ach_src_id
        ,       DATE_SUB(CURDATE(), INTERVAL 1 DAY) as std_dt
        ,       Z.evaluationArea_id as iem_id
        ,       Z.evaluationArea_nm as iem_cd
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then Z.totScr else Z.mudlSum end) as usd_ach_scr
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then (case when round((Z.totScr/Z.mudlCnt),2) >= 80 then 1 when round((Z.totScr/Z.mudlCnt),2) > 50 then 2 else 3 end) else (case when round((Z.mudlSum/Z.mudlCnt)*100,2) >= 80 then 1 when round((Z.mudlSum/Z.mudlCnt)*100,2) > 50 then 2 else 3 end) end) as dfclt_lvl_ty
        ,       Z.mudlCnt as rflt_actv_cnt

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       #{serverInfo} as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       X.evaluationArea_cd     /* 영역별 코드 */
                ,       X.evaluationArea_nm     /* 영역별 명 */
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                ,       sum(cast(tot_scr as decimal(10,1))) as totScr

                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.evl_id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.evl_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.evl_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 */
                            select  2 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.task_id as trgt_id                /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.task_iem_id as article_id         /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.task_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 */
                            select  1 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.crcul_id as trgt_id               /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.dta_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.dta_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.id as trgt_id                     /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       a.stdt_id                           /*  학생 ID */
                                 ,       c.module_id as article_id           /* 아티클 ID */
                                 ,       0 as sub_id                         /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on c.module_id = g3.article_id and c.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on c.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */



                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.evl_id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.evl_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.evl_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                            union all
                            /* 과제 발음*/
                            select  2 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       c.task_id as trgt_id                /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.task_iem_id as article_id         /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                    /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id  /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.task_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.task_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.crcul_id as trgt_id               /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.dta_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata = 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */


                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.dta_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                            union all
                            /* 자기주도학습 (선택학습/AI학습) 발음*/
                            select  4 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       g2.code as g2code
                                 ,       a.id as trgt_id                     /* 대상 ID */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       a.stdt_id                           /*  학생 ID */
                                 ,       c.module_id as article_id           /* 아티클 ID */
                                 ,       0 as sub_id                         /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on c.module_id = g.article_id and c.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on c.module_id = g3.article_id and c.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on c.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */
                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                and     X.tot_scr > -1 /*  */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1,X.g2code, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 >  0 /* 단원 정보가 설정되어 있지 않는 아티클은 제외*/
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_cd, Z.trgt_id
        ]]>
    </insert>

    <insert id="insertEngUsdAchSrc2KwgDaily" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2KwgDaily */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_kwg_daily (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   kwg_main_cd
            ,   kwg_main_id
            ,   kwg_main_tot_exm_num
            ,   kwg_ach_num
            ,   dfclt_lvl_ty
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at ='Y'
            where   1=1
              and   a.textbk_id     = #{textbkId} /* 교과서 ID */
              and   a.wrter_id      = #{wrterId} /* 교사 ID */
              and   a.cla_id        = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       DATE_SUB(CURDATE(), INTERVAL 1 DAY) as std_dt
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num
        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.studyMap_cd as kwg_main_cd
        ,       Z.studyMap_1 as kwg_main_id
        ,       mudlCnt as kwg_main_tot_exm_num
        ,       Z.mudlSum as kwg_ach_num
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 80 then 1 when round((mudlSum/mudlCnt)*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id           /* 대상 ID */
                ,       X.trgt_se_cd        /* 대상구분 */
                ,       X.cla_id            /* 학급 ID */
                ,       X.stdt_id           /* 학생 ID */
                ,       X.studyMap1         /* 단원 */
                ,       X.studyMap_1        /* 영역별 아이디 */
                ,       X.studyMap_cd       /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 평가 */
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all

                            /* 과제 */
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 자기주도학습 (선택학습/AI학습) */
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /* 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata <> 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'


                            union all
                            /* 이하 발음*/
                            /* 평가 발음*/
                            select  3 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.evl_id as trgt_id             /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.evl_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.evl_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbook_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.evl_result_info c on a.id = c.evl_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.evl_result_detail d
                                                   on c.id = d.evl_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.evl_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.evl_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.evl_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.evl_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.evl_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.evl_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외 */

                            union all

                            /* 과제 발음*/
                            select  2 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       c.task_id as trgt_id            /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.task_iem_id as article_id     /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       'N' as sm_exm_at                /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.task_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.task_result_info c on a.id = c.task_id and c.mamoym_id = b.stdt_id  and c.subm_at = 'Y'
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lms.task_result_detail d
                                                   on c.id = d.task_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        inner join aidt_lcms.article e on d.task_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.task_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.task_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.task_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.task_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.task_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.task_eng_temp_result_info e on d.id = e.task_result_detail_id */
                            /*    left join aidt_lms.task_eng_temp_result_detail f on e.id = f.task_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 학습자료 발음*/
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null or d.tch_errata_chg_at = 'Y',1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.wrter_id = b.wrter_id and a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id  /* and c.subm_at = 'Y' */
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id /* and d.mrk_ty in (1,2) */
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                       and DATE_FORMAT(d.eak_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on d.dta_iem_id = ptqz.article_id and d.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */

                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/

                            union all

                            /* 자기주도학습 (선택학습/AI학습) 발음*/
                            select  4 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.id as trgt_id                 /* 대상 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       a.stdt_id                       /* 학생 ID */
                                 ,       c.module_id as article_id       /* 아티클 ID */
                                 ,       0 as sub_id                     /* 서브 ID, 자기주도학습 (연쇄형 제외) */
                                 ,       if(c.sub_mit_anw is not null or c.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(c.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       c.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       c.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.slf_std_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id and a.stdt_id = b.stdt_id
                                        inner join aidt_lms.slf_std_result_info c
                                                   on a.id = c.std_id and c.errata = 4
                                                  and c.std_at = 'Y' /* heum  실제 푼 이력 기준 */
                                                  and DATE_FORMAT(c.std_ed_dt, '%Y-%m-%d')  =DATE_SUB(CURDATE(), INTERVAL 1 DAY)
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                           and #{calcDt} > c.std_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on c.module_id = e.id

                                        inner join aidt_lcms.article_meta_map ptqz
                                                   on c.module_id = ptqz.article_id and c.sub_id = ptqz.sub_id and ptqz.meta_name = 'questionType' and meta_id in (select id from aidt_lcms.meta where name = 'questionType' and code ='ptqz') /*발음 */


                                        inner join aidt_lcms.article_meta_map f
                                                   on c.module_id = f.article_id and c.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on c.module_id = g.article_id and c.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on c.module_id = h.article_id and c.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on c.module_id = i.article_id and c.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.slf_std_eng_temp_result_info e on c.id = e.std_result_detail_id */
                            /*    left join aidt_lms.slf_std_eng_temp_result_detail f on e.id = f.std_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'
                ) X
                where   X.studyMap1 is not null
                and     X.studyMap_1 is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.studyMap_1
        ) Z
        where   Z.studyMap1 > 0 /* 학습맵 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.studyMap_1 > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.studyMap_1
        ]]>
    </insert>

    <update id="updateEngUsdAchSrc2InfoDaily">
        /* StdUsdCalculateMapper.updateEngUsdAchSrc2InfoDaily */
        <![CDATA[
        update aidt_lms.usd_ach_src2_info_daily x, (
                select  a.id
                ,       sum(b.usd_ach_scr) as usd_ach_scr
                ,       count(b.id) as rflt_actv_cnt
                ,       (case when round((sum(b.usd_ach_scr)/count(*))*100,2) >= 80 then 1 when round((sum(b.usd_ach_scr)/count(*))*100,2) > 50 then 2 else 3 end) as dfclt_lvl_ty
                from    aidt_lms.usd_ach_src2_info_daily a
                    inner join aidt_lms.usd_ach_src2_detail_daily b on a.id = b.usd_ach_src_id
                where   a.id = b.usd_ach_src_id
                  and   date_format(a.std_dt, '%Y-%m-%d') = left(DATE_SUB(CURDATE(), INTERVAL 1 DAY), 10)
                  and   a.textbk_id = #{textbkId}
                  and   a.cla_id = #{claId}
                group by a.id
        ) y
        set x.usd_ach_scr = y.usd_ach_scr
        ,   x.rflt_actv_cnt = y.rflt_actv_cnt
        ,   x.dfclt_lvl_ty = y.dfclt_lvl_ty
        where x.id = y.id
        ]]>
        </update>
</mapper>