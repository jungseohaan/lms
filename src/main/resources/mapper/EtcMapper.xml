<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.dashboard.mapper.EtcMapper">

    <select id="getConditionList" parameterType="map" resultType="map">
        /* EtcMapper.getConditionList */
        select id as tdyMdId
             , aidt_lms.F_CODE_NM('md_se_cd', md_se_cd) AS cdSeCd
             , aidt_lms.F_CODE_NM('md_clor_se_cd', md_clor_se_cd) AS mdClorSeCd
        from aidt_lms.tdy_md_info
        where cdtn_se_cd = #{cdtnSeCd}
          and enrg_se_cd = #{enrgSeCd}
    </select>

    <insert id="insertConditionDetail" parameterType="map">
        /* EtcMapper.insertConditionDetail */
        insert into aidt_lms.tdy_md_detail (
             tdy_md_id
           , tdy_md_rsn
           , stdt_id
           , cla_id
        ) values (
              #{tdyMdId}
            , #{tdyMdRsn}
            , #{stdtId}
            , #{claId}
        )
    </insert>

    <select id="conditionInfo" parameterType="map" resultType="map">
        /* EtcMapper.conditionInfo */
        select a1.id as tdyMdDetailId
             , a1.tdy_md_id as tdyMdId
             , a1.stdt_id as stdtId
             , a1.cla_id as claId
             , a1.tdy_md_rsn as tdyMdRsn
             , aidt_lms.F_CODE_NM('md_se_cd', b1.md_se_cd) AS cdSeCd
             , aidt_lms.F_CODE_NM('md_clor_se_cd', b1.md_clor_se_cd) AS mdClorSeCd
             , date_format(a1.reg_dt,'%Y-%m-%d %H:%i:%s') as regDt
        from aidt_lms.tdy_md_detail a1
                 inner join aidt_lms.tdy_md_info b1 on a1.tdy_md_id = b1.id
        where a1.stdt_id = #{stdtId}
          and a1.cla_id = #{claId}
        order by a1.id desc
            limit 1
    </select>

    <select id="conditionUserList" parameterType="map" resultType="map">
        /* EtcMapper.conditionUserList */
        select row_number() over() as rowNum,
        t.*
        from
        (
            select row_number() over(partition by a1.user_id order by b1.id desc) as groupRowNum
                , a1.user_id as stdtId
                , (case
                when a1.sex like 'M'
                then '남'
                else '여'
                end) as gender
                , b1.id as tdyMdDetailId
                , aidt_lms.F_CODE_NM('md_se_cd', c1.md_se_cd) AS cdSeCd
                , aidt_lms.F_CODE_NM('md_clor_se_cd', c1.md_clor_se_cd) AS mdClorSeCd
                , date_format(b1.mdfy_dt,'%Y-%m-%d %H:%i:%s') as mdfyDt
            from aidt_lms.user a1
                inner join aidt_lms.tdy_md_detail b1 on a1.user_id = b1.stdt_id
                inner join aidt_lms.tdy_md_info c1 on b1.tdy_md_id = c1.id
                inner join aidt_lms.tc_cla_mb_info d1 on b1.stdt_id = d1.stdt_id and d1.cla_id = b1.cla_id and d1.actvtn_at = 'Y'
            where b1.cla_id = #{claId}
            <if test='curYn != "" and curYn.equals("Y")'>
                and date_format(b1.reg_dt, '%Y-%m-%d') = CURRENT_DATE()
            </if>
            order by b1.id asc
        ) t
        where t.groupRowNum = 1
        order by rowNum desc
    </select>

    <select id="conditionUserDetail" parameterType="pagingParam" resultType="camelHashMap">
        /* EtcMapper.conditionUserDetail */
        select aa.rowNum
             , aa.stdt_id as stdtId
             , aa.tdyMdRsn
             , aa.cdSeCd
             , aa.mdClorSeCd
             , aa.mdfyDt
             , case
                   when aa.cdtn = 1 and aa.enrg = 1 then 3
                   when aa.cdtn = 1 and aa.enrg = 2 then 1
                   when aa.cdtn = 2 and aa.enrg = 1 then 4
                   when aa.cdtn = 2 and aa.enrg = 2 then 2
            end `section`
             , aa.`ordnt`
             , aa.`abscs`
             , aa.grade
             , aa.classCd
             , aa.fullCount
        from ( select row_number() over(order by a1.id) as rowNum
               , a1.stdt_id
                    , (case
                           when a1.tdy_md_rsn != '' and a1.tdy_md_rsn is not null then a1.tdy_md_rsn
                      else '-'
                  end ) as tdyMdRsn
                    , aidt_lms.F_CODE_NM('md_se_cd', b1.md_se_cd) AS cdSeCd
                    , aidt_lms.F_CODE_NM('md_clor_se_cd', b1.md_clor_se_cd) AS mdClorSeCd
                    , date_format(a1.mdfy_dt,'%Y-%m-%d %H:%i:%s') as mdfyDt
                    , b1.cdtn_se_cd as cdtn
                    , b1.enrg_se_cd as enrg
                    , b1.`ordnt`
                    , b1.`abscs`
                    , `aidt_lms`.F_CODE_NM('grade_cd', c1.grade_cd) as grade
                    , c1.cla_cd as classCd
                    , count(*) over () as fullCount
               from aidt_lms.tdy_md_detail a1
                        inner join aidt_lms.tdy_md_info b1 on a1.tdy_md_id = b1.id
                        inner join aidt_lms.tc_cla_mb_info c1 on a1.stdt_id = c1.stdt_id and c1.actvtn_at = 'Y'
               where a1.stdt_id = #{param.stdtId}
                 and a1.cla_id = #{param.claId}
               order by a1.id desc) aa
            limit #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <update id="conditionReset" parameterType="map">
        /* EtcMapper.conditionReset */
        UPDATE aidt_lms.tdy_md_detail
        SET tch_chk_at = 'Y'
        WHERE cla_id = #{claId}
    </update>

    <select id="selectGoalExists" parameterType="map" resultType="int">
        /* EtcMapper.selectGoalExists */
        select ifnull ( (
            select id
            from aidt_lms.gl_set_info
            where cla_id = #{claId}
            limit 1
        ), 0)
    </select>

    <select id="selectTcClaMbInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectTcClaMbInfo */
        select cla_id as claId
             , user_id as tcId
             , stdt_id as stdtId
        from `aidt_lms`.tc_cla_mb_info
        where cla_id = #{claId}
        and actvtn_at = 'Y'
    </select>

    <select id="getMainGoalInfo" parameterType="map" resultType="map">
        /* EtcMapper.getMainGoalInfo */
        select a1.crcul_id
             , b1.id as goalDetailId
             , b1.tch_set_at as tchSetAt
             , b1.st_chk_at as stChkAt
             , b1.st_set_at as stSetAt
             , case when b1.tch_set_at = 'Y' then
                        ( select b1_1.gl_nm
                          from aidt_lms.gl_set_info a1_1
                                   inner join aidt_lms.gl_set_detail b1_1 on a1_1.id = b1_1.gl_id
                          where a1_1.user_ty = 'T'
                            and a1_1.cla_id = a1.cla_id
                            and a1_1.crcul_id = a1.crcul_id
                            and b1_1.ordr = b1.ordr )
                    else b1.gl_nm
            end goalNm
             , b1.rect_at as recent
             , DATE_FORMAT(b1.reg_dt, "%Y-%m-%d %H:%i:%s") as regDt
             , DATE_FORMAT(b1.mdfy_dt, "%Y-%m-%d %H:%i:%s") as mdfyDt
             , DATE_FORMAT(b1.achv_dt, "%Y-%m-%d %H:%i:%s") as achvDt
        from aidt_lms.gl_set_info a1
                 inner join aidt_lms.gl_set_detail b1 on a1.id = b1.gl_id
        where a1.user_id = #{stdtId}
        <if test='claId != null and claId != ""'>
            and a1.cla_id = #{claId}
        </if>
        order by a1.crcul_id, b1.ordr, b1.mdfy_dt
    </select>

    <select id="getInsertMainGoalId" parameterType="map" resultType="int">
        /* EtcMapper.getInsertMainGoalId */
        select id
        from aidt_lms.gl_set_info
        where cla_id = #{claId}
        and user_id = #{stdtId}
        <if test="crculIdxList != null and !crculIdxList.isEmpty()">
            and crcul_id in (<foreach item="crculId" collection="crculIdxList" separator=",">#{crculId}</foreach>)
        </if>
    </select>

    <insert id="insertGoalInfo" parameterType="map" useGeneratedKeys="true" keyColumn="goalId">
        /* EtcMapper.insertGoalInfo */
        INSERT INTO aidt_lms.gl_set_info (
                   crcul_id
                 , cla_id
                 , user_id
                 , user_ty
        ) VALUES (
                     #{crculIdx}
                 , #{claId}
                 , #{stdtId}
                 , #{userType}
                 )
        ON DUPLICATE KEY UPDATE
        mdfy_dt = NOW()
    </insert>

    <select id="getGoalDetailOne" parameterType="int" resultType="map">
        /* EtcMapper.getGoalDetailOne */
        select b1.id as goalDetailId
             , b1.tch_set_at as tchSetAt
             , b1.st_chk_at as stChkAt
             , b1.st_set_at as stSetAt
             , b1.rect_at as recent
             , DATE_FORMAT(b1.reg_dt, "%Y-%m-%d %H:%i:%s") as regDt
             , DATE_FORMAT(b1.mdfy_dt, "%Y-%m-%d %H:%i:%s") as mdfyDt
             , DATE_FORMAT(b1.achv_dt, "%Y-%m-%d %H:%i:%s") as achvDt
        from aidt_lms.gl_set_info a1
                 inner join aidt_lms.gl_set_detail b1 on a1.id = b1.gl_id
        where b1.gl_id = #{goalId}
    </select>

    <insert id="insertGoalDetail">
        insert into aidt_lms.gl_set_detail (
                                             gl_id
                                           , ordr
                                           , rect_at
        ) values (
                     #{goalId}
                 , #{order}
                 , #{rectAt}
                 )
    </insert>

    <select id="getTeacherGoalInfoList" parameterType="pagingParam" resultType="map" >
        /* EtcMapper.getTeacherGoalInfoList */
        select
            a1.rowNum
             , a1.crcul_id as crculId
             , a1.user_id as stdtId
             , a1.id as goalId
             , a1.stChk1 as stChk1
             , a1.stChk2 as stChk2
             , a1.stChk3 as stChk3
             , a1.achvDt as achvDt
             , a1.fullCount
        from ( select row_number() over(order by sri.num) as rowNum
		            , b1.crcul_id
                    , b1.user_id
                    , b1.id
                    , (select b1_1.st_chk_at from `aidt_lms`.`gl_set_detail` b1_1 where b1_1.gl_id = b1.id and b1_1.ordr = 1) as stChk1
                    , (select b1_1.st_chk_at from `aidt_lms`.`gl_set_detail` b1_1 where b1_1.gl_id = b1.id and b1_1.ordr = 2) as stChk2
                    , (select b1_1.st_chk_at from `aidt_lms`.`gl_set_detail` b1_1 where b1_1.gl_id = b1.id and b1_1.ordr = 3) as stChk3
                    , (select date_format(max(b1_1.achv_dt), '%Y-%m-%d %H:%i:%s') from `aidt_lms`.`gl_set_detail` b1_1 where b1_1.gl_id = b1.id) as achvDt
                    , count(*) over () as fullCount
               from `aidt_lms`.`gl_set_info` b1
                        INNER JOIN aidt_lms.tc_cla_mb_info c1 ON b1.user_id = c1.stdt_id AND c1.cla_id = b1.cla_id  AND c1.actvtn_at = 'Y'
                        INNER JOIN aidt_lms.stdt_reg_info sri ON b1.user_id = sri.user_id
               where b1.cla_id = #{param.claId}
                 and b1.crcul_id = #{param.crculId}
                 and b1.user_ty = 'S'
               order by sri.num
             ) a1
        order by a1.rowNum
            limit #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <select id="getCommonGoalIdxList" parameterType="map" resultType="int">
        /* etcMapper.getCommonGoalIdxList */
        select id
        from aidt_lms.gl_set_info
        where cla_id like #{claId}
          and user_ty = 'T'
    </select>

    <select id="getCommonGoalList" parameterType="map" resultType="map">
        /* etcMapper.getCommonGoalList */
        select a1.crcul_id
             , b1.id as goalDetailId
             , ifnull(b1.gl_nm, '') as goalNm
             , b1.ordr as ordNo
             , b1.tch_set_at as tchSetAt
        from aidt_lms.gl_set_info a1
                 inner join aidt_lms.gl_set_detail b1 on a1.id = b1.gl_id
        where a1.cla_id = #{claId}
          and a1.user_ty = 'T'
    </select>

    <select id="selectGoalResetTarget" parameterType="map" resultType="map">
        /* etcMapper.selectGoalResetTarget */
        select a1.cla_id as claId
             , a1.user_id as userId
        from gl_set_info a1
                 inner join gl_set_detail b1 on a1.id = b1.gl_id
        where b1.id = #{goalDetailId}
    </select>

    <update id="updateGoalReset" parameterType="map">
        /* EtcMapper.updateGoalReset */
        update `aidt_lms`.`gl_set_info` a1
            inner join `aidt_lms`.`gl_set_detail` b1 ON a1.id = b1.gl_id
            set b1.rect_at = 'N'
        where a1.user_id = #{userId}
          and a1.cla_id = #{claId}
    </update>

    <update id="updateCommonGoalReset" parameterType="map">
        /* etcMapper.updateCommonGoalReset */
        update `aidt_lms`.`gl_set_info` a1
            inner join `aidt_lms`.`gl_set_detail` b1 on a1.id = b1.gl_id
            set b1.rect_at = 'N'
        where a1.cla_id = #{claId}
    </update>

    <update id="updateCommonGoalNm" parameterType="map">
        /* etcMapper.updateCommonGoalNm */
        update `aidt_lms`.`gl_set_detail`
        set gl_nm = #{goalNm}
        where id = #{goalDetailId}
    </update>

    <update id="updateGoalTchSet" parameterType="map">
        /* etcMapper.updateGoalTchSet */
        update `aidt_lms`.`gl_set_info` a1
        inner join `aidt_lms`.`gl_set_detail` b1 on a1.id = b1.gl_id
        <set>
            <choose>
                <when test='tchSetAt != null and tchSetAt.equals("Y")'>
                    , b1.tch_set_at = 'Y'
                    , b1.st_set_at = 'N'
                </when>
                <otherwise>
                    , b1.tch_set_at = 'N'
                    , b1.st_set_at = 'Y'
                </otherwise>
            </choose>
            <choose>
                <when test='rectAt != null and rectAt == "Y"'>
                    , b1.rect_at = 'Y'
                </when>
                <otherwise>
                    , b1.rect_at = 'N'
                </otherwise>
            </choose>
            , b1.st_chk_at = 'N'
            , b1.mdfy_dt = current_timestamp()
        </set>
        where a1.cla_id = #{claId}
        and a1.crcul_id = #{crculId}
        and b1.ordr = #{ordNo}
    </update>

    <update id="updateGoalDetail" parameterType="map">
        /* etcMapper.updateGoalDetail */
        update `aidt_lms`.`gl_set_detail`
        <set>
            mdfy_dt = current_timestamp()
            , st_chk_at = 'N'
            , achv_dt = NULL
            , gl_nm = #{goalNm}
            , rect_at = #{rectAt}
            <choose>
                <when test='stSetAt != null and stSetAt.equals("N")'>
                    , st_set_at = 'N'
                    , tch_set_at = 'N'
                </when>
                <when test='stSetAt != null and stSetAt.equals("Y")'>
                    , st_set_at = 'Y'
                    , tch_set_at = 'N'
                    , tch_chk_at = 'Y'
                </when>
            </choose>

        </set>
        where id = #{goalDetailId}
    </update>

    <update id="updateGoalStSet" parameterType="map">
        /* EtcMapper.updateGoalStSet */
        update `aidt_lms`.`gl_set_detail`
        set mdfy_dt = current_timestamp()
        <choose>
            <when test='stChkAt != null and stChkAt == "Y"'>
                , st_chk_at = 'Y'
                , achv_dt = NOW()
            </when>
            <otherwise>
                , st_chk_at = 'N'
                , achv_dt = NULL
            </otherwise>
        </choose>
        where id = #{goalDetailId}
    </update>

    <update id="updateGoalAlarm" parameterType="map">
        /* EtcMapper.updateGoalAlarm */
        UPDATE aidt_lms.gl_set_detail d
            JOIN aidt_lms.gl_set_info i ON i.id = d.gl_id
        SET d.tch_chk_at = 'N'
        WHERE i.cla_id = #{claId}
    </update>

    <!-- META 자기조절학습 -->
    <select id="selectTcDgnssInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssInfo */
        SELECT a1.`id` AS dgnssId
             , a1.ord_no AS ordNo
             , a1.cla_id AS claId
             , a1.dgnss_at AS dgnssAt
             , a1.paper_idx AS paperIdx
             , DATE_FORMAT(a1.dgnss_st_dt, "%Y. %m. %d.") AS dgnssStDt
             , DATE_FORMAT(a1.dgnss_ed_dt, "%Y. %m. %d.") AS dgnssEdDt
             , COUNT(DISTINCT CASE WHEN b1.subm_at = 'Y' AND c1.actvtn_at = 'Y' THEN b1.stdt_id END) AS stSubmCnt
             , (SELECT COUNT(DISTINCT c2.stdt_id)
                FROM aidt_lms.tc_cla_mb_info c2
                WHERE c2.cla_id = a1.cla_id
                  AND c2.actvtn_at = 'Y'
                ) AS stTotalCnt
             , (SELECT COUNT(DISTINCT c2.stdt_id)
                FROM aidt_lms.tc_cla_mb_info c2
                WHERE c2.cla_id = a1.cla_id
                  AND c2.actvtn_at = 'Y'
                  AND NOT EXISTS (
                        SELECT 1
                        FROM aidt_diagnosis.tb_dgnss_result_info b2
                        WHERE b2.stdt_id = c2.stdt_id
                          AND b2.dgnss_id = a1.id
                  )
                ) AS notDgnssStartCnt
             , (SELECT GROUP_CONCAT(DISTINCT c2.stdt_id)
                FROM aidt_lms.tc_cla_mb_info c2
                WHERE c2.cla_id = a1.cla_id
                  AND c2.actvtn_at = 'Y'
                  AND NOT EXISTS (
                        SELECT 1
                        FROM aidt_diagnosis.tb_dgnss_result_info b2
                        WHERE b2.stdt_id = c2.stdt_id
                          AND b2.dgnss_id = a1.id
                  )
                ) AS notDgnssStartList,
            a1.tc_id AS tcId
        FROM `aidt_diagnosis`.`tb_dgnss_info` a1
                 INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
                 INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.cla_id = c1.cla_id AND b1.stdt_id = c1.stdt_id AND c1.actvtn_at = 'Y'
        WHERE a1.cla_id = #{claId}
        GROUP BY a1.id
    </select>

    <update id="saveDgnssTextSave" parameterType="map">
        /* EtcMapper.saveDgnssTextSave */
        UPDATE aidt_diagnosis.tb_dgnss_info
        SET dgnss_text = #{dgnssText}
        WHERE id = #{dgnssId}
    </update>

    <select id="selectAllStdtList" parameterType="map" resultType="string">
        /* EtcMapper.selectAllStdtList */
        SELECT stdt_id
        FROM aidt_lms.tc_cla_mb_info
        where cla_id = #{claId}
        and actvtn_at = 'Y'
    </select>

    <select id="selectDgnssStdtList" parameterType="map" resultType="string">
        /* EtcMapper.selectDgnssStdtList */
        SELECT tdri.stdt_id
        FROM aidt_diagnosis.tb_dgnss_info tdi
             INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON tdi.id = tdri.dgnss_id
        WHERE tdi.cla_id = #{claId}
        GROUP BY tdri.stdt_id
    </select>

    <select id="selectTcDgnssInfoOne" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssInfoOne */
        SELECT a1.id AS dgnssId
            , a1.ord_no AS ordNo
            , a1.cla_id AS claId
            , a1.dgnss_at AS dgnssAt
            , DATE_FORMAT(dgnss_st_dt, "%Y-%m-%d %H:%i:%s") AS dgnssStDt
            , DATE_FORMAT(dgnss_ed_dt, "%Y-%m-%d %H:%i:%s") AS dgnssEdDt
            , COUNT(DISTINCT CASE WHEN b1.subm_at = 'Y' THEN b1.stdt_id END) AS stSubmCnt
        FROM `aidt_diagnosis`.`tb_dgnss_info`a1
            INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
            INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.cla_id = c1.cla_id AND b1.stdt_id = c1.stdt_id AND c1.actvtn_at = 'Y'
        WHERE a1.cla_id = #{claId}
        <choose>
            <when test='paperIdx != "" and paperIdx == "1"'>
                AND a1.paper_idx = '1'
            </when>
            <otherwise>
                AND a1.paper_idx = '2'
            </otherwise>
        </choose>
        AND a1.ord_no = #{ordNo}
        GROUP BY a1.id
    </select>

    <select id="selectActvStdtCnt" parameterType="map" resultType="int">
        /* EtcMapper.selectActvStdtCnt */
        SELECT COUNT(*)
        FROM aidt_lms.tc_cla_mb_info tcmi
        WHERE tcmi.cla_id = #{claId}
          AND tcmi.actvtn_at = 'Y'
    </select>

    <select id="selectTcDgnssInfoOneFirst" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssInfoOne */
        SELECT a1.id AS dgnssId
            , a1.ord_no AS ordNo
            , a1.cla_id AS claId
            , a1.dgnss_at AS dgnssAt
            , DATE_FORMAT(dgnss_st_dt, "%Y-%m-%d %H:%i:%s") AS dgnssStDt
            , DATE_FORMAT(dgnss_ed_dt, "%Y-%m-%d %H:%i:%s") AS dgnssEdDt
            , (SELECT COUNT(*) FROM aidt_diagnosis.tb_dgnss_result_info WHERE dgnss_id = a1.id) as nowStdtCnt
        FROM `aidt_diagnosis`.`tb_dgnss_info`a1
        WHERE a1.cla_id = #{claId}
        <choose>
            <when test='paperIdx != "" and paperIdx == "1"'>
                AND a1.paper_idx = '1'
            </when>
            <otherwise>
                AND a1.paper_idx = '2'
            </otherwise>
        </choose>
        AND a1.ord_no = #{ordNo}
        GROUP BY a1.id
    </select>

    <delete id="deleteTargetStListResultInfo" parameterType="java.util.List">
        /* etcMapper.deleteTargetStListResultInfo */
        DELETE FROM aidt_diagnosis.tb_dgnss_result_info
        WHERE stdt_id in (<foreach item="item" collection="list" separator=",">#{item}</foreach>)
    </delete>

    <delete id="deleteTargetStListAnswer" parameterType="java.util.List">
        /* etcMapper.deleteTargetStListAnswer */
        DELETE FROM aidt_diagnosis.tb_dgnss_answer
        WHERE MEM_ID in (<foreach item="item" collection="list" separator=",">#{item}</foreach>)
    </delete>


    <select id="selectTcDgnssInfoOneWithDgnssId" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssInfoOneWithDgnssId */
        SELECT a1.id AS dgnssId
             , a1.ord_no AS ordNo
             , a1.cla_id AS claId
             , a1.tc_id AS tcId
             , a1.dgnss_at AS dgnssAt
             , a1.paper_idx AS paperIdx
             , DATE_FORMAT(dgnss_st_dt, "%Y-%m-%d %H:%i:%s") AS dgnssStDt
             , DATE_FORMAT(dgnss_ed_dt, "%Y-%m-%d %H:%i:%s") AS dgnssEdDt
             , COUNT(DISTINCT CASE WHEN b1.subm_at = 'Y' THEN b1.stdt_id END) AS stSubmCnt
        FROM `aidt_diagnosis`.`tb_dgnss_info` a1
             INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
             INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.cla_id = c1.cla_id AND b1.stdt_id = c1.stdt_id AND c1.actvtn_at = 'Y'
        WHERE a1.id = #{dgnssId}
        GROUP BY a1.id
    </select>

    <select id="selectStOmrInfo" parameterType="map" resultType="java.util.LinkedHashMap">
        /* EtcMapper.selectStOmrInfo */
        select a1.id as dgnssResultId,
        <choose>
            <when test='paperIdx != null and paperIdx == "2"'>
                `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`,
                `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `20`,
                `21`, `22`, `23`, `24`, `25`, `26`, `27`, `28`, `29`, `30`,
                `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `39`, `40`,
                `41`, `42`, `43`, `44`, `45`, `46`, `47`, `48`, `49`, `50`,
                `51`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`,
                `61`, `62`, `63`, `64`, `65`, `66`, `67`, `68`, `69`, `70`,
                `71`, `72`, `73`, `74`, `75`, `76`, `77`
            </when>
            <when test='paperIdx != null and paperIdx == "1"'>
                `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`,
                `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `20`,
                `21`, `22`, `23`, `24`, `25`, `26`, `27`, `28`, `29`, `30`,
                `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `39`, `40`,
                `41`, `42`, `43`, `44`, `45`, `46`, `47`, `48`, `49`, `50`,
                `51`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`,
                `61`, `62`, `63`, `64`, `65`, `66`, `67`, `68`, `69`, `70`,
                `71`, `72`, `73`, `74`, `75`, `76`, `77`, `78`, `79`, `80`,
                `81`, `82`, `83`, `84`, `85`, `86`, `87`, `88`, `89`, `90`,
                `91`, `92`, `93`, `94`, `95`, `96`, `97`, `98`, `99`, `100`,
                `101`, `102`, `103`, `104`, `105`, `106`, `107`, `108`, `109`, `110`,
                `111`, `112`, `113`, `114`, `115`, `116`, `117`, `118`, `119`, `120`,
                `121`, `122`, `123`, `124`
            </when>
        </choose>
        from `aidt_diagnosis`.`tb_dgnss_result_info` a1
        inner join `aidt_diagnosis`.`tb_dgnss_omr` b1 on a1.omr_id = b1.OMR_IDX
        where a1.dgnss_id = #{dgnssId}
        and a1.subm_at = 'N'
    </select>

    <select id="selectSubmitStList" parameterType="map" resultType="string">
        /* EtcMapper.selectSubmitStList */
        SELECT b1.stdt_id as stdtId
        FROM `aidt_diagnosis`.`tb_dgnss_info` a1
             INNER JOIN `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
             INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.cla_id = c1.cla_id AND b1.stdt_id = c1.stdt_id AND c1.actvtn_at = 'Y'
        WHERE a1.id = #{dgnssId}
          AND b1.subm_at = 'Y'
    </select>

    <insert id="insertDgnssInfo" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        /* EtcMapper.insertDgnssInfo */
        insert into `aidt_diagnosis`.tb_dgnss_info (
            cla_id
            , tc_id
            , ord_no
            <if test='paperIdx > 0 and paperIdx == 1'>
                , paper_idx
            </if>
        ) values (
            #{claId}
            , #{tcId}
            , #{ordNo}
            <if test='paperIdx > 0 and paperIdx == 1'>
                , #{paperIdx}
            </if>
        )
    </insert>

    <select id="selectTcId" parameterType="map" resultType="String">
        /* EtcMapper.selectTcId */
        select user_id
        from `aidt_lms`.tc_cla_info
        where cla_id = #{claId}
    </select>

    <select id="selectTargetStList" parameterType="map" resultType="String">
        /* EtcMapper.selectTargetStList */
        select sri.user_id
        from `aidt_lms`.`tc_cla_mb_info` a1
             inner join aidt_lms.stdt_reg_info sri on a1.stdt_id = sri.user_id
        where a1.cla_id = #{claId}
          and a1.actvtn_at = 'Y'
        order by sri.num
    </select>

    <insert id="insertDgnssOmr" parameterType="map" useGeneratedKeys="true" keyProperty="omrIdx">
        /* EtcMapper.insertDgnssResult */
        insert into `aidt_diagnosis`.`tb_dgnss_omr` (
            MEM_ID
            , CLASS_NO
            <if test='paperIdx != null and paperIdx == 1'>
                , PAPER_IDX
            </if>
        ) values (
            #{stdtId}
            , #{claId}
            <if test='paperIdx != null and paperIdx == 1'>
                , '5'
            </if>
        )
    </insert>

    <insert id="insertDgnssResult" parameterType="map" useGeneratedKeys="true" keyProperty="dgnssResultId">
        /* EtcMapper.insertDgnssResult */
        insert into `aidt_diagnosis`.tb_dgnss_result_info (
                    dgnss_id
                  , stdt_id
                  , omr_id
        ) values (
                     #{dgnssId}
                 , #{stdtId}
                 , #{omrIdx}
        )
    </insert>

    <insert id="insertDgnssAnswer" parameterType="map">
        /* EtcMapper.insertDgnssAnswer */
        insert into `aidt_diagnosis`.`tb_dgnss_answer` (
            MEM_ID
            , DGNSS_RESULT_ID
            , DGNSS_ORD
            , SCH_GRADE
            , TEST_IDX
            <if test='paperIdx != 0 and paperIdx == 1'>
                , DGNSS_ID
                , PAPER_IDX
            </if>
        ) values (
            #{stdtId}
            , #{dgnssResultId}
            , #{ordNo}
            , #{schGrade}
            , #{dgnssId}
            <if test='paperIdx != 0 and paperIdx == 1'>
                , 'DGNSS_10'
                , '5'
            </if>
        )
    </insert>

    <update id="updateDgnssInfo" parameterType="map">
        /* EtcMapper.updateDgnssInfo */
        update `aidt_diagnosis`.`tb_dgnss_info`
        set dgnss_at = 'N'
          , dgnss_ed_dt = now()
        where id = #{dgnssId}
    </update>

    <select id="selectOmrIdxList" parameterType="map" resultType="int">
        /* EtcMapper.selectOmrIdxList */
        select c1.OMR_IDX
        from `aidt_diagnosis`.tb_dgnss_info a1
             inner join `aidt_diagnosis`.tb_dgnss_result_info b1 on a1.id = b1.dgnss_id
             inner join `aidt_diagnosis`.tb_dgnss_omr c1 on b1.omr_id = c1.OMR_IDX
        where a1.id = #{dgnssId}
    </select>

    <delete id="deleteDgnssOmrIdx" parameterType="int">
        /* EtcMapper.deleteDgnssOmrIdx */
        delete from `aidt_diagnosis`.`tb_dgnss_omr`
        where OMR_IDX = #{omrIdx}
    </delete>

    <delete id="deleteTcDgnssResultInfo" parameterType="map">
        /* EtcMapper.deleteTcDgnssResultInfo */
        delete from `aidt_diagnosis`.`tb_dgnss_result_info`
        where dgnss_id = #{dgnssId}
    </delete>

    <delete id="deleteTcDgnssAnswer" parameterType="map">
        /* EtcMapper.deleteTcDgnssAnswer */
        delete from `aidt_diagnosis`.`tb_dgnss_answer`
        where TEST_IDX = #{dgnssId}
    </delete>

    <delete id="deleteTcDgnssInfo" parameterType="map">
        /* EtcMapper.deleteTcDgnssInfo */
        delete from `aidt_diagnosis`.`tb_dgnss_info`
        where id = #{dgnssId}
    </delete>

    <select id="selectTcDgnssNotSubmStList" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssNotSubmStList */
        select a1.stdt_id as stdtId
        from `aidt_diagnosis`.`tb_dgnss_result_info` a1
             INNER JOIN aidt_diagnosis.tb_dgnss_info b1 ON a1.dgnss_id = b1.id
             INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.stdt_id = c1.stdt_id AND b1.cla_id = c1.cla_id AND c1.actvtn_at = 'Y'
        where a1.dgnss_id = #{dgnssId}
          and a1.subm_at = 'N'
    </select>

    <select id="selectStDgnssList" parameterType="map" resultType="map">
        /* EtcMapper.selectStDgnssList */
        select a1.id as dgnssId
             , a1.paper_idx as paperIdx
             , b1.id as dgnssResultId
             , a1.ord_no as ordNo
             , a1.dgnss_at as dgnssAt
             , b1.subm_at as submAt
             , b1.eak_at as eakAt
             , DATE_FORMAT(b1.subm_dt, "%Y. %m. %d.") as submDt
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
        where a1.cla_id = #{claId}
          and b1.stdt_id = #{stdtId}
    </select>

    <select id="selectStQuesList" resultType="map">
        /* EtcMapper.selectStQuesList */
        select aa.*
        from (
            select b1.`NO`
                , c1.QESITM_NM
                , count(*) over () as fullCount
            from `aidt_diagnosis`.`tb_dgnss_paper` a1
            inner join `aidt_diagnosis`.`tb_dgnss_paper_detail` b1 on a1.PAPER_IDX = b1.PAPER_IDX
            inner join `aidt_diagnosis`.`tb_dgnss_problem` c1 on b1.PROBLEM_IDX = c1.PROBLEM_IDX
            where 1=1
            <choose>
                <when test='param.paperIdx != null and param.paperIdx == 1'>
                    and a1.PAPER_IDX = 5
                    order by b1.`no`
                    limit 119
                </when>
                <otherwise>
                    and a1.PAPER_IDX = 6
                    order by b1.`no`
                </otherwise>
            </choose>
        ) aa
        limit #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <select id="selectStQuesListOrigin" resultType="map">
        /* EtcMapper.selectStQuesListOrigin */
        select b1.`NO`
             , c1.QESITM_NM
        from `aidt_diagnosis`.`tb_dgnss_paper` a1
             inner join `aidt_diagnosis`.`tb_dgnss_paper_detail` b1 on a1.PAPER_IDX = b1.PAPER_IDX
             inner join `aidt_diagnosis`.`tb_dgnss_problem` c1 on b1.PROBLEM_IDX = c1.PROBLEM_IDX
        where 1=1
          and a1.PAPER_IDX = 6
        order by b1.`no`
    </select>

    <select id="selectStDgnssOmr" parameterType="map" resultType="java.util.LinkedHashMap">
        /* EtcMapper.selectStDgnssOmr */
        select a1.id as dgnssResultId,
            a1.omr_id as omrIdx,
        <choose>
            <when test='paperIdx != null and paperIdx == "1"'>
                `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`,
                `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `20`,
                `21`, `22`, `23`, `24`, `25`, `26`, `27`, `28`, `29`, `30`,
                `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `39`, `40`,
                `41`, `42`, `43`, `44`, `45`, `46`, `47`, `48`, `49`, `50`,
                `51`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`,
                `61`, `62`, `63`, `64`, `65`, `66`, `67`, `68`, `69`, `70`,
                `71`, `72`, `73`, `74`, `75`, `76`, `77`, `78`, `79`, `80`,
                `81`, `82`, `83`, `84`, `85`, `86`, `87`, `88`, `89`, `90`,
                `91`, `92`, `93`, `94`, `95`, `96`, `97`, `98`, `99`, `100`,
                `101`, `102`, `103`, `104`, `105`, `106`, `107`, `108`, `109`, `110`,
                `111`, `112`, `113`, `114`, `115`, `116`, `117`, `118`, `119`, `120`,
                `121`, `122`, `123`, `124`
            </when>
            <otherwise>
                `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`,
                `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `20`,
                `21`, `22`, `23`, `24`, `25`, `26`, `27`, `28`, `29`, `30`,
                `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `39`, `40`,
                `41`, `42`, `43`, `44`, `45`, `46`, `47`, `48`, `49`, `50`,
                `51`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`,
                `61`, `62`, `63`, `64`, `65`, `66`, `67`, `68`, `69`, `70`,
                `71`, `72`, `73`, `74`, `75`, `76`, `77`
            </otherwise>
        </choose>
        from `aidt_diagnosis`.`tb_dgnss_result_info` a1
            left join `aidt_diagnosis`.`tb_dgnss_omr` b1 on a1.omr_id = b1.omr_idx
        where id = #{dgnssResultId}
    </select>

    <select id="selectPaperIdxFromResultId" parameterType="map" resultType="string">
        /* EtcMapper.selectPaperIdxFromResultId */
        select a1.paper_idx
        from aidt_diagnosis.tb_dgnss_info a1
             inner join aidt_diagnosis.tb_dgnss_result_info b1 on a1.id = b1.dgnss_id
        where b1.id = #{dgnssResultId}
    </select>

    <update id="updateStStart" parameterType="map">
        /* EtcMapper.updateStStart */
        update `aidt_diagnosis`.`tb_dgnss_result_info`
        set eak_stts_cd = 2
          , eak_at = 'Y'
          , eak_st_dt = now()
        where id = #{dgnssResultId}
    </update>

    <select id="selectPastOmrInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectPastOmrInfo */
        select a1.omr_id as pastOmrIdx
             , b1.MEM_ID as stdtId
             , b1.CLASS_NO as claId
        from `aidt_diagnosis`.`tb_dgnss_result_info` a1
             inner join `aidt_diagnosis`.`tb_dgnss_omr` b1 on a1.omr_id = b1.OMR_IDX
        where id = #{dgnssResultId}
    </select>

    <update id="updateDgnssResult" parameterType="map">
        /* EtcMapper.updateDgnssResult */
        update `aidt_diagnosis`.`tb_dgnss_result_info`
        set omr_id = #{omrIdx}
        where id = #{dgnssResultId}
    </update>

    <delete id="deleteDgnssOmr" parameterType="map">
        /* EtcMapper.deleteDgnssOmr */
        delete from `aidt_diagnosis`.`tb_dgnss_omr`
        where OMR_IDX = #{pastOmrIdx}
    </delete>


    <update id="updateStAnswer" parameterType="map">
        /* EtcMapper.updateStAnswer */
        update `aidt_diagnosis`.`tb_dgnss_omr` a1
        set
        <choose>
            <when test='no > 0 and no == 1'>`1` = #{answer}</when>
            <when test='no > 0 and no == 2'>`2` = #{answer}</when>
            <when test='no > 0 and no == 3'>`3` = #{answer}</when>
            <when test='no > 0 and no == 4'>`4` = #{answer}</when>
            <when test='no > 0 and no == 5'>`5` = #{answer}</when>
            <when test='no > 0 and no == 6'>`6` = #{answer}</when>
            <when test='no > 0 and no == 7'>`7` = #{answer}</when>
            <when test='no > 0 and no == 8'>`8` = #{answer}</when>
            <when test='no > 0 and no == 9'>`9` = #{answer}</when>
            <when test='no > 0 and no == 10'>`10` = #{answer}</when>
            <when test='no > 0 and no == 11'>`11` = #{answer}</when>
            <when test='no > 0 and no == 12'>`12` = #{answer}</when>
            <when test='no > 0 and no == 13'>`13` = #{answer}</when>
            <when test='no > 0 and no == 14'>`14` = #{answer}</when>
            <when test='no > 0 and no == 15'>`15` = #{answer}</when>
            <when test='no > 0 and no == 16'>`16` = #{answer}</when>
            <when test='no > 0 and no == 17'>`17` = #{answer}</when>
            <when test='no > 0 and no == 18'>`18` = #{answer}</when>
            <when test='no > 0 and no == 19'>`19` = #{answer}</when>
            <when test='no > 0 and no == 20'>`20` = #{answer}</when>
            <when test='no > 0 and no == 21'>`21` = #{answer}</when>
            <when test='no > 0 and no == 22'>`22` = #{answer}</when>
            <when test='no > 0 and no == 23'>`23` = #{answer}</when>
            <when test='no > 0 and no == 24'>`24` = #{answer}</when>
            <when test='no > 0 and no == 25'>`25` = #{answer}</when>
            <when test='no > 0 and no == 26'>`26` = #{answer}</when>
            <when test='no > 0 and no == 27'>`27` = #{answer}</when>
            <when test='no > 0 and no == 28'>`28` = #{answer}</when>
            <when test='no > 0 and no == 29'>`29` = #{answer}</when>
            <when test='no > 0 and no == 30'>`30` = #{answer}</when>
            <when test='no > 0 and no == 31'>`31` = #{answer}</when>
            <when test='no > 0 and no == 32'>`32` = #{answer}</when>
            <when test='no > 0 and no == 33'>`33` = #{answer}</when>
            <when test='no > 0 and no == 34'>`34` = #{answer}</when>
            <when test='no > 0 and no == 35'>`35` = #{answer}</when>
            <when test='no > 0 and no == 36'>`36` = #{answer}</when>
            <when test='no > 0 and no == 37'>`37` = #{answer}</when>
            <when test='no > 0 and no == 38'>`38` = #{answer}</when>
            <when test='no > 0 and no == 39'>`39` = #{answer}</when>
            <when test='no > 0 and no == 40'>`40` = #{answer}</when>
            <when test='no > 0 and no == 41'>`41` = #{answer}</when>
            <when test='no > 0 and no == 42'>`42` = #{answer}</when>
            <when test='no > 0 and no == 43'>`43` = #{answer}</when>
            <when test='no > 0 and no == 44'>`44` = #{answer}</when>
            <when test='no > 0 and no == 45'>`45` = #{answer}</when>
            <when test='no > 0 and no == 46'>`46` = #{answer}</when>
            <when test='no > 0 and no == 47'>`47` = #{answer}</when>
            <when test='no > 0 and no == 48'>`48` = #{answer}</when>
            <when test='no > 0 and no == 49'>`49` = #{answer}</when>
            <when test='no > 0 and no == 50'>`50` = #{answer}</when>
            <when test='no > 0 and no == 51'>`51` = #{answer}</when>
            <when test='no > 0 and no == 52'>`52` = #{answer}</when>
            <when test='no > 0 and no == 53'>`53` = #{answer}</when>
            <when test='no > 0 and no == 54'>`54` = #{answer}</when>
            <when test='no > 0 and no == 55'>`55` = #{answer}</when>
            <when test='no > 0 and no == 56'>`56` = #{answer}</when>
            <when test='no > 0 and no == 57'>`57` = #{answer}</when>
            <when test='no > 0 and no == 58'>`58` = #{answer}</when>
            <when test='no > 0 and no == 59'>`59` = #{answer}</when>
            <when test='no > 0 and no == 60'>`60` = #{answer}</when>
            <when test='no > 0 and no == 61'>`61` = #{answer}</when>
            <when test='no > 0 and no == 62'>`62` = #{answer}</when>
            <when test='no > 0 and no == 63'>`63` = #{answer}</when>
            <when test='no > 0 and no == 64'>`64` = #{answer}</when>
            <when test='no > 0 and no == 65'>`65` = #{answer}</when>
            <when test='no > 0 and no == 66'>`66` = #{answer}</when>
            <when test='no > 0 and no == 67'>`67` = #{answer}</when>
            <when test='no > 0 and no == 68'>`68` = #{answer}</when>
            <when test='no > 0 and no == 69'>`69` = #{answer}</when>
            <when test='no > 0 and no == 70'>`70` = #{answer}</when>
            <when test='no > 0 and no == 71'>`71` = #{answer}</when>
            <when test='no > 0 and no == 72'>`72` = #{answer}</when>
            <when test='no > 0 and no == 73'>`73` = #{answer}</when>
            <when test='no > 0 and no == 74'>`74` = #{answer}</when>
            <when test='no > 0 and no == 75'>`75` = #{answer}</when>
            <when test='no > 0 and no == 76'>`76` = #{answer}</when>
            <when test='no > 0 and no == 77'>`77` = #{answer}</when>
            <when test='no > 0 and no == 78'>`78` = #{answer}</when>
            <when test='no > 0 and no == 79'>`79` = #{answer}</when>
            <when test='no > 0 and no == 80'>`80` = #{answer}</when>
            <when test='no > 0 and no == 81'>`81` = #{answer}</when>
            <when test='no > 0 and no == 82'>`82` = #{answer}</when>
            <when test='no > 0 and no == 83'>`83` = #{answer}</when>
            <when test='no > 0 and no == 84'>`84` = #{answer}</when>
            <when test='no > 0 and no == 85'>`85` = #{answer}</when>
            <when test='no > 0 and no == 86'>`86` = #{answer}</when>
            <when test='no > 0 and no == 87'>`87` = #{answer}</when>
            <when test='no > 0 and no == 88'>`88` = #{answer}</when>
            <when test='no > 0 and no == 89'>`89` = #{answer}</when>
            <when test='no > 0 and no == 90'>`90` = #{answer}</when>
            <when test='no > 0 and no == 91'>`91` = #{answer}</when>
            <when test='no > 0 and no == 92'>`92` = #{answer}</when>
            <when test='no > 0 and no == 93'>`93` = #{answer}</when>
            <when test='no > 0 and no == 94'>`94` = #{answer}</when>
            <when test='no > 0 and no == 95'>`95` = #{answer}</when>
            <when test='no > 0 and no == 96'>`96` = #{answer}</when>
            <when test='no > 0 and no == 97'>`97` = #{answer}</when>
            <when test='no > 0 and no == 98'>`98` = #{answer}</when>
            <when test='no > 0 and no == 99'>`99` = #{answer}</when>
            <when test='no > 0 and no == 100'>`100` = #{answer}</when>
            <when test='no > 0 and no == 101'>`101` = #{answer}</when>
            <when test='no > 0 and no == 102'>`102` = #{answer}</when>
            <when test='no > 0 and no == 103'>`103` = #{answer}</when>
            <when test='no > 0 and no == 104'>`104` = #{answer}</when>
            <when test='no > 0 and no == 105'>`105` = #{answer}</when>
            <when test='no > 0 and no == 106'>`106` = #{answer}</when>
            <when test='no > 0 and no == 107'>`107` = #{answer}</when>
            <when test='no > 0 and no == 108'>`108` = #{answer}</when>
            <when test='no > 0 and no == 109'>`109` = #{answer}</when>
            <when test='no > 0 and no == 110'>`110` = #{answer}</when>
            <when test='no > 0 and no == 111'>`111` = #{answer}</when>
            <when test='no > 0 and no == 112'>`112` = #{answer}</when>
            <when test='no > 0 and no == 113'>`113` = #{answer}</when>
            <when test='no > 0 and no == 114'>`114` = #{answer}</when>
            <when test='no > 0 and no == 115'>`115` = #{answer}</when>
            <when test='no > 0 and no == 116'>`116` = #{answer}</when>
            <when test='no > 0 and no == 117'>`117` = #{answer}</when>
            <when test='no > 0 and no == 118'>`118` = #{answer}</when>
            <when test='no > 0 and no == 119'>`119` = #{answer}</when>
            <when test='no > 0 and no == 120'>`120` = #{answer}</when>
            <when test='no > 0 and no == 121'>`121` = #{answer}</when>
            <when test='no > 0 and no == 122'>`122` = #{answer}</when>
            <when test='no > 0 and no == 123'>`123` = #{answer}</when>
            <when test='no > 0 and no == 124'>`124` = #{answer}</when>
        </choose>
        where OMR_IDX = #{omrIdx}
    </update>

    <update id="updateStSubmit" parameterType="int">
        /* EtcMapper.updateStSubmit */
        update `aidt_diagnosis`.`tb_dgnss_result_info`
        set eak_stts_cd = 3
          , subm_at = 'Y'
          , subm_dt = now()
          , eak_ed_dt = now()
        where id = #{dgnssResultId}
    </update>

    <update id="updateDgnssAnswerJson">
        /* EtcMapper.updateDgnssAnswerJson */
        update `aidt_diagnosis`.`tb_dgnss_answer` aa
        set aa.ANSWERS = (
            select CONCAT('['
                       , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 1, OMR.1)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 2 , OMR.2)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 3 , OMR.3)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 4 , OMR.4)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 5 , OMR.5)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 6 , OMR.6)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 7 , OMR.7)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 8 , OMR.8)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 9 , OMR.9)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 10 , OMR.10)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 11 , OMR.11)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 12 , OMR.12)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 13 , OMR.13)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 14 , OMR.14)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 15 , OMR.15)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 16 , OMR.16)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 17 , OMR.17)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 18 , OMR.18)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 19 , OMR.19)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 20 , OMR.20)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 21 , OMR.21)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 22 , OMR.22)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 23 , OMR.23)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 24 , OMR.24)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 25 , OMR.25)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 26 , OMR.26)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 27 , OMR.27)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 28 , OMR.28)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 29 , OMR.29)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 30 , OMR.30)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 31 , OMR.31)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 32 , OMR.32)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 33 , OMR.33)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 34 , OMR.34)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 35 , OMR.35)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 36 , OMR.36)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 37 , OMR.37)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 38 , OMR.38)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 39 , OMR.39)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 40 , OMR.40)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 41 , OMR.41)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 42 , OMR.42)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 43 , OMR.43)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 44 , OMR.44)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 45 , OMR.45)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 46 , OMR.46)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 47 , OMR.47)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 48 , OMR.48)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 49 , OMR.49)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 50 , OMR.50)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 51 , OMR.51)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 52 , OMR.52)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 53 , OMR.53)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 54 , OMR.54)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 55 , OMR.55)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 56 , OMR.56)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 57 , OMR.57)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 58 , OMR.58)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 59 , OMR.59)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 60 , OMR.60)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 61 , OMR.61)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 62 , OMR.62)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 63 , OMR.63)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 64 , OMR.64)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 65 , OMR.65)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 66 , OMR.66)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 67 , OMR.67)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 68 , OMR.68)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 69 , OMR.69)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 70 , OMR.70)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 71 , OMR.71)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 72 , OMR.72)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 73 , OMR.73)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 74 , OMR.74)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 75 , OMR.75)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 76 , OMR.76)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 77 , OMR.77)
                       ,']') AS ANSWERS
            from `aidt_diagnosis`.`tb_dgnss_result_info` a1
                     inner join `aidt_diagnosis`.`tb_dgnss_omr` OMR on a1.omr_id = OMR.OMR_IDX
            where a1.id = #{dgnssResultId}
        )
        <if test='sameAnswerCheck'>
            , REPEATED_RESPONSE_YN = 'Y'
        </if>
        where aa.DGNSS_RESULT_ID = #{dgnssResultId}
    </update>

    <update id="updateDgnssAnswerJsonLearn">
        /* EtcMapper.updateDgnssAnswerJson */
        update `aidt_diagnosis`.`tb_dgnss_answer` aa
        set aa.ANSWERS = (
            select CONCAT('['
                       , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 1, OMR.1)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 2 , OMR.2)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 3 , OMR.3)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 4 , OMR.4)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 5 , OMR.5)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 6 , OMR.6)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 7 , OMR.7)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 8 , OMR.8)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 9 , OMR.9)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 10 , OMR.10)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 11 , OMR.11)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 12 , OMR.12)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 13 , OMR.13)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 14 , OMR.14)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 15 , OMR.15)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 16 , OMR.16)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 17 , OMR.17)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 18 , OMR.18)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 19 , OMR.19)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 20 , OMR.20)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 21 , OMR.21)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 22 , OMR.22)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 23 , OMR.23)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 24 , OMR.24)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 25 , OMR.25)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 26 , OMR.26)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 27 , OMR.27)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 28 , OMR.28)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 29 , OMR.29)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 30 , OMR.30)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 31 , OMR.31)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 32 , OMR.32)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 33 , OMR.33)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 34 , OMR.34)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 35 , OMR.35)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 36 , OMR.36)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 37 , OMR.37)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 38 , OMR.38)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 39 , OMR.39)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 40 , OMR.40)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 41 , OMR.41)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 42 , OMR.42)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 43 , OMR.43)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 44 , OMR.44)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 45 , OMR.45)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 46 , OMR.46)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 47 , OMR.47)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 48 , OMR.48)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 49 , OMR.49)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 50 , OMR.50)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 51 , OMR.51)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 52 , OMR.52)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 53 , OMR.53)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 54 , OMR.54)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 55 , OMR.55)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 56 , OMR.56)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 57 , OMR.57)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 58 , OMR.58)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 59 , OMR.59)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 60 , OMR.60)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 61 , OMR.61)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 62 , OMR.62)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 63 , OMR.63)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 64 , OMR.64)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 65 , OMR.65)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 66 , OMR.66)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 67 , OMR.67)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 68 , OMR.68)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 69 , OMR.69)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 70 , OMR.70)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 71 , OMR.71)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 72 , OMR.72)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 73 , OMR.73)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 74 , OMR.74)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 75 , OMR.75)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 76 , OMR.76)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 77 , OMR.77)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 78 , OMR.78)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 79 , OMR.79)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 80 , OMR.80)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 81 , OMR.81)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 82 , OMR.82)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 83 , OMR.83)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 84 , OMR.84)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 85 , OMR.85)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 86 , OMR.86)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 87 , OMR.87)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 88 , OMR.88)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 89 , OMR.89)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 90 , OMR.90)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 91 , OMR.91)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 92 , OMR.92)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 93 , OMR.93)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 94 , OMR.94)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 95 , OMR.95)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 96 , OMR.96)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 97 , OMR.97)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 98 , OMR.98)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 99 , OMR.99)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 100 , OMR.100)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 101 , OMR.101)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 102 , OMR.102)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 103 , OMR.103)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 104 , OMR.104)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 105 , OMR.105)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 106 , OMR.106)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 107 , OMR.107)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 108 , OMR.108)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 109 , OMR.109)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 110 , OMR.110)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 111 , OMR.111)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 112 , OMR.112)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 113 , OMR.113)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 114 , OMR.114)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 115 , OMR.115)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 116 , OMR.116)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 117 , OMR.117)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 118 , OMR.118)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 119 , OMR.119)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 120 , OMR.120)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 121 , OMR.121)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 122 , OMR.122)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 123 , OMR.123)
                       , ', ' , `aidt_diagnosis`.FN_GET_SCORE_BY_ANSWER(OMR.PAPER_IDX, 124 , OMR.124)
                       ,']') AS ANSWERS
            from `aidt_diagnosis`.`tb_dgnss_result_info` a1
                     inner join `aidt_diagnosis`.`tb_dgnss_omr` OMR on a1.omr_id = OMR.OMR_IDX
            where a1.id = #{dgnssResultId}
        )
        <if test='sameAnswerCheck'>
            , REPEATED_RESPONSE_YN = 'Y'
        </if>
        where aa.DGNSS_RESULT_ID = #{dgnssResultId}
    </update>

    <select id="selectAnswerIdx" parameterType="int" resultType="int">
        /* EtcMapper.selectAnswerIdx */
        select ANSWER_IDX
        from `aidt_diagnosis`.`tb_dgnss_answer`
        where DGNSS_RESULT_ID = #{dgnssResultId}
    </select>

    <select id="callProcMark" parameterType="int">
        call `aidt_diagnosis`.`PC_DGNSS_MARK`(#{answerIdx})
    </select>

    <select id="selectTcTrustInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectTcTrustInfo */
        select group_concat(aa.desirable) as desirable
             , group_concat(aa.reaction) as reaction
             , group_concat(aa.repeatResponse) as repeatResponse
        from (
                 select (select c1_2.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer` c1_2 where c1_2.DGNSS_RESULT_ID = b1.id and c1_2.COCH_DGNSS_QESITM01_SCORE <![CDATA[>]]> 65) as reaction
                      , (select c1_3.MEM_ID from aidt_diagnosis.tb_dgnss_answer c1_3 where c1_3.DGNSS_RESULT_ID = b1.id and c1_3.REPEATED_RESPONSE_YN = 'Y') as repeatResponse
                      <choose>
                          <when test='paperIdx != null and paperIdx == "1"'>
                              , (select c1_1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer` c1_1 where c1_1.DGNSS_RESULT_ID = b1.id and c1_1.COCH_DGNSS_QESITM02_SCORE <![CDATA[>]]> 65) as desirable
                          </when>
                          <otherwise>
                              , (select c1_1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer` c1_1 where c1_1.DGNSS_RESULT_ID = b1.id and c1_1.COCH_DGNSS_QESITM02_SCORE <![CDATA[>]]> 70) as desirable
                          </otherwise>
                      </choose>
                 from `aidt_diagnosis`.`tb_dgnss_info` a1
                          inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                          inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                          inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                          inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
                 where a1.id = #{dgnssId}
                   and a1.dgnss_at = 'N'
                   and b1.subm_at = 'Y'
                 order by sri.num
             ) aa
    </select>

    <select id="selectTcEtcInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectTcEtcInfo */
        select group_concat(aa.learningEg) as learningEg
             , group_concat(aa.emotionCtrl) as emotionCtrl
             , group_concat(aa.metaCog) as metaCog
             , group_concat(aa.cogLrnSkil) as cogLrnSkil
             , group_concat(aa.behvCtrl)  as behvCtrl
             , group_concat(aa.behvLrnSkil) as behvLrnSkil
        from (
                 select (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_1 where a1_1.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_1.T_SCORE) <![CDATA[<]]> 40 and a1_1.SECTION_ID = '20-22-01-01-0-0') as learningEg
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_2 where a1_2.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_2.T_SCORE) <![CDATA[<]]> 40 and a1_2.SECTION_ID = '20-22-01-02-0-0') as emotionCtrl
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_3 where a1_3.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_3.T_SCORE) <![CDATA[<]]> 40 and a1_3.SECTION_ID = '20-22-02-01-0-0') as metaCog
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_4 where a1_4.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_4.T_SCORE) <![CDATA[<]]> 40 and a1_4.SECTION_ID = '20-22-02-02-0-0') as cogLrnSkil
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_5 where a1_5.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_5.T_SCORE) <![CDATA[<]]> 40 and a1_5.SECTION_ID = '20-22-03-01-0-0') as behvCtrl
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '20-22-03-02-0-0') as behvLrnSkil
                 from `aidt_diagnosis`.`tb_dgnss_info` a1
                          inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                          inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                          inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                          inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
                 where a1.id = #{dgnssId}
                   and a1.dgnss_at = 'N'
                   and b1.subm_at = 'Y'
                 order by sri.num
             ) aa
    </select>

    <select id="selectDgnssAnswerReliability" parameterType="map" resultType="map">
        /* EtcMapper.selectDgnssAnswerReliability */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , case when c1.LS_ANS01 = 1 then '매우 낮음'
                    when c1.LS_ANS01 = 2 then '낮음'
                    when c1.LS_ANS01 = 3 then '보통'
                    when c1.LS_ANS01 = 4 then '높음'
                    when c1.LS_ANS01 = 5 then '매우 높음'
            end styPer
             , case when c1.LS_ANS02 = 1 then '매우 낮음'
                    when c1.LS_ANS02 = 2 then '낮음'
                    when c1.LS_ANS02 = 3 then '보통'
                    when c1.LS_ANS02 = 4 then '높음'
                    when c1.LS_ANS02 = 5 then '매우 높음'
            end satisPer
             , case when c1.LS_ANS03 = 1 then '흥미를 느껴서'
                    when c1.LS_ANS03 = 2 then '미래를 위해서'
                    when c1.LS_ANS03 = 3 then '대학 진학'
                    when c1.LS_ANS03 = 4 then '주변 기대 때문에'
                    when c1.LS_ANS03 = 5 then '모르겠음'
            end reason
             , case when c1.LS_ANS04 = 1 then '전혀 안함'
                    when c1.LS_ANS04 = 2 then '1시간 미만'
                    when c1.LS_ANS04 = 3 then '1~2시간'
                    when c1.LS_ANS04 = 4 then '2~3시간'
                    when c1.LS_ANS04 = 5 then '3시간 이상'
            end styTime
             , case when c1.LS_ANS05 = 1 then '친구'
                    when c1.LS_ANS05 = 2 then '선생님'
                    when c1.LS_ANS05 = 3 then '가족'
                    when c1.LS_ANS05 = 4 then '상담 전문가'
                    when c1.LS_ANS05 = 5 then '기타'
            end cnsl
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
             , c1.ANSWER_IDX AS answerIdx
        from `aidt_diagnosis`.`tb_dgnss_info` a1
             inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
             inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
             inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
             inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
        order by sri.num
    </select>

    <select id="selectDgnssAnswerReportMotivate" parameterType="map" resultType="map">
        /* EtcMapper.selectDgnssAnswerReportMotivate */
        <![CDATA[
        select row_number() over(order by sri.num) as rowNum
		     , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) < 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '20-22-01-0-0-0') as total
             , (select IF(ROUND(b1_2.T_SCORE) < 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '20-22-01-01-0-0') as learningEg
             , (select IF(ROUND(b1_3.T_SCORE) < 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '20-22-01-01-01-0') as mindSet
             , (select IF(ROUND(b1_4.T_SCORE) < 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '20-22-01-01-02-0') as efficacy
             , (select IF(ROUND(b1_5.T_SCORE) < 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '20-22-01-01-03-0') as motivation
             , (select IF(ROUND(b1_6.T_SCORE) < 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '20-22-01-02-0-0') as emotionCtrl
             , (select IF(ROUND(b1_7.T_SCORE) < 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '20-22-01-02-01-0') as gradeLvl
             , (select IF(ROUND(b1_8.T_SCORE) < 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '20-22-01-02-02-0') as styLvl
             , (select IF(ROUND(b1_9.T_SCORE) < 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '20-22-01-02-03-0') as failLvl
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                 inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
        order by sri.num
        ]]>
    </select>

    <select id="selectDgnssAnswerReportRecognition" parameterType="map" resultType="map">
        /* EtcMapper.selectDgnssAnswerReportRecognition */
        <![CDATA[
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) < 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '20-22-02-0-0-0') as total
             , (select IF(ROUND(b1_2.T_SCORE) < 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '20-22-02-01-0-0') as metaCog
             , (select IF(ROUND(b1_3.T_SCORE) < 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '20-22-02-01-01-0') as planAbil
             , (select IF(ROUND(b1_4.T_SCORE) < 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '20-22-02-01-02-0') as inspecAbil
             , (select IF(ROUND(b1_5.T_SCORE) < 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '20-22-02-01-03-0') as contrlAbil
             , (select IF(ROUND(b1_6.T_SCORE) < 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '20-22-02-02-0-0') as cogLrnSkil
             , (select IF(ROUND(b1_7.T_SCORE) < 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '20-22-02-02-01-0') as compreSkil
             , (select IF(ROUND(b1_8.T_SCORE) < 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '20-22-02-02-02-0') as intenSkil
             , (select IF(ROUND(b1_9.T_SCORE) < 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '20-22-02-02-03-0') as memrySkil
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                 inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
        order by sri.num
        ]]>
    </select>

    <select id="selectDgnssAnswerReportBehavior" parameterType="map" resultType="map">
        /* EtcMapper.selectDgnssAnswerReportBehavior */
        <![CDATA[
        select row_number() over(order by sri.num) as rowNum
		     , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) < 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '20-22-03-0-0-0') as total
             , (select IF(ROUND(b1_2.T_SCORE) < 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '20-22-03-01-0-0') as behvCtrl
             , (select IF(ROUND(b1_3.T_SCORE) < 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '20-22-03-01-01-0') as selfPraise
             , (select IF(ROUND(b1_4.T_SCORE) < 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '20-22-03-01-02-0') as help
             , (select IF(ROUND(b1_5.T_SCORE) < 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '20-22-03-01-03-0') as lrnConti
             , (select IF(ROUND(b1_6.T_SCORE) < 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '20-22-03-02-0-0') as behvLrnSkil
             , (select IF(ROUND(b1_7.T_SCORE) < 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '20-22-03-02-01-0') as styEnvi
             , (select IF(ROUND(b1_8.T_SCORE) < 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '20-22-03-02-02-0') as timeCtrl
             , (select IF(ROUND(b1_9.T_SCORE) < 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '20-22-03-02-03-0') as styAtti
             , (select IF(ROUND(b1_10.T_SCORE) < 0, 0, ROUND(b1_10.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_10 where b1_10.ANSWER_IDX = c1.ANSWER_IDX and b1_10.SECTION_ID = '20-22-03-02-04-0') as note
             , (select IF(ROUND(b1_11.T_SCORE) < 0, 0, ROUND(b1_11.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_11 where b1_11.ANSWER_IDX = c1.ANSWER_IDX and b1_11.SECTION_ID = '20-22-03-02-05-0') as test
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
                 inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
        order by sri.num
        ]]>
    </select>

    <select id="selectDgnssIdxList" parameterType="map" resultType="int">
        /* EtcMapper.selectDgnssIdxList */
        select id
        from `aidt_diagnosis`.`tb_dgnss_info`
        where cla_id = #{claId}
          and paper_idx = #{paperIdx}
          and dgnss_at = 'N'
        order by ord_no
    </select>

    <select id="selectClassTotalReport" resultType="map" parameterType="list">
        /* EtcMapper.selectClassTotalReport */
        select a1.id
        , a1.ord_no
        , concat('{', GROUP_CONCAT(
        concat('"', d1.SECTION_ID, '"', ' : ', d1.T_SCORE)), '}') as json
        from `aidt_diagnosis`.`tb_dgnss_info` a1
            inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
            inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
            inner join `aidt_diagnosis`.`tb_dgnss_answer_report` d1 on c1.ANSWER_IDX = d1.ANSWER_IDX
            inner join aidt_lms.tc_cla_mb_info tcmi on a1.cla_id = tcmi.cla_id and b1.stdt_id = tcmi.stdt_id and tcmi.actvtn_at = 'Y'
        where a1.id = #{dgnssId}
        and a1.dgnss_at = 'N'
        and b1.subm_at = 'Y'
        <if test='notExistsYn != null and notExistsYn == "N"'>
            and c1.COCH_DGNSS_QESITM01_MARK <![CDATA[<>]]> '주의' AND c1.COCH_DGNSS_QESITM02_MARK <![CDATA[<>]]> '주의' AND c1.REPEATED_RESPONSE_YN <![CDATA[<>]]> 'Y'
        </if>
        and IFNULL(c1.NO_ANS_CNT, 0) <![CDATA[<]]> 10
        group by a1.`id`, b1.stdt_id
    </select>

    <select id="selectStInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectStInfo */
        select a1.stdt_id as stdtId
             , date_format(a1.subm_dt,'%Y-%m-%d %H:%i:%s') as eakStDt
             , b1.DGNSS_ORD as ordNo
             , case when c1.sex = 'M' then '남자' else '여자' end gender
             , `aidt_lms`.F_CODE_NM('grade_cd', e1.grade_cd) as grade
             , CASE
                  WHEN e1.cla_nm LIKE '%반' THEN e1.cla_nm
                  WHEN e1.cla_nm IS NULL THEN '-'
                  ELSE CONCAT(e1.cla_nm, '반')
               END AS classCd
             , a1.id AS dgnssResultId
        from `aidt_diagnosis`.`tb_dgnss_info` a1_1
             inner join `aidt_diagnosis`.`tb_dgnss_result_info` a1 ON a1_1.id = a1.dgnss_id
             inner join `aidt_diagnosis`.`tb_dgnss_answer` b1 on a1.id = b1.DGNSS_RESULT_ID
             inner join `aidt_lms`.`user` c1 on a1.stdt_id = c1.user_id
             inner join aidt_lms.stdt_reg_info e1 on c1.user_id = e1.user_id
        where 1=1
        <choose>
            <when test='stdtId != null and stdtId != ""'>
                and a1.stdt_id = #{stdtId}
                and a1_1.paper_idx = #{paperIdx}
                and a1_1.ord_no = #{ordNo}
            </when>
            <otherwise>
                and a1.id = #{dgnssResultId}
            </otherwise>
        </choose>
    </select>

    <select id="selectStAnalysis" parameterType="map" resultType="string">
        /* EtcMapper.selectStAnalysis */
        SELECT concat('{', GROUP_CONCAT(
                concat('"', b1.SECTION_ID, '"', ' : "', IF(b1.T_SCORE <![CDATA[<]]> 0, 0, b1.T_SCORE), '_', b1.P_RANK, '"')), '}')
        FROM aidt_diagnosis.tb_dgnss_info tdi
             INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON tdi.id = tdri.dgnss_id
             INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer` a1 ON tdri.id = a1.DGNSS_RESULT_ID
             INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer_report` b1 ON a1.ANSWER_IDX = b1.ANSWER_IDX
        WHERE tdi.paper_idx = #{paperIdx}
          AND tdi.ord_no = #{ordNo}
          AND tdri.stdt_id = #{stdtId}
    </select>

    <select id="selectStrFactor" parameterType="map" resultType="string">
        /* EtcMapper.selectStrFactor */
        SELECT c1.SECTION_NM as strFactor
        FROM aidt_diagnosis.tb_dgnss_info tdi
            INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON tdi.id = tdri.dgnss_id
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer` a1 ON tdri.id = a1.DGNSS_RESULT_ID
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer_report` b1 ON a1.ANSWER_IDX = b1.ANSWER_IDX
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_section` c1 ON b1.SECTION_ID = c1.SECTION_ID
        WHERE tdi.paper_idx = #{paperIdx}
        AND tdi.ord_no = #{ordNo}
        AND tdri.stdt_id = #{stdtId}
        AND b1.`DEPTH` = 5
        AND b1.SECTION_ID in (<foreach item="sessionId" collection="sessionList" separator=",">#{sessionId}</foreach>)
        AND b1.T_SCORE <![CDATA[>=]]> 60
        ORDER BY b1.T_SCORE DESC
    </select>

    <select id="selectWeakFactor" parameterType="map" resultType="string">
        /* EtcMapper.selectWeakFactor */
        select c1.SECTION_NM as weakFactor
        FROM aidt_diagnosis.tb_dgnss_info tdi
            INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON tdi.id = tdri.dgnss_id
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer` a1 ON tdri.id = a1.DGNSS_RESULT_ID
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_answer_report` b1 ON a1.ANSWER_IDX = b1.ANSWER_IDX
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_section` c1 ON b1.SECTION_ID = c1.SECTION_ID
        WHERE tdi.paper_idx = #{paperIdx}
        AND tdi.ord_no = #{ordNo}
        AND tdri.stdt_id = #{stdtId}
        AND b1.`DEPTH` = 5
        AND b1.SECTION_ID in (<foreach item="sessionId" collection="sessionList" separator=",">#{sessionId}</foreach>)
        and b1.T_SCORE <![CDATA[<]]> 40
        order by b1.T_SCORE asc
    </select>

    <select id="conditionUserListSize" parameterType="map" resultType="int">
        /* EtcMapper.conditionUserListSize */
        select ifnull ( (
                            select sum(a1.cnt)
                            from (
                                     select case
                                                when count(*) <![CDATA[>=]]> 1 then 1
                                                else 0
                                                end cnt
                                     from aidt_lms.tdy_md_detail a1_1
                                              inner join aidt_lms.tdy_md_info b1_1 on a1_1.tdy_md_id = b1_1.id
                                     where a1_1.cla_id = #{claId}
                                       and date_format(a1_1.reg_dt, '%Y-%m-%d') = CURRENT_DATE()
                                       and b1_1.md_clor_se_cd in (1, 4)
                                     group by stdt_id
                                 ) a1
                        ), 0) as lowConditionCnt
    </select>

    <select id="conditionLvUserListSize" parameterType="map" resultType="int">
        /* EtcMapper.selectTchDsbdTaskList */
        with baseData as (select buildData.mamoym_id
                         , round(sum(case when errata = 1 then 100 else 0 end) / count(*), 2) as avg
                         , count(*)
                      from (select sdri.mamoym_id
                                 , if(sdrd.sub_mit_anw is not null or sdrd.sub_mit_anw_url is not null or
                                      sdrd.tch_errata_chg_at = 'Y', 'Y', 'N') as subm_at
                                 , sdrd.mrk_ty
                                 , sdrd.errata
                              from aidt_lms.tab_info ti
                                       inner join aidt_lms.std_dta_result_info sdri on sdri.textbk_tab_id = ti.id
                                       inner join aidt_lms.std_dta_result_detail sdrd
                                                  on sdrd.dta_result_id = sdri.id
                                                      and sdrd.src_detail_id = 0 /* 다른 문제 풀기 제외 */
                             where ti.id = (select id
                                              from aidt_lms.tab_info
                                             where crcul_id = (select crcul_id
                                                                 from aidt_lms.tc_lastlesson
                                                                where textbk_id = #{textbookId}
                                                                  and cla_id = #{claId}
                          )
                                               and textbk_id = #{textbookId}
                                               and cla_id = #{claId}
                                               and setCategory = 31
                                               and tab_nm = '교과서'
                                             limit 1)
                               and (if(sdrd.sub_mit_anw is not null or sdrd.sub_mit_anw_url is not null or
                                       sdrd.tch_errata_chg_at = 'Y', 'Y', 'N')) = 'Y') as buildData
                     group by mamoym_id)
        select count(*) as lowLvlCnt
          from baseData
         where 1 = 1
           and case
                   when avg >= 70 then 1
                   when avg > 30 then 2
                   else 3
                   end = 3
    </select>


    <select id="conditionLvUserListSize_back" parameterType="map" resultType="int">
        /* EtcMapper.selectTchDsbdTaskList */
        select
            count(*) as lowLvlCnt
        from aidt_lms.tc_cla_mb_info a
                 join aidt_lms.stdt_reg_info b on a.stdt_id = b.user_id
                 left join (
            select stdt_id, sum(usd_ach_scr) as usd_ach_scr, sum(rflt_actv_cnt) as rflt_actv_cnt, std_at
            from aidt_lms.usd_ach_src2_info
            where cla_id = #{claId}
              and textbk_id = #{textbookId}
            group by stdt_id
        ) c on a.stdt_id = c.stdt_id
        where a.cla_id = #{claId}
          and case
                  when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) >= 70 then 1
                  when round((c.usd_ach_scr / c.rflt_actv_cnt) * 100, 2) > 30 then 2
                  else 3
                  end = 3
          and c.std_at = 'Y'
          and a.actvtn_at = 'Y'
    </select>

    <select id="selectUserGoalCnt" parameterType="map" resultType="int">
        /* EtcMapper.selectUserGoalCnt */
        select ifnull ( (
                            select sum(a1.cnt)
                            from (
                                     select case
                                                when count(*) <![CDATA[>=]]> 1 then 1
                                                else 0
                                                end cnt
                                     from aidt_lms.gl_set_info a1_1
                                              inner join aidt_lms.gl_set_detail b1_1 on a1_1.id  = b1_1.gl_id
                                     where a1_1.cla_id = #{claId}
                                       and a1_1.user_ty = 'S'
                                       and b1_1.tch_chk_at = 'Y'
                                       and date_format(b1_1.mdfy_dt, '%Y-%m-%d') = CURRENT_DATE()
                                     group by a1_1.user_id
                                 ) a1
                        ), 0) as goalCnt
    </select>

    <select id="selectMetaStartYn" parameterType="map" resultType="string">
        /* EtcMapper.selectMetaStartYn */
        SELECT MAX(dgnss_at)
        FROM aidt_diagnosis.tb_dgnss_info
        WHERE cla_id = #{claId}
    </select>

    <update id="updateGoalTchChkAt" parameterType="map">
        /* EtcMapper.updateGoalTchChkAt */
        UPDATE gl_set_info a1
            INNER JOIN gl_set_detail b1 ON a1.id = b1.gl_id
            SET b1.tch_chk_at = 'N'
        WHERE a1.cla_id = #{claId}
    </update>

    <select id="selectTcUserInfo" parameterType="map">
        /* EtcMapper.selectTcUserInfo */
        SELECT a1.id AS TEST_IDX
             , DATE_FORMAT(a1.dgnss_ed_dt, '%Y-%m-%d') AS TEST_DT
             , DATE_FORMAT(a1.dgnss_ed_dt, '%Y년 %m월 %d일') AS TEST_DT_KO
             , b1.DGNSS_ID
             , CASE
                   WHEN b1.DGNSS_ID = 'DGNSS_20' THEN '자기조절학습검사'
                   ELSE '학습심리종합검사'
            END TEST_NM
             , CASE
                   WHEN c1.grade_cd LIKE '%학년' THEN c1.grade_cd
                   WHEN c1.grade_cd IS NULL THEN ''
                   ELSE CONCAT(c1.grade_cd, '학년')
            END MEM_GRADE_NM
            , CASE
                   WHEN c1.cla_nm LIKE '%반' THEN c1.cla_nm
                   WHEN c1.cla_nm IS NULL THEN '-'
                   ELSE CONCAT(c1.cla_nm, '반')
            END AS CLASS_NM
             , IFNULL(c1.schl_nm, '') AS SCH_NM
             , a1.ord_no AS TEST_ORD
             , (SELECT DATE_FORMAT(d1.dgnss_ed_dt , '%Y-%m-%d') FROM aidt_diagnosis.tb_dgnss_info d1 WHERE d1.cla_id = a1.cla_id AND d1.paper_idx = a1.paper_idx  AND d1.ord_no = 1) AS TEST_DT_FIRST
             , (SELECT d1.ord_no FROM aidt_diagnosis.tb_dgnss_info d1 WHERE d1.cla_id = a1.cla_id AND d1.paper_idx = a1.paper_idx  AND d1.ord_no = 1)  AS TEST_ORD_FIRST
             , e1.ptn_id AS ptnId
             , a1.file_url AS fileUrl
             , a1.cla_id AS claId
        FROM aidt_diagnosis.tb_dgnss_info a1
                 INNER JOIN aidt_diagnosis.tb_dgnss_paper b1 ON a1.paper_idx = b1.PAPER_IDX
                 INNER JOIN aidt_lms.tc_cla_info c1 ON a1.cla_id = c1.cla_id
                 INNER JOIN aidt_lms.user e1 ON a1.tc_id = e1.user_id
        WHERE a1.id = #{dgnssId}

    </select>

    <select id="getDgnssReportLS" parameterType="map" resultType="map">
        /* EtcMapper.getDgnssReportLS */
        SELECT DM.stdt_id
             , sri.num AS CLASS_NO
             , sri.flnm AS MEM_NM
             , u.sex AS MEM_GENDER
             , CASE
                   WHEN u.sex = 'M' THEN '남'
                   ELSE '여'
            END MEM_GENDER_NM
             , CASE
                   WHEN DA.REPEATED_RESPONSE_YN  = 'Y' THEN '예'
                   ELSE '아니오'
            END REPEATED_RESPONSE_YN
             , IFNULL(DA.COCH_DGNSS_QESITM01_MARK, '') AS COCH_DGNSS_QESITM01_MARK
             , IFNULL(DA.COCH_DGNSS_QESITM02_MARK, '') AS COCH_DGNSS_QESITM02_MARK
             , IFNULL(DA.NO_ANS_CNT, 0) AS NO_ANS_CNT
             , IFNULL(LS_ANS01, '') AS LS_ANS01
             , IFNULL(LS_ANS02, '') AS LS_ANS02
             , IFNULL(LS_ANS03, '') AS LS_ANS03
             , IFNULL(LS_ANS04, '') AS LS_ANS04
             , IFNULL(LS_ANS05, '') AS LS_ANS05
        FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                 INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id AND DA.DGNSS_RESULT_ID = DM.id
                 INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                 INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON DM.stdt_id = tcmi.stdt_id AND tdi.cla_id = tcmi.cla_id AND tcmi.actvtn_at = 'Y'
                 INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                 INNER JOIN aidt_lms.USER u ON sri.user_id = u.user_id
        WHERE DM.dgnss_id  = #{TEST_IDX}
          AND EXISTS (
                SELECT 1
                FROM aidt_diagnosis.tb_dgnss_answer_report tdar
                WHERE tdar.ANSWER_IDX = DA.ANSWER_IDX
            )
        ORDER BY sri.num
    </select>

    <select id="getDgnssReportSection" parameterType="map" resultType="map">
        /* EtcMapper.getDgnssReportSection */
        <if test='DGNSS_ID != null and DGNSS_ID == "DGNSS_10"'>
            SELECT A1.MEM_ID
                , sri.num AS CLASS_NO
                , IFNULL(B.T_SCORE_01_01, -1) AS T_SCORE_01_01
                , IFNULL(B.T_SCORE_01_02, -1) AS T_SCORE_01_02
                , IFNULL(B.T_SCORE_02_01, -1) AS T_SCORE_02_01
                , IFNULL(B.T_SCORE_02_02, -1) AS T_SCORE_02_02
                , IFNULL(B.T_SCORE_02_03, -1) AS T_SCORE_02_03
                , IFNULL(B.T_SCORE_03_01, -1) AS T_SCORE_03_01
                , IFNULL(B.T_SCORE_03_02, -1) AS T_SCORE_03_02
                , IFNULL(B.T_SCORE_03_03, -1) AS T_SCORE_03_03
                , IFNULL(B.T_SCORE_04_01, -1) AS T_SCORE_04_01
                , IFNULL(B.T_SCORE_04_02, -1) AS T_SCORE_04_02
                , IFNULL(B.T_SCORE_05_01, -1) AS T_SCORE_05_01
                , IFNULL(C.T_SCORE_01_01_01, -1) AS T_SCORE_01_01_01
                , IFNULL(C.T_SCORE_01_01_02, -1) AS T_SCORE_01_01_02
                , IFNULL(C.T_SCORE_01_01_03, -1) AS T_SCORE_01_01_03
                , IFNULL(C.T_SCORE_01_02_01, -1) AS T_SCORE_01_02_01
                , IFNULL(C.T_SCORE_01_02_02, -1) AS T_SCORE_01_02_02
                , IFNULL(C.T_SCORE_01_02_03, -1) AS T_SCORE_01_02_03
                , IFNULL(C.T_SCORE_01_02_04, -1) AS T_SCORE_01_02_04
                , IFNULL(C.T_SCORE_02_01_01, -1) AS T_SCORE_02_01_01
                , IFNULL(C.T_SCORE_02_01_02, -1) AS T_SCORE_02_01_02
                , IFNULL(C.T_SCORE_02_01_03, -1) AS T_SCORE_02_01_03
                , IFNULL(C.T_SCORE_02_02_01, -1) AS T_SCORE_02_02_01
                , IFNULL(C.T_SCORE_02_02_02, -1) AS T_SCORE_02_02_02
                , IFNULL(C.T_SCORE_02_02_03, -1) AS T_SCORE_02_02_03
                , IFNULL(C.T_SCORE_02_02_04, -1) AS T_SCORE_02_02_04
                , IFNULL(C.T_SCORE_02_02_05, -1) AS T_SCORE_02_02_05
                , IFNULL(C.T_SCORE_02_03_01, -1) AS T_SCORE_02_03_01
                , IFNULL(C.T_SCORE_02_03_02, -1) AS T_SCORE_02_03_02
                , IFNULL(C.T_SCORE_02_03_03, -1) AS T_SCORE_02_03_03
                , IFNULL(C.T_SCORE_02_03_04, -1) AS T_SCORE_02_03_04
                , IFNULL(C.T_SCORE_03_01_01, -1) AS T_SCORE_03_01_01
                , IFNULL(C.T_SCORE_03_01_02, -1) AS T_SCORE_03_01_02
                , IFNULL(C.T_SCORE_03_01_03, -1) AS T_SCORE_03_01_03
                , IFNULL(C.T_SCORE_03_02_01, -1) AS T_SCORE_03_02_01
                , IFNULL(C.T_SCORE_03_02_02, -1) AS T_SCORE_03_02_02
                , IFNULL(C.T_SCORE_03_02_03, -1) AS T_SCORE_03_02_03
                , IFNULL(C.T_SCORE_03_02_04, -1) AS T_SCORE_03_02_04
                , IFNULL(C.T_SCORE_03_02_05, -1) AS T_SCORE_03_02_05
                , IFNULL(C.T_SCORE_03_03_01, -1) AS T_SCORE_03_03_01
                , IFNULL(C.T_SCORE_03_03_02, -1) AS T_SCORE_03_03_02
                , IFNULL(C.T_SCORE_04_01_01, -1) AS T_SCORE_04_01_01
                , IFNULL(C.T_SCORE_04_01_02, -1) AS T_SCORE_04_01_02
                , IFNULL(C.T_SCORE_04_01_03, -1) AS T_SCORE_04_01_03
                , IFNULL(C.T_SCORE_04_02_01, -1) AS T_SCORE_04_02_01
                , IFNULL(C.T_SCORE_04_02_02, -1) AS T_SCORE_04_02_02
                , IFNULL(C.T_SCORE_04_02_03, -1) AS T_SCORE_04_02_03
                , IFNULL(C.T_SCORE_05_01_01, -1) AS T_SCORE_05_01_01
                , IFNULL(C.T_SCORE_05_01_02, -1) AS T_SCORE_05_01_02
                , IFNULL(C.T_SCORE_05_01_03, -1) AS T_SCORE_05_01_03
            FROM
            (
                SELECT a1_1.id
                    , a1_2.num
                    , a1_1.stdt_id AS MEM_ID
                FROM aidt_diagnosis.tb_dgnss_result_info a1_1
                    INNER JOIN aidt_lms.stdt_reg_info a1_2 ON a1_1.stdt_id = a1_2.user_id
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON a1_1.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON a1_1.stdt_id = tcmi.stdt_id AND tdi.cla_id = tcmi.cla_id AND tcmi.actvtn_at = 'Y'
                WHERE a1_1.dgnss_id = #{TEST_IDX}
                AND EXISTS (
                    SELECT 1
                    FROM aidt_diagnosis.tb_dgnss_answer_report tdar
                    WHERE tdar.ANSWER_IDX = a1_1.id
                )
            ) A1
            LEFT JOIN
            (
                SELECT DA.MEM_ID
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_03
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_01
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_02
                    , MAX(CASE WHEN DS.CLASS3 = '05' AND DS.CLASS4 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_05_01
                FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = 4
                GROUP BY DA.MEM_ID
            ) B ON A1.MEM_ID = B.MEM_ID
            LEFT JOIN
            (
                SELECT DA.MEM_ID
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '04' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_04
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '04' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_04
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '05' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_05
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '03' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_03_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '03' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_03_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '03' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_03_03
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '03' AND DS.CLASS5 = '04' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_03_04
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '04' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_04
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '05' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_05
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '03' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_03_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '03' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_03_02
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '04' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_04_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '05' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_05_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '05' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_05_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '05' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN  IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_05_01_03
                FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                    INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                    INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = 5
                GROUP BY DA.MEM_ID
            ) C ON B.MEM_ID = C.MEM_ID
            INNER JOIN aidt_lms.stdt_reg_info sri  ON A1.MEM_ID = sri.user_id
            ORDER BY A1.num;
        </if>
        <if test='DGNSS_ID != null and DGNSS_ID == "DGNSS_20"'>
                SELECT A1.MEM_ID
                    , sri.num AS CLASS_NO
                    , IFNULL(A.T_SCORE_01, -1) AS T_SCORE_01, IFNULL(A.T_SCORE_02, -1) AS T_SCORE_02, IFNULL(A.T_SCORE_03, -1) AS T_SCORE_03
                    , IFNULL(B.T_SCORE_01_01, -1) AS T_SCORE_01_01
                    , IFNULL(B.T_SCORE_01_02, -1) AS T_SCORE_01_02
                    , IFNULL(B.T_SCORE_02_01, -1) AS T_SCORE_02_01
                    , IFNULL(B.T_SCORE_02_02, -1) AS T_SCORE_02_02
                    , IFNULL(B.T_SCORE_03_01, -1) AS T_SCORE_03_01
                    , IFNULL(B.T_SCORE_03_02, -1) AS T_SCORE_03_02
                    , IFNULL(C.T_SCORE_01_01_01, -1) AS T_SCORE_01_01_01
                    , IFNULL(C.T_SCORE_01_01_02, -1) AS T_SCORE_01_01_02
                    , IFNULL(C.T_SCORE_01_01_03, -1) AS T_SCORE_01_01_03
                    , IFNULL(C.T_SCORE_01_02_01, -1) AS T_SCORE_01_02_01
                    , IFNULL(C.T_SCORE_01_02_02, -1) AS T_SCORE_01_02_02
                    , IFNULL(C.T_SCORE_01_02_03, -1) AS T_SCORE_01_02_03
                    , IFNULL(C.T_SCORE_02_01_01, -1) AS T_SCORE_02_01_01
                    , IFNULL(C.T_SCORE_02_01_02, -1) AS T_SCORE_02_01_02
                    , IFNULL(C.T_SCORE_02_01_03, -1) AS T_SCORE_02_01_03
                    , IFNULL(C.T_SCORE_02_02_01, -1) AS T_SCORE_02_02_01
                    , IFNULL(C.T_SCORE_02_02_02, -1) AS T_SCORE_02_02_02
                    , IFNULL(C.T_SCORE_02_02_03, -1) AS T_SCORE_02_02_03
                    , IFNULL(C.T_SCORE_03_01_01, -1) AS T_SCORE_03_01_01
                    , IFNULL(C.T_SCORE_03_01_02, -1) AS T_SCORE_03_01_02
                    , IFNULL(C.T_SCORE_03_01_03, -1) AS T_SCORE_03_01_03
                    , IFNULL(C.T_SCORE_03_02_01, -1) AS T_SCORE_03_02_01
                    , IFNULL(C.T_SCORE_03_02_02, -1) AS T_SCORE_03_02_02
                    , IFNULL(C.T_SCORE_03_02_03, -1) AS T_SCORE_03_02_03
                    , IFNULL(C.T_SCORE_03_02_04, -1) AS T_SCORE_03_02_04
                    , IFNULL(C.T_SCORE_03_02_05, -1) AS T_SCORE_03_02_05
                FROM (
                SELECT a1_1.id
                    , a1_2.num
                    , a1_1.stdt_id AS MEM_ID
                FROM aidt_diagnosis.tb_dgnss_result_info a1_1
                    INNER JOIN aidt_lms.stdt_reg_info a1_2 ON a1_1.stdt_id = a1_2.user_id
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON a1_1.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON a1_1.stdt_id = tcmi.stdt_id AND tdi.cla_id = tcmi.cla_id AND tcmi.actvtn_at = 'Y'
                WHERE a1_1.dgnss_id = #{TEST_IDX}
                AND EXISTS (
                    SELECT 1
                    FROM aidt_diagnosis.tb_dgnss_answer_report tdar
                    WHERE tdar.ANSWER_IDX = a1_1.id
                )
            ) A1
            LEFT JOIN
            (
                SELECT DA.MEM_ID
                    , IFNULL(MAX(CASE WHEN DS.CLASS3 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END), NULL) AS T_SCORE_01
                    , IFNULL(MAX(CASE WHEN DS.CLASS3 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END), NULL) AS T_SCORE_02
                    , IFNULL(MAX(CASE WHEN DS.CLASS3 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END), NULL) AS T_SCORE_03
                FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    LEFT JOIN aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                    LEFT JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = 3
                GROUP BY DA.MEM_ID
            ) A ON A1.MEM_ID = A.MEM_ID
            LEFT JOIN
            (
                SELECT DA.MEM_ID
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02
                FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                    INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                    INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = 4
                GROUP BY DA.MEM_ID
            ) B ON A.MEM_ID = B.MEM_ID
            LEFT JOIN
            (
                SELECT DA.MEM_ID
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '01' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_01_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '02' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_02_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '01' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_01_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '01' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_01
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '02' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_02
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '03' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_03
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '04' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_04
                    , MAX(CASE WHEN DS.CLASS3 = '03' AND DS.CLASS4 = '02' AND DS.CLASS5 = '05' THEN IF(ROUND(DAR.T_SCORE , 0) <![CDATA[<]]> 0, 0, ROUND(DAR.T_SCORE , 0)) END) AS T_SCORE_03_02_05
                FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                    INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                    INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = 5
                GROUP BY DA.MEM_ID
            ) C ON A.MEM_ID = C.MEM_ID
            INNER JOIN aidt_lms.stdt_reg_info sri  ON A1.MEM_ID = sri.user_id
            ORDER BY A1.num
        </if>
    </select>

    <select id="getDgnssReportValidity" parameterType="map" resultType="map">
        /* EtcMapper.getDgnssReportValidity */
        SELECT DM.stdt_id AS MEM_NM
             , DM.stdt_id AS MEM_ID
             , u.sex AS MEM_GENDER
             , DM.id
             , DA.COCH_DGNSS_QESITM01_MARK
             , DA.COCH_DGNSS_QESITM02_MARK
             , DA.NO_ANS_CNT
             , LS_ANS01
             , LS_ANS02
             , LS_ANS03
             , LS_ANS04
             , LS_ANS05
        FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
             INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.DGNSS_RESULT_ID = DM.id
             INNER JOIN aidt_lms.user u ON DM.stdt_id = u.user_id
             INNER JOIN aidt_lms.stdt_reg_info sri ON u.user_id = sri.user_id
             INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
             INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON sri.user_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y' AND tdi.cla_id = tcmi.cla_id
        WHERE DA.TEST_IDX = #{TEST_IDX}
        ORDER BY sri.num
    </select>

    <select id="getDgnssReportMem" parameterType="map" resultType="map">
        /* EtcMapper.getDgnssReportMem */
        <if test='DGNSS_ID != null and DGNSS_ID == "DGNSS_10"'>
            SELECT
                IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(', IFNULL(sri.num, '?'), ')') ORDER BY DM.id SEPARATOR ', ') AS QESITM02_MEM
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id  AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.COCH_DGNSS_QESITM02_MARK  =  '주의'
                    ORDER BY sri.num), '')  AS QESITM02_MEM
                , IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(',IFNULL(sri.num, '?'), ')') ORDER BY DM.id  SEPARATOR ', ') AS QESITM01_MEM
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.COCH_DGNSS_QESITM01_MARK  =  '주의'
                    ORDER BY sri.num), '') AS QESITM01_MEM
                , IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(', IFNULL(sri.num, '?'), ')') ORDER BY DM.id  SEPARATOR ', ') AS REPEATED_RESPONSE_YN
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.REPEATED_RESPONSE_YN = 'Y'
                    ORDER BY sri.num), '') AS REPEATED_RESPONSE_YN
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-01-01-0') AS SECTION_MEM_01_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-01-02-0') AS SECTION_MEM_01_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-01-03-0') AS SECTION_MEM_01_01_03

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-02-01-0') AS SECTION_MEM_01_02_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-02-02-0') AS SECTION_MEM_01_02_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-02-03-0') AS SECTION_MEM_01_02_03
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-01-02-04-0') AS SECTION_MEM_01_02_04

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-01-01-0') AS SECTION_MEM_02_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-01-02-0') AS SECTION_MEM_02_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-01-03-0') AS SECTION_MEM_02_01_03

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-02-01-0') AS SECTION_MEM_02_02_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-02-02-0') AS SECTION_MEM_02_02_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-02-03-0') AS SECTION_MEM_02_02_03
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-02-04-0') AS SECTION_MEM_02_02_04
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-02-05-0') AS SECTION_MEM_02_02_05

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-03-01-0') AS SECTION_MEM_02_03_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-03-02-0') AS SECTION_MEM_02_03_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-03-03-0') AS SECTION_MEM_02_03_03
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-02-03-04-0') AS SECTION_MEM_02_03_04

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-01-01-0') AS SECTION_MEM_03_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-01-02-0') AS SECTION_MEM_03_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-01-03-0') AS SECTION_MEM_03_01_03

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-02-01-0') AS SECTION_MEM_03_02_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-02-02-0') AS SECTION_MEM_03_02_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-02-03-0') AS SECTION_MEM_03_02_03
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-02-04-0') AS SECTION_MEM_03_02_04
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-02-05-0') AS SECTION_MEM_03_02_05

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-03-01-0') AS SECTION_MEM_03_03_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-03-03-02-0') AS SECTION_MEM_03_03_02

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-01-01-0') AS SECTION_MEM_04_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-01-02-0') AS SECTION_MEM_04_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-01-03-0') AS SECTION_MEM_04_01_03

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-02-01-0') AS SECTION_MEM_04_02_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-02-02-0') AS SECTION_MEM_04_02_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-04-02-03-0') AS SECTION_MEM_04_02_03

                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-05-01-01-0') AS SECTION_MEM_05_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-05-01-02-0') AS SECTION_MEM_05_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '10-22-05-01-03-0') AS SECTION_MEM_05_01_03

        </if>
        <if test='DGNSS_ID != null and DGNSS_ID == "DGNSS_20"'>
            SELECT
                IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(', IFNULL(sri.num, '?'), ')') ORDER BY DM.id SEPARATOR ', ') AS QESITM02_MEM
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id  AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.COCH_DGNSS_QESITM02_MARK  =  '주의'
                    ORDER BY sri.num), '')  AS QESITM02_MEM
                , IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(',IFNULL(sri.num, '?'), ')') ORDER BY DM.id  SEPARATOR ', ') AS QESITM01_MEM
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.COCH_DGNSS_QESITM01_MARK  =  '주의'
                    ORDER BY sri.num), '') AS QESITM01_MEM
                , IFNULL((SELECT GROUP_CONCAT(CONCAT(<choose><when test='isKeris or isVivaClass'>DM.stdt_id</when><otherwise>sri.flnm</otherwise></choose>, '(', IFNULL(sri.num, '?'), ')') ORDER BY DM.id  SEPARATOR ', ') AS REPEATED_RESPONSE_YN
                    FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
                    INNER JOIN aidt_diagnosis.tb_dgnss_result_info DM ON DA.MEM_ID = DM.stdt_id AND DM.dgnss_id = DA.TEST_IDX
                    INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON DM.dgnss_id = tdi.id
                    INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON tdi.cla_id = tcmi.cla_id AND DM.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
                    INNER JOIN aidt_lms.stdt_reg_info sri ON DM.stdt_id = sri.user_id
                    WHERE DA.TEST_IDX = #{TEST_IDX} AND DA.REPEATED_RESPONSE_YN = 'Y'
                    ORDER BY sri.num), '') AS REPEATED_RESPONSE_YN
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-01-01-0-0') AS SECTION_MEM_01_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-01-02-0-0') AS SECTION_MEM_01_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-02-01-0-0') AS SECTION_MEM_02_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-02-02-0-0') AS SECTION_MEM_02_02
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-03-01-0-0') AS SECTION_MEM_03_01
                , aidt_diagnosis.FN_GET_MEM_UNDER_TSCORE(#{TEST_IDX}, '20-22-03-02-0-0') AS SECTION_MEM_03_02
        </if>
    </select>

    <select id="getDgnssFirstTest" parameterType="map" resultType="string">
        /* EtcMapper.getDgnssFirstTest */
        SELECT tdi.id
        FROM aidt_diagnosis.tb_dgnss_info tdi
        WHERE tdi.tc_id = (
            SELECT tc_id
            FROM aidt_diagnosis.tb_dgnss_info tdi2
            WHERE tdi2.id = #{TEST_IDX}
        )
          AND tdi.paper_idx = (
            SELECT paper_idx
            FROM aidt_diagnosis.tb_dgnss_info tdi2
            WHERE tdi2.id = #{TEST_IDX}
        )
        AND tdi.cla_id = #{claId}
        AND tdi.ord_no = 1
    </select>

    <select id="getDgnssReportStatByTest" parameterType="map" resultType="map">
    /* EtcMapper.getDgnssReportStatByTest */
        SELECT STAT.SECTION_ID
        , DS.CLASS3, DS.CLASS4, DS.CLASS5, DS.DEPTH
        , ROUND(STAT.T_SCORE, 0) AS T_SCORE
        , IFNULL(ROUND(STAT_FIRST.T_SCORE, 0), 0) AS T_SCORE_FIRST
        , ROUND(STAT.T_SCORE, 0) - IFNULL(ROUND(STAT_FIRST.T_SCORE, 0), ROUND(STAT.T_SCORE, 0)) AS T_SCORE_GAP
        FROM (
        SELECT DAR.SECTION_ID, IF(ROUND(AVG(DAR.T_SCORE), 2) <![CDATA[<]]> 0, 0, ROUND(AVG(DAR.T_SCORE))) AS T_SCORE
        FROM aidt_diagnosis.tb_dgnss_info DT
        INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DT.id = DA.TEST_IDX
        INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR ON DA.ANSWER_IDX = DAR.ANSWER_IDX
        INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON DT.id = tdri.dgnss_id
        INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON DT.cla_id = tcmi.cla_id AND tdri.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
        WHERE DA.TEST_IDX = #{TEST_IDX} AND DAR.DEPTH = #{DEPTH}
        <if test='notExists != null and notExists == "N"'>
            AND DA.COCH_DGNSS_QESITM01_MARK <![CDATA[<>]]> '주의' AND DA.COCH_DGNSS_QESITM02_MARK <![CDATA[<>]]> '주의' AND DA.REPEATED_RESPONSE_YN <![CDATA[<>]]> 'Y'
        </if>
        GROUP BY DAR.SECTION_ID) STAT
        LEFT JOIN
        (SELECT DAR.SECTION_ID, IF(ROUND(AVG(DAR.T_SCORE), 2) <![CDATA[<]]> 0, 0, ROUND(AVG(DAR.T_SCORE))) AS T_SCORE
        FROM aidt_diagnosis.tb_dgnss_info DT
        INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DT.id = DA.TEST_IDX
        INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR ON DA.ANSWER_IDX = DAR.ANSWER_IDX
        INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON DT.id = tdri.dgnss_id
        INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON DT.cla_id = tcmi.cla_id AND tdri.stdt_id = tcmi.stdt_id AND tcmi.actvtn_at = 'Y'
        WHERE DA.TEST_IDX = #{FIRST_IDX}
        AND DAR.DEPTH = #{DEPTH}
        <if test='firstCancel != null and firstCancel == "N"'>
            AND DA.COCH_DGNSS_QESITM01_MARK <![CDATA[<>]]> '주의' AND DA.COCH_DGNSS_QESITM02_MARK <![CDATA[<>]]> '주의' AND DA.REPEATED_RESPONSE_YN <![CDATA[<>]]> 'Y'
        </if>
        GROUP BY DAR.SECTION_ID) STAT_FIRST  ON STAT.SECTION_ID = STAT_FIRST.SECTION_ID
        INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON STAT.SECTION_ID = DS.SECTION_ID
        ORDER BY STAT.SECTION_ID
    </select>

    <select id="selectStUserInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectStUserInfo */
        SELECT DA.ANSWER_IDX
             , DA.DGNSS_ID
             , DA.DGNSS_ORD
             , DA.PAPER_IDX
             , DA.GRP_IDX
             , DA.ASIGN_DT
             , DATE_FORMAT(DRI.subm_dt, '%Y-%m-%d') AS RSPNS_DT
             , DATE_FORMAT(DRI.subm_dt, '%Y년 %m월 %d일') AS RSPNS_DT_KO
             , DA.ANSWERS
             , DA.LS_ANS01,DA.LS_ANS02, DA.LS_ANS03, DA.LS_ANS04, DA.LS_ANS05
             , DA.TOTAL_NO
             , DA.COCH_DGNSS_QESITM01_SCORE, DA.COCH_DGNSS_QESITM01_MARK
             , DA.COCH_DGNSS_QESITM02_SCORE, DA.COCH_DGNSS_QESITM02_MARK
             , DA.COCH_DGNSS_QESITM03_SCORE, DA.COCH_DGNSS_QESITM03_MARK
             , DA.COCH_DGNSS_QESITM04_SCORE, DA.COCH_DGNSS_QESITM04_MARK
             , DRI.stdt_id AS MEM_ID
             , IFNULL(DA.SCH_GRADE,'') AS SCH_GRADE
             , IFNULL(sri.schl_nm, '') AS SCH_NM
             , IFNULL(sri.grade_cd, '') AS MEM_GRADE
             , CASE
                   WHEN sri.grade_cd LIKE '%학년' THEN sri.grade_cd
                   WHEN sri.grade_cd IS NULL THEN ''
                   ELSE CONCAT(sri.grade_cd, '학년')
                END MEM_GRADE_NM
             , CASE
                   WHEN DA.REPEATED_RESPONSE_YN  = 'Y' THEN '예'
                   ELSE '아니오'
                END REPEATED_RESPONSE_YN
             , IFNULL(sri.flnm, '') AS MEM_NM
             , IFNULL(sri.num, '') AS CLASS_NO
             , (SELECT IFNULL(ord_no, 0) FROM aidt_diagnosis.tb_dgnss_info tdi WHERE tdi.tc_id  = tci.user_id AND tdi.paper_idx = tdi2.paper_idx LIMIT 1) AS DGNSS_ORD_FIRST
             , U.ptn_id  AS ptnId
             , (SELECT
                    IFNULL(DRI.subm_dt, '')
                FROM aidt_diagnosis.tb_dgnss_result_info dri
                INNER JOIN aidt_diagnosis.tb_dgnss_info tdi ON dri.dgnss_id = tdi.id
                WHERE tdi.tc_id  = tci.user_id
                AND tdi.paper_idx = tdi2.paper_idx
                AND dri.stdt_id = DA.MEM_ID
                LIMIT 1
                ) AS RSPNS_DT_FIRST
             , DRI.file_url AS fileURL
             , DRI.id AS dgnssResultId
             , CASE
                   WHEN tci.cla_nm LIKE '%반' THEN tci.cla_nm
                   WHEN tci.cla_nm IS NULL THEN '-'
                   ELSE CONCAT(tci.cla_nm, '반')
                END AS CLASS_NM
             , tdi2.cla_id AS claId
        FROM aidt_diagnosis.TB_DGNSS_ANSWER DA
            INNER JOIN aidt_diagnosis.TB_DGNSS_RESULT_INFO DRI ON DA.DGNSS_RESULT_ID  = DRI.id
            INNER JOIN aidt_diagnosis.tb_dgnss_info tdi2 ON DRI.dgnss_id = tdi2.id
            INNER JOIN aidt_lms.USER U ON DRI.stdt_id = U.user_id
            INNER JOIN aidt_lms.stdt_reg_info sri ON U.user_id = sri.user_id
            INNER JOIN aidt_lms.tc_cla_mb_info tcmi ON sri.user_id = tcmi.stdt_id AND tdi2.cla_id = tcmi.cla_id AND tcmi.actvtn_at = 'Y'
            INNER JOIN aidt_lms.tc_cla_info tci ON tcmi.user_id = tci.user_id AND tdi2.cla_id = tci.cla_id
        WHERE DA.ANSWER_IDX = #{answerIdx}
    </select>

    <select id="getDgnssReport" parameterType="map" resultType="map">
        /* EtcMapper.getDgnssReport */
        SELECT DAR.SECTION_ID, DS.CLASS3, DS.CLASS4, DS.CLASS5, DAR.DEPTH
             , IF(ROUND(IFNULL(DAR.T_SCORE, -1), 0) <![CDATA[<]]> 0, 0, ROUND(IFNULL(DAR.T_SCORE, -1), 0)) AS T_SCORE
             , IFNULL(DAR.T_RANK, '?') AS T_RANK
             , IFNULL(DAR.T_SCRIPT, '검사 문항에 충분히 응답하지 않은 경우, 해석 결과를 제공할 수 없습니다.') AS T_SCRIPT
             , ROUND(IFNULL(DAR.P_RANK,-1) , 0) AS P_RANK
             , IFNULL(DAR.RANK_TOTAL, -1) AS RANK_TOTAL
             , IF(IFNULL(ROUND(DAR_FIRST.T_SCORE,0), 0) <![CDATA[<]]> 0, 0, IFNULL(ROUND(DAR_FIRST.T_SCORE,0), 0)) AS T_SCORE_FIRST
             , IFNULL(DAR_FIRST.T_RANK, '') AS T_RANK_FIRST
             , IFNULL(DAR_FIRST.T_SCRIPT, '') AS T_SCRIPT_FIRST
             , IFNULL(ROUND(DAR_FIRST.P_RANK, 0), 0) AS P_RANK_FIRST
             , (CASE WHEN DAR.T_SCORE IS NULL THEN - 1 ELSE (ROUND(DAR.T_SCORE,0) - IFNULL(ROUND(DAR_FIRST.T_SCORE,0), 0)) END) AS T_SCORE_GAP
        FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                 INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                 INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
                 LEFT JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA_FIRST
                           ON DA.MEM_ID = DA_FIRST.MEM_ID AND DA.DGNSS_ID = DA_FIRST.DGNSS_ID AND DA.DGNSS_ORD <![CDATA[<>]]> DA_FIRST.DGNSS_ORD AND DA_FIRST.DGNSS_ORD = 1
                 LEFT JOIN aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR_FIRST ON DA_FIRST.ANSWER_IDX = DAR_FIRST.ANSWER_IDX AND DAR.SECTION_ID = DAR_FIRST.SECTION_ID
        WHERE DAR.ANSWER_IDX = #{ANSWER_IDX} AND DAR.DEPTH = #{DEPTH}
    </select>

    <select id="getDgnssReportStudy" parameterType="map" resultType="map">
        (SELECT DS.FACTOR
              , DS.STUDY
              , DAR.SECTION_ID
              , DS.SECTION_NM
              , IF(ROUND(IFNULL(DAR.T_SCORE, -1), 0) <![CDATA[<]]> 0, 0, ROUND(IFNULL(DAR.T_SCORE, -1), 0)) AS T_SCORE
              , IFNULL(DAR.T_RANK, '') AS T_RANK
         FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                  INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                  INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
         WHERE DAR.ANSWER_IDX = #{ANSWER_IDX}
           AND DAR.DEPTH = 5
           AND DS.FACTOR = 'PER'
           AND DS.STUDY = 'STEP'
         ORDER BY DAR.T_SCORE DESC LIMIT 3)
        UNION ALL
        (SELECT DS.FACTOR
              , DS.STUDY
              , DAR.SECTION_ID
              , DS.SECTION_NM
              , IF(ROUND(IFNULL(DAR.T_SCORE, -1), 0) <![CDATA[<]]> 0, 0, ROUND(IFNULL(DAR.T_SCORE, -1), 0)) AS T_SCORE
              , IFNULL(DAR.T_RANK, '') AS T_RANK
         FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                  INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                  INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
         WHERE DAR.ANSWER_IDX = #{ANSWER_IDX}
           AND DAR.DEPTH = 5
           AND DS.FACTOR = 'PER'
           AND DS.STUDY = 'BLOCK'
         ORDER BY DAR.T_SCORE DESC LIMIT 3)
        UNION ALL
        (SELECT DS.FACTOR
              , DS.STUDY
              , DAR.SECTION_ID
              , DS.SECTION_NM
              , IF(ROUND(IFNULL(DAR.T_SCORE, -1), 0) <![CDATA[<]]> 0, 0, ROUND(IFNULL(DAR.T_SCORE, -1), 0)) AS T_SCORE
              , IFNULL(DAR.T_RANK, '') AS T_RANK
         FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                  INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                  INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
         WHERE DAR.ANSWER_IDX = #{ANSWER_IDX}
           AND DAR.DEPTH = 5
           AND DS.FACTOR = 'ENV'
           AND DS.STUDY = 'STEP'
         ORDER BY DAR.T_SCORE DESC LIMIT 3)
        UNION ALL
        (SELECT DS.FACTOR
              , DS.STUDY
              , DAR.SECTION_ID
              , DS.SECTION_NM
              , IF(ROUND(IFNULL(DAR.T_SCORE, -1), 0) <![CDATA[<]]> 0, 0, ROUND(IFNULL(DAR.T_SCORE, -1), 0)) AS T_SCORE
              , IFNULL(DAR.T_RANK, '') AS T_RANK
         FROM aidt_diagnosis.TB_DGNSS_ANSWER_REPORT DAR
                  INNER JOIN aidt_diagnosis.TB_DGNSS_ANSWER DA ON DAR.ANSWER_IDX = DA.ANSWER_IDX
                  INNER JOIN aidt_diagnosis.TB_DGNSS_SECTION DS ON DAR.SECTION_ID = DS.SECTION_ID
         WHERE DAR.ANSWER_IDX = #{ANSWER_IDX}
           AND DAR.DEPTH = 5
           AND DS.FACTOR = 'ENV'
           AND DS.STUDY = 'BLOCK'
         ORDER BY DAR.T_SCORE DESC LIMIT 3)
    </select>

    <update id="updateFileUrl" parameterType="map">
        /* EtcMapper.updateFileUrl */
        UPDATE aidt_diagnosis.tb_dgnss_result_info
        SET file_url = #{fileUrl}
        WHERE id = #{dgnssResultId}
    </update>

    <update id="updateFileUrlTch" parameterType="map">
        /* EtcMapper.updateFileUrlTch */
        UPDATE aidt_diagnosis.tb_dgnss_info
        SET file_url = #{fileUrl}
        WHERE id = #{dgnssId}
    </update>

    <select id="selectClassLernReport" parameterType="map" resultType="map">
        /* EtcMapper.selectClassLernReport */
        select a1.id
        , a1.ord_no
        , d1.SECTION_ID
        , d1.`DEPTH`
        , e1.SECTION_NM
        , IF(ROUND(avg(d1.T_SCORE)) <![CDATA[<]]> 0, 0, ROUND(avg(d1.T_SCORE))) as tScore
        from `aidt_diagnosis`.`tb_dgnss_info` a1
            inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
            inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
            inner join `aidt_diagnosis`.`tb_dgnss_answer_report` d1 on c1.ANSWER_IDX = d1.ANSWER_IDX
            INNER JOIN `aidt_diagnosis`.`tb_dgnss_section` e1 ON d1.SECTION_ID = e1.SECTION_ID
        where a1.cla_id  = #{claId}
        and a1.paper_idx = '1'
        and a1.dgnss_at = 'N'
        and b1.subm_at = 'Y'
        and a1.ord_no = #{ordNo}
        <if test='notExistsYn != null and notExistsYn == "N"'>
            AND c1.COCH_DGNSS_QESITM01_MARK <![CDATA[<>]]> '주의' AND c1.COCH_DGNSS_QESITM02_MARK <![CDATA[<>]]> '주의' AND c1.REPEATED_RESPONSE_YN <![CDATA[<>]]> 'Y'
        </if>
        GROUP BY a1.id, d1.SECTION_ID
    </select>

    <select id="selectStLernAnalysis" parameterType="map" resultType="map">
        /* EtcMapper.selectStLernAnalysis */
        SELECT b1.id AS dgnssResultId
             , d1.SECTION_ID
             , d1.`DEPTH`
             , e1.SECTION_NM
             , IF(d1.T_SCORE <![CDATA[<]]> 0, 0, d1.T_SCORE) as tScore
             , a1.ord_no
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
        FROM aidt_diagnosis.tb_dgnss_info a1
            INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
            INNER JOIN aidt_diagnosis.tb_dgnss_answer c1 ON b1.id = c1.DGNSS_RESULT_ID
            INNER JOIN aidt_diagnosis.tb_dgnss_answer_report d1 ON c1.ANSWER_IDX = d1.ANSWER_IDX
            INNER JOIN aidt_diagnosis.tb_dgnss_section e1 ON d1.SECTION_ID = e1.SECTION_ID
        WHERE a1.paper_idx = #{paperIdx}
          AND b1.stdt_id = #{stdtId}
          AND b1.subm_at = 'Y'
    </select>

    <select id="selectLernType2" resultType="map" parameterType="map">
        /* EtcMapper.selectLernType2 */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '10-22-01-01-0-0') as '10-22-01-01-0-0'
             , (select IF(ROUND(b1_2.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '10-22-01-01-01-0') as '10-22-01-01-01-0'
             , (select IF(ROUND(b1_3.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '10-22-01-01-02-0') as '10-22-01-01-02-0'
             , (select IF(ROUND(b1_4.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '10-22-01-01-03-0') as '10-22-01-01-03-0'
             , (select IF(ROUND(b1_5.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '10-22-01-02-0-0') as '10-22-01-02-0-0'
             , (select IF(ROUND(b1_6.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '10-22-01-02-01-0') as '10-22-01-02-01-0'
             , (select IF(ROUND(b1_7.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '10-22-01-02-02-0') as '10-22-01-02-02-0'
             , (select IF(ROUND(b1_8.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '10-22-01-02-03-0') as '10-22-01-02-03-0'
             , (select IF(ROUND(b1_9.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '10-22-01-02-04-0') as '10-22-01-02-04-0'
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.stdt_reg_info sri on b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
    </select>

    <select id="selectLernType3" resultType="map" parameterType="map">
        /* EtcMapper.selectLernType3 */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '10-22-02-01-0-0') as '10-22-02-01-0-0'
             , (select IF(ROUND(b1_2.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '10-22-02-01-01-0') as '10-22-02-01-01-0'
             , (select IF(ROUND(b1_3.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '10-22-02-01-02-0') as '10-22-02-01-02-0'
             , (select IF(ROUND(b1_4.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '10-22-02-01-03-0') as '10-22-02-01-03-0'
             , (select IF(ROUND(b1_5.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '10-22-02-02-0-0') as '10-22-02-02-0-0'
             , (select IF(ROUND(b1_6.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '10-22-02-02-01-0') as '10-22-02-02-01-0'
             , (select IF(ROUND(b1_7.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '10-22-02-02-02-0') as '10-22-02-02-02-0'
             , (select IF(ROUND(b1_8.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '10-22-02-02-03-0') as '10-22-02-02-03-0'
             , (select IF(ROUND(b1_9.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '10-22-02-02-04-0') as '10-22-02-02-04-0'
             , (select IF(ROUND(b1_10.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_10.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_10 where b1_10.ANSWER_IDX = c1.ANSWER_IDX and b1_10.SECTION_ID = '10-22-02-02-05-0') as '10-22-02-02-05-0'
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.stdt_reg_info sri on b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
    </select>

    <select id="selectLernType4" resultType="map" parameterType="map">
        /* EtcMapper.selectLernType4 */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '10-22-02-03-0-0') as '10-22-02-03-0-0'
             , (select IF(ROUND(b1_2.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '10-22-02-03-01-0') as '10-22-02-03-01-0'
             , (select IF(ROUND(b1_3.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '10-22-02-03-02-0') as '10-22-02-03-02-0'
             , (select IF(ROUND(b1_4.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '10-22-02-03-03-0') as '10-22-02-03-03-0'
             , (select IF(ROUND(b1_5.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '10-22-02-03-04-0') as '10-22-02-03-04-0'
             , (select IF(ROUND(b1_6.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '10-22-04-01-0-0') as '10-22-04-01-0-0'
             , (select IF(ROUND(b1_7.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '10-22-04-01-01-0') as '10-22-04-01-01-0'
             , (select IF(ROUND(b1_8.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '10-22-04-01-02-0') as '10-22-04-01-02-0'
             , (select IF(ROUND(b1_9.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '10-22-04-01-03-0') as '10-22-04-01-03-0'
             , (select IF(ROUND(b1_10.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_10.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_10 where b1_10.ANSWER_IDX = c1.ANSWER_IDX and b1_10.SECTION_ID = '10-22-04-02-0-0') as '10-22-04-02-0-0'
             , (select IF(ROUND(b1_11.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_11.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_11 where b1_11.ANSWER_IDX = c1.ANSWER_IDX and b1_11.SECTION_ID = '10-22-04-02-01-0') as '10-22-04-02-01-0'
             , (select IF(ROUND(b1_12.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_12.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_12 where b1_12.ANSWER_IDX = c1.ANSWER_IDX and b1_12.SECTION_ID = '10-22-04-02-02-0') as '10-22-04-02-02-0'
             , (select IF(ROUND(b1_13.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_13.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_13 where b1_13.ANSWER_IDX = c1.ANSWER_IDX and b1_13.SECTION_ID = '10-22-04-02-03-0') as '10-22-04-02-03-0'
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.stdt_reg_info sri on b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
    </select>

    <select id="selectLernType5" resultType="map" parameterType="map">
        /* EtcMapper.selectLernType5 */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '10-22-03-01-0-0') as '10-22-03-01-0-0'
             , (select IF(ROUND(b1_2.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '10-22-03-01-01-0') as '10-22-03-01-01-0'
             , (select IF(ROUND(b1_3.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '10-22-03-01-02-0') as '10-22-03-01-02-0'
             , (select IF(ROUND(b1_4.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '10-22-03-01-03-0') as '10-22-03-01-03-0'
             , (select IF(ROUND(b1_5.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '10-22-03-03-0-0') as '10-22-03-03-0-0'
             , (select IF(ROUND(b1_6.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '10-22-03-03-01-0') as '10-22-03-03-01-0'
             , (select IF(ROUND(b1_7.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '10-22-03-03-02-0') as '10-22-03-03-02-0'
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.stdt_reg_info sri on b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
    </select>

    <select id="selectLernType6" resultType="map" parameterType="map">
        /* EtcMapper.selectLernType6 */
        select row_number() over(order by sri.num) as rowNum
             , b1.stdt_id as stdtId
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
             , (select IF(ROUND(b1_1.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_1.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_1 where b1_1.ANSWER_IDX = c1.ANSWER_IDX and b1_1.SECTION_ID = '10-22-03-02-0-0') as '10-22-03-02-0-0'
             , (select IF(ROUND(b1_2.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_2.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_2 where b1_2.ANSWER_IDX = c1.ANSWER_IDX and b1_2.SECTION_ID = '10-22-03-02-01-0') as '10-22-03-02-01-0'
             , (select IF(ROUND(b1_3.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_3.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_3 where b1_3.ANSWER_IDX = c1.ANSWER_IDX and b1_3.SECTION_ID = '10-22-03-02-02-0') as '10-22-03-02-02-0'
             , (select IF(ROUND(b1_4.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_4.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_4 where b1_4.ANSWER_IDX = c1.ANSWER_IDX and b1_4.SECTION_ID = '10-22-03-02-03-0') as '10-22-03-02-03-0'
             , (select IF(ROUND(b1_5.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_5.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_5 where b1_5.ANSWER_IDX = c1.ANSWER_IDX and b1_5.SECTION_ID = '10-22-03-02-04-0') as '10-22-03-02-04-0'
             , (select IF(ROUND(b1_6.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_6.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_6 where b1_6.ANSWER_IDX = c1.ANSWER_IDX and b1_6.SECTION_ID = '10-22-03-02-05-0') as '10-22-03-02-05-0'
             , (select IF(ROUND(b1_7.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_7.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_7 where b1_7.ANSWER_IDX = c1.ANSWER_IDX and b1_7.SECTION_ID = '10-22-05-01-0-0') as '10-22-05-01-0-0'
             , (select IF(ROUND(b1_8.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_8.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_8 where b1_8.ANSWER_IDX = c1.ANSWER_IDX and b1_8.SECTION_ID = '10-22-05-01-01-0') as '10-22-05-01-01-0'
             , (select IF(ROUND(b1_9.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_9.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_9 where b1_9.ANSWER_IDX = c1.ANSWER_IDX and b1_9.SECTION_ID = '10-22-05-01-02-0') as '10-22-05-01-02-0'
             , (select IF(ROUND(b1_10.T_SCORE) <![CDATA[<]]> 0, 0, ROUND(b1_10.T_SCORE)) from `aidt_diagnosis`.`tb_dgnss_answer_report` b1_10 where b1_10.ANSWER_IDX = c1.ANSWER_IDX and b1_10.SECTION_ID = '10-22-05-01-03-0') as '10-22-05-01-03-0'
             , (select case when d1.sex = 'M' then '남자' else '여자' end from `aidt_lms`.`user` d1 where user_id = b1.stdt_id) as gender
        from `aidt_diagnosis`.`tb_dgnss_info` a1
                 inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                 inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                 inner join aidt_lms.stdt_reg_info sri on b1.stdt_id = sri.user_id
        where a1.id = #{dgnssId}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
    </select>

    <select id="selectLernEtcInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectLernEtcInfo */
        select group_concat(aa.aaa1) as '10-22-01-01-01-0'
            , group_concat(aa.aaa2) as '10-22-01-01-02-0'
            , group_concat(aa.aaa3) as '10-22-01-01-03-0'
            , group_concat(aa.bbb1) as '10-22-01-02-01-0'
            , group_concat(aa.bbb2)  as '10-22-01-02-02-0'
            , group_concat(aa.bbb3) as '10-22-01-02-03-0'
            , group_concat(aa.bbb4) as '10-22-01-02-04-0'
            , group_concat(aa.ccc1)  as '10-22-02-01-01-0'
            , group_concat(aa.ccc2) as '10-22-02-01-02-0'
            , group_concat(aa.ccc3) as '10-22-02-01-03-0'
            , group_concat(aa.ddd1)  as '10-22-02-02-01-0'
            , group_concat(aa.ddd2) as '10-22-02-02-02-0'
            , group_concat(aa.ddd3) as '10-22-02-02-03-0'
            , group_concat(aa.ddd4)  as '10-22-02-02-04-0'
            , group_concat(aa.ddd5) as '10-22-02-02-05-0'
            , group_concat(aa.eee1) as '10-22-02-03-01-0'
            , group_concat(aa.eee2)  as '10-22-02-03-02-0'
            , group_concat(aa.eee3) as '10-22-02-03-03-0'
            , group_concat(aa.eee4) as '10-22-02-03-04-0'
            , group_concat(aa.fff1)  as '10-22-03-01-01-0'
            , group_concat(aa.fff2) as '10-22-03-01-02-0'
            , group_concat(aa.fff3) as '10-22-03-01-03-0'
            , group_concat(aa.ggg1)  as '10-22-03-02-01-0'
            , group_concat(aa.ggg2) as '10-22-03-02-02-0'
            , group_concat(aa.ggg3) as '10-22-03-02-03-0'
            , group_concat(aa.ggg4)  as '10-22-03-02-04-0'
            , group_concat(aa.ggg5) as '10-22-03-02-05-0'
            , group_concat(aa.hhh1) as '10-22-03-03-01-0'
            , group_concat(aa.hhh2)  as '10-22-03-03-02-0'
            , group_concat(aa.iii1) as '10-22-04-01-01-0'
            , group_concat(aa.iii2) as '10-22-04-01-02-0'
            , group_concat(aa.iii3)  as '10-22-04-01-03-0'
            , group_concat(aa.jjj1) as '10-22-04-02-01-0'
            , group_concat(aa.jjj2) as '10-22-04-02-02-0'
            , group_concat(aa.jjj3)  as '10-22-04-02-03-0'
            , group_concat(aa.kkk1) as '10-22-05-01-01-0'
            , group_concat(aa.kkk2) as '10-22-05-01-02-0'
            , group_concat(aa.kkk3)  as '10-22-05-01-03-0'
        from (
                 select (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_1 where a1_1.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_1.T_SCORE) <![CDATA[<]]> 40 and a1_1.SECTION_ID = '10-22-01-01-01-0') as aaa1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_2 where a1_2.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_2.T_SCORE) <![CDATA[<]]> 40 and a1_2.SECTION_ID = '10-22-01-01-02-0') as aaa2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_3 where a1_3.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_3.T_SCORE) <![CDATA[<]]> 40 and a1_3.SECTION_ID = '10-22-01-01-03-0') as aaa3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_4 where a1_4.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_4.T_SCORE) <![CDATA[<]]> 40 and a1_4.SECTION_ID = '10-22-01-02-01-0') as bbb1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_5 where a1_5.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_5.T_SCORE) <![CDATA[<]]> 40 and a1_5.SECTION_ID = '10-22-01-02-02-0') as bbb2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-01-02-03-0') as bbb3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-01-02-04-0') as bbb4
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-01-01-0') as ccc1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-01-02-0') as ccc2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-01-03-0') as ccc3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-02-01-0') as ddd1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-02-02-0') as ddd2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-02-03-0') as ddd3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-02-04-0') as ddd4
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-02-05-0') as ddd5
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-03-01-0') as eee1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-03-02-0') as eee2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-03-03-0') as eee3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-02-03-04-0') as eee4
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-01-01-0') as fff1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-01-02-0') as fff2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-01-03-0') as fff3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-02-01-0') as ggg1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-02-02-0') as ggg2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-02-03-0') as ggg3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-02-04-0') as ggg4
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-02-05-0') as ggg5
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-03-01-0') as hhh1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-03-03-02-0') as hhh2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-01-01-0') as iii1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-01-02-0') as iii2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-01-03-0') as iii3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-02-01-0') as jjj1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-02-02-0') as jjj2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[<]]> 40 and a1_6.SECTION_ID = '10-22-04-02-03-0') as jjj3
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-05-01-01-0') as kkk1
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-05-01-02-0') as kkk2
                      , (select c1.MEM_ID from `aidt_diagnosis`.`tb_dgnss_answer_report` a1_6 where a1_6.ANSWER_IDX = c1.ANSWER_IDX and ROUND(a1_6.T_SCORE) <![CDATA[>=]]> 60 and a1_6.SECTION_ID = '10-22-05-01-03-0') as kkk3
                 from `aidt_diagnosis`.`tb_dgnss_info` a1
                          inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
                          inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
                          inner join aidt_lms.stdt_reg_info sri ON b1.stdt_id = sri.user_id
                 where a1.id = #{dgnssId}
                   and a1.dgnss_at = 'N'
                   and b1.subm_at = 'Y'
                 order by sri.num
             ) aa
    </select>

    <select id="selectDgnssStdtListFromDgnssId" parameterType="map" resultType="string">
        /* EtcMapper.selectDgnssStdtListFromDgnssId */
        SELECT stdt_id
        FROM aidt_diagnosis.tb_dgnss_result_info
        WHERE dgnss_id = #{dgnssId}
    </select>

    <update id="updateDgnssStatus" parameterType="map">
        /* EtcMapper.updateDgnssStatus */
        UPDATE aidt_diagnosis.tb_dgnss_info
        SET dgnss_at = 'Y'
          , file_url = ''
        WHERE id = #{dgnssId}
    </update>

    <select id="selectTcDgnssDetailInfo" parameterType="map" resultType="map">
        /* EtcMapper.selectTcDgnssDetailInfo */
        SELECT a1.`id` AS dgnssId
             , a1.ord_no AS ordNo
             , a1.cla_id AS claId
             , a1.dgnss_at AS dgnssAt
             , a1.paper_idx AS paperIdx
             , a1.dgnss_text AS dgnssText
             , DATE_FORMAT(a1.dgnss_st_dt, "%Y. %m. %d.") AS dgnssStDt
             , DATE_FORMAT(a1.dgnss_ed_dt, "%Y. %m. %d.") AS dgnssEdDt
             , sri.num AS num
             , GROUP_CONCAT(
                CASE WHEN b1.subm_at = 'N' THEN CONCAT(sri.num, '번 ', sri.flnm) END
                    SEPARATOR ', '
               ) AS notSubmStdtName
             , GROUP_CONCAT(
                CASE WHEN b1.subm_at = 'N' THEN b1.stdt_id END
                    SEPARATOR ', '
               ) AS notSubmStdtId
             , COUNT(DISTINCT CASE WHEN b1.subm_at = 'Y' THEN b1.stdt_id END) AS stSubmCnt
             , COUNT(DISTINCT c1.stdt_id) AS stTotalCnt
        FROM `aidt_diagnosis`.`tb_dgnss_info` a1
             INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
             INNER JOIN aidt_lms.tc_cla_mb_info c1 ON a1.cla_id = c1.cla_id AND b1.stdt_id = c1.stdt_id AND c1.actvtn_at = 'Y'
             INNER JOIN aidt_lms.stdt_reg_info sri ON c1.stdt_id = sri.user_id
        WHERE a1.id = #{dgnssId}
        GROUP BY a1.id
    </select>

    <select id="selectFirstDgnssResultId" parameterType="map" resultType="string">
        /* EtcMapper.selectFirstDgnssResultId */
        SELECT b1.id
        FROM aidt_diagnosis.tb_dgnss_info a1
                 INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 ON a1.id = b1.dgnss_id
        WHERE a1.ord_no = 1
          AND b1.stdt_id = #{stdtId}
          AND a1.paper_idx = #{paperIdx}
    </select>

    <select id="selectStTotalReport" resultType="map" parameterType="list">
        /* EtcMapper.selectStTotalReport */
        select a1.id
             , a1.ord_no
             , concat('{', GROUP_CONCAT(
                concat('"', d1.SECTION_ID, '"', ' : ', IF(d1.T_SCORE <![CDATA[<]]> 0, 0, d1.T_SCORE) )), '}'
                ) as json
             , c1.COCH_DGNSS_QESITM01_MARK as reaction
             , c1.COCH_DGNSS_QESITM02_MARK as desirable
             , c1.REPEATED_RESPONSE_YN as repeatResponse
        from `aidt_diagnosis`.`tb_dgnss_info` a1
            inner join `aidt_diagnosis`.`tb_dgnss_result_info` b1 on a1.id = b1.dgnss_id
            inner join `aidt_diagnosis`.`tb_dgnss_answer` c1 on b1.id = c1.DGNSS_RESULT_ID
            inner join `aidt_diagnosis`.`tb_dgnss_answer_report` d1 on c1.ANSWER_IDX = d1.ANSWER_IDX
        where a1.paper_idx = #{paperIdx}
          and a1.dgnss_at = 'N'
          and b1.subm_at = 'Y'
          and b1.stdt_id = #{stdtId}
        group by a1.`id`, b1.stdt_id
    </select>

    <update id="updateMonitFile" parameterType="map">
        /* EtcMapper.updateMonitFile */
        UPDATE aidt_lms.tc_cla_mb_info
        SET monit_file_url = CASE
                                WHEN monit_file_url IS NULL OR monit_file_url == '' THEN #{url}
                                ELSE monit_file_url
                            END
        WHERE stdt_id = #{userId}
          AND actvtn_at = 'Y'
    </update>

    <select id="selectGoalStdtList" parameterType="map" resultType="string">
        /* EtcMapper.selectGoalStdtList */
        SELECT a1.user_id
        FROM aidt_lms.gl_set_info a1
             INNER JOIN aidt_lms.tc_cla_mb_info b1 ON a1.user_id = b1.stdt_id AND a1.cla_id = b1.cla_id AND b1.actvtn_at = 'Y'
        WHERE a1.cla_id = #{claId}
          AND a1.user_ty = 'S'
        GROUP BY a1.user_id
    </select>

    <select id="selectGoalCrculIds" parameterType="map" resultType="int">
        /* EtcMapper.selectGoalCrculIds */
        SELECT crcul_id
        FROM aidt_lms.gl_set_info
        WHERE cla_id = #{claId}
          AND user_ty = 'T'
    </select>

    <update id="updateNullMonitFile" parameterType="map">
        /* EtcMapper.updateNullMonitFile */
        UPDATE aidt_lms.tc_cla_mb_info
        SET monit_file_url = ''
        WHERE stdt_id = #{stdtId}
          AND cla_id = #{claId}
    </update>

    <update id="updateUserInfo" parameterType="map">
        /* EtcMapper.updateUserInfo */
        UPDATE aidt_lms.stdt_reg_info
        SET flnm = #{nickNm}
            <if test='userNumber != null and userNumber != ""'>
                , num = #{userNumber}
            </if>
            <if test='gradeCd != null and gradeCd != ""'>
                , grade_cd = #{gradeCd}
            </if>
            <if test='claCd != null and claCd != ""'>
                , cla_nm = #{claCd}
            </if>
        WHERE user_id = #{stdtId}
    </update>

    <update id="updateUserGender" parameterType="map">
        /* EtcMapper.updateUserGender */
        UPDATE aidt_lms.user
        SET sex = #{gender}
        WHERE user_id = #{stdtId}
    </update>

    <insert id="insertVivaClassUser" parameterType="map">
        /* EtcMapper.insertVivaClassUser - 배치 삽입 */
        insert into `aidt_lms`.`user` (
            user_id, sso_tk, flnm, indv_info_agre_yn, user_se_cd, eml_addr, mbl_telno, ptn_id
            , sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn
            , rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
            , age14_blw_lgrp_ci_no, age14_blw_lgrp_name, use_terms_agree_yn, use_terms_agree_dt
        )
        values
        (
            #{stdtId}
            , '-'
            , #{nickNm}
            , 'Y'
            , 'S'
            , '-'
            , '-'
            , ''
            , 'M'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , 'vivaClassNickName'
            , now()
            , 'vivaClassNickName'
            , now()
            , '-'
            , '-'
            , '-'
            , '-'
        )
    </insert>

    <insert id="insertVivaClassStdtRegInfo" parameterType="list">
        /* EtcMapper.insertVivaClassStdtRegInfo - 배치 삽입 */
        insert into `aidt_lms`.`stdt_reg_info` (
            user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
            , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd, cla_nm
            , num, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        (
            #{stdtId}
            , #{nickNm}
            , 'E'
            , '-'
            , '-'
            , '-'
            , '-'
            , #{year}
            , '-'
            <choose>
                <when test='gradeCd != null and gradeCd != ""'>
                    , #{gradeCd}
                </when>
                <otherwise>
                    , '-'
                </otherwise>
            </choose>
            , '-'
            , '-'
            , '-'
            , '-'
            <choose>
                <when test='claCd != null and claCd != ""'>
                    , #{claCd}
                </when>
                <otherwise>
                    , '-'
                </otherwise>
            </choose>
            <choose>
                <when test='userNumber != null and userNumber != ""'>
                    , #{userNumber}
                </when>
                <otherwise>
                    , 0
                </otherwise>
            </choose>
            , 'vivaClassNickName'
            , NOW()
            , 'vivaClassNickName'
            , NOW()
        )
    </insert>

    <insert id="insertVivaClassTcClaMbInfo" parameterType="list">
        /* EtcMapper.insertVivaClassTcClaMbInfo - 배치 업서트 */
        insert into `aidt_lms`.`tc_cla_mb_info` (
            cla_id, user_id, stdt_id, yr, actvtn_at, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, mdfr
        )
        values
        (
            #{claId}, #{tcId}, #{stdtId}, #{year}, 'Y', 0, '-', #{gradeCd}, '-', #{claCd}, 'vivaClassNickName', 'vivaClassNickName'
        )
    </insert>

    <select id="selectDgnssEndTargetList" resultType="map">
        /* EtcMapper.selectDgnssEndTargetList */
        <![CDATA[
            SELECT id AS dgnssId
                , ord_no AS ordNo
                , tc_id AS userId
                , cla_id AS claId
                , paper_idx AS paperIdx
            FROM aidt_diagnosis.tb_dgnss_info
            WHERE DATE(reg_dt) = CURDATE() - INTERVAL 90 DAY
            AND dgnss_at = 'Y'
            AND dgnss_ed_dt IS NULL
            AND tc_id LIKE 'vivaclass%'
        ]]>
    </select>

    <select id="MakePdfTargetAnswerIdxList" parameterType="map" resultType="map">
        /* EtcMapper.MakePdfTargetAnswerIdxList */
        SELECT id
            , dgnss_id AS dgnssId
            , stdt_id AS stdtId
            , subm_at AS submAt
        FROM aidt_diagnosis.tb_dgnss_result_info
        WHERE dgnss_id = #{dgnssId}
        AND (file_url IS NULL OR file_url = '')
    </select>

    <select id="selectDgnssEnd3DaysLeftList" parameterType="map" resultType="map">
        /* EtcMapper.selectDgnssEnd3DaysLeftList */
        <![CDATA[
        SELECT tdi.id
             , paper_idx AS paperIdx
             , tc_id AS userId
             , tdi.cla_id AS claId
             , group_concat(tdri.stdt_id) AS notSubmStdtId
             , DATEDIFF(DATE_ADD(tdi.reg_dt, INTERVAL 90 DAY), CURDATE()) AS remainDay
        FROM aidt_diagnosis.tb_dgnss_info tdi
                 INNER JOIN aidt_diagnosis.tb_dgnss_result_info tdri ON tdi.id = tdri.dgnss_id
        WHERE tdi.dgnss_at = 'Y'
          AND tdi.dgnss_ed_dt IS NULL
          AND tdi.tc_id like 'vivaclass%'
          AND tdri.subm_at = 'N'
          AND DATEDIFF(DATE_ADD(tdi.reg_dt, INTERVAL 90 DAY), CURDATE()) IN (3, 2, 1)
        GROUP BY tdi.id
        ]]>
    </select>

    <update id="tcDgnssFileReset">
        /* EtcMapper.tcDgnssFileReset */
        UPDATE aidt_diagnosis.tb_dgnss_info
        SET file_url = ''
        WHERE file_url != ''
        AND file_url IS NOT NULL
    </update>

    <update id="stDgnssFileReset">
        /* EtcMapper.stDgnssFileReset */
        UPDATE aidt_diagnosis.tb_dgnss_result_info
        SET file_url = ''
        WHERE file_url != ''
        AND file_url IS NOT NULL
    </update>

    <select id="selectStdtIdFromDgnssResultId" parameterType="int" resultType="string">
        /* EtcMapper.selectStdtIdFromDgnssResultId */
        SELECT stdt_id
        FROM aidt_diagnosis.tb_dgnss_result_info
        WHERE id = #{dgnssResultId}
    </select>

    <select id="selectDgnssIdxListFromTcIdList" parameterType="java.util.List" resultType="int">
        /* EtcMapper.selectDgnssIdxListFromTcId */
        SELECT id
        FROM aidt_diagnosis.tb_dgnss_info
        WHERE tc_id IN (<foreach collection="list" item="user" separator=",">#{user}</foreach>)
    </select>

    <delete id="deleteTcDgnssAnswerReport" parameterType="java.util.List">
        /* EtcMapper.deleteTcDgnssAnswerReport */
        DELETE b1 FROM aidt_diagnosis.tb_dgnss_answer a1
            INNER JOIN aidt_diagnosis.tb_dgnss_answer_report b1 ON a1.ANSWER_IDX = b1.ANSWER_IDX
        WHERE a1.TEST_IDX IN
        <foreach collection="list" item="dgnssId" open="(" separator="," close=")">
            #{dgnssId}
        </foreach>
    </delete>

    <delete id="deleteTcDgnssAnswerWithDgnssIdList" parameterType="java.util.List">
        /* EtcMapper.deleteTcDgnssAnswerWithDgnssIdList */
        DELETE FROM aidt_diagnosis.tb_dgnss_answer
        WHERE TEST_IDX IN
        <foreach collection="list" item="dgnssId" open="(" separator="," close=")">
            #{dgnssId}
        </foreach>
    </delete>

    <delete id="deleteTcDgnssOmrWithDgnssIfList" parameterType="java.util.List">
        /* EtcMapper.deleteTcDgnssOmrWithDgnssIfList */
        DELETE a1 FROM aidt_diagnosis.tb_dgnss_omr a1
            INNER JOIN aidt_diagnosis.tb_dgnss_result_info b1 on b1.omr_id = a1.OMR_IDX
        WHERE b1.dgnss_id IN
        <foreach collection="list" item="dgnssId" open="(" separator="," close=")">
            #{dgnssId}
        </foreach>
    </delete>

    <delete id="deleteTcDgnssResultInfoWithDgnssIdList" parameterType="java.util.List">
        /* EtcMapper.deleteTcDgnssResultInfoWithDgnssIdList */
        DELETE FROM aidt_diagnosis.tb_dgnss_result_info
        WHERE dgnss_id IN
        <foreach collection="list" item="dgnssId" open="(" separator="," close=")">
            #{dgnssId}
        </foreach>
    </delete>

    <delete id="deleteTcDgnssInfoWithDgnssIdList" parameterType="java.util.List">
        /* EtcMapper.deleteTcDgnssInfoWithDgnssIdList */
        DELETE FROM aidt_diagnosis.tb_dgnss_info
        WHERE id IN
        <foreach collection="list" item="dgnssId" open="(" separator="," close=")">
            #{dgnssId}
        </foreach>
    </delete>

    <select id="conditionDashBoardUserList" parameterType="map" resultType="map">
        /* EtcMapper.conditionDashBoardUserList */
        SELECT a1.num
            , a1.stdtId
            , COUNT(a1.tdyMdId) AS cnt
            , GROUP_CONCAT(a1.tdyMdId ORDER BY a1.reg_dt ASC SEPARATOR ',') AS tdyMdIds
            , MAX(a1.reg_dt) AS regDt
        FROM (
            SELECT ROW_NUMBER() OVER (PARTITION BY tcmi.stdt_id ORDER BY sri.num) AS rn
                , sri.num
                , tcmi.stdt_id AS stdtId
                , DATE_FORMAT(tmd.reg_dt, '%Y-%m-%d %H:%i:%s') AS reg_dt
                , tmd.tdy_md_id AS tdyMdId
            FROM aidt_lms.tc_cla_mb_info tcmi
                INNER JOIN aidt_lms.stdt_reg_info sri ON tcmi.stdt_id = sri.user_id
                LEFT JOIN aidt_lms.tdy_md_detail tmd ON tmd.stdt_id = tcmi.stdt_id
                    <choose>
                        <when test='date != null and date != ""'>
                            AND date_format(tmd.reg_dt, '%Y-%m-%d') = #{date}
                        </when>
                        <otherwise>
                            AND date_format(tmd.reg_dt, '%Y-%m-%d') = CURRENT_DATE()
                        </otherwise>
                    </choose>
                LEFT JOIN aidt_lms.tdy_md_info tmi ON tmd.tdy_md_id = tmi.id
            WHERE tcmi.actvtn_at = 'Y'
            AND tcmi.cla_id = #{claId}
        ) a1
        WHERE rn <![CDATA[<=]]> 3
        GROUP BY a1.stdtId, a1.num
        <choose>
            <when test='"2".equals(num) and (updt == null or updt == "")'>
                ORDER BY a1.num DESC
            </when>
            <when test='(num == null and num == "") and (updt != null and "1".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL ASC,
                    CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN a1.num END ASC,
                    a1.num
            </when>
            <when test='(num == null and num == "") and (updt != null and "2".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL DESC,
                CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN MAX(a1.reg_dt) END DESC,
                a1.num
            </when>
            <when test='(num != null and "1".equals(num)) and (updt != null and "1".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL ASC,
                CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN a1.num END ASC,
                a1.num
            </when>
            <when test='(num != null and "1".equals(num)) and (updt != null and "2".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL DESC,
                CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN a1.num END ASC,
                a1.num
            </when>
            <when test='(num != null and "2".equals(num)) and (updt != null and "1".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL ASC,
                CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN a1.num END DESC,
                a1.num
            </when>
            <when test='(num != null and "2".equals(num)) and (updt != null and "2".equals(updt))'>
                ORDER BY MAX(a1.reg_dt) IS NULL DESC,
                CASE WHEN MAX(a1.reg_dt) IS NOT NULL THEN a1.num END DESC,
                a1.num
            </when>
            <otherwise>
                ORDER BY a1.num
            </otherwise>
        </choose>

    </select>

    <select id="getTodayInfo" resultType="map">
        /* EtcMapper.getTodayInfo */
        SELECT tmi.id
             , sc.code_nm AS color
             , sc2.code_nm AS codeNm
        FROM aidt_lms.tdy_md_info tmi
             INNER JOIN aidt_lms.se_code sc ON tmi.md_clor_se_cd = sc.code_cd AND sc.code_gb_cd = 'md_clor_se_cd'
             INNER JOIN aidt_lms.se_code sc2 ON tmi.md_se_cd = sc2.code_cd AND sc2.code_gb_cd = 'md_se_cd'
    </select>

    <select id="getTdyMdInfoDashBoard" parameterType="map" resultType="map">
        /* EtcMapper.getTdyMdInfoDashBoard */
    </select>

    <select id="selectExistsSameClaId" parameterType="map" resultType="int">
        /* EtcMapper.selectExistsSameClaId */
        SELECT count(*)
        FROM aidt_diagnosis.tb_dgnss_info
        WHERE paper_idx = #{paperIdx}
        AND ord_no = #{ordNo}
        AND tc_id = #{tcId}
        AND cla_id IN <foreach collection="vivaClaIdList" item="claId" open="(" separator="," close=")">#{claId}</foreach>
    </select>

    <select id="selectClaId" parameterType="map" resultType="string">
        /* IntegPublishMapper.selectClaId */
        SELECT cla_id
        FROM aidt_lms.tc_cla_info
        WHERE cla_id = #{claId}
    </select>

    <select id="selectUserExists" parameterType="map" resultType="int">
        /* IntegPublishMapper.selectUserExists */
        SELECT IFNULL( (
            SELECT id
            FROM aidt_lms.user
            WHERE user_id = #{userId}
        ), 0)
    </select>

    <insert id="insertUserInfo" parameterType="map">
        /* IntegPublishMapper.insertUserInfo */
        insert into `aidt_lms`.`user` (
              user_id, sso_tk, flnm, user_se_cd, indv_info_agre_yn, eml_addr, mbl_telno
            , sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn
            , rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            NULLIF(#{userId}, '')
            , '-'
            , IFNULL(#{flnm}, '-')
            , #{userDiv}
            , 'Y'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , #{rgtr}
            , now()
            , #{rgtr}
            , now()
        )
    </insert>

    <insert id="insertTcRegInfo" parameterType="map">
        /* IntegPublishMapper.insertTcRegInfo */
        insert into `aidt_lms`.`tc_reg_info` (
              user_id, flnm, user_stts_cd, schl_cd, schl_nm, brth
            , yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd
            , cla_cd, cla_nm, num, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
             #{userId}
            , #{userId}
            , 'E'
            , '-'
            , IFNULL(#{schlNm}, '-')
            , '-'
            , date_format(now(), '%Y')
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , 1
            , #{rgtr}
            , NOW()
            , #{rgtr}
            , NOW()
        )
    </insert>

    <insert id="insertTcClaInfo" parameterType="map">
        /* IntegPublishMapper.insertTcClaInfo */
        insert into `aidt_lms`.`tc_cla_info` (
            cla_id, user_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, estbl_sbjct_cd, course_rm_cd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{claId}
            , #{userId}
            , #{year}
            , 0
            , IFNULL(#{schlNm}, '-')
            , IFNULL(#{gradeCd}, '-')
            , '-'
            , IFNULL(#{claNm}, '-')
            , '-'
            , '-'
            , #{rgtr}
            , NOW()
            , #{rgtr}
            , NOW()
        )
    </insert>

    <insert id="insertStdtRegInfo" parameterType="map">
        /* IntegPublishMapper.insertStdtRegInfo */
        insert into `aidt_lms`.`stdt_reg_info`  (
              user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
            , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd, cla_nm
            , num, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{userId}
            , #{userId}
            , 'E'
            , '0'
            , '-'
            , IFNULL(#{schlNm}, '-')
            , '-'
            , #{year}
            , '-'
            , IFNULL(#{gradeCd}, '-')
            , '-'
            , '-'
            , '-'
            , IFNULL(#{claNm}, '-')
            , IFNULL(#{userNumber}, 0)
            , #{rgtr}
            , NOW()
            , #{rgtr}
            , NOW()
        )
    </insert>

    <insert id="insertTcClaMbInfo" parameterType="map">
        /* IntegPublishMapper.insertTcClaMbInfo */
        insert into `aidt_lms`.`tc_cla_mb_info` (
            cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{claId}
            , #{tcId}
            , #{userId}
            , #{year}
            , 0
            , IFNULL(#{schlNm}, '-')
            , IFNULL(#{gradeCd}, '-')
            , IFNULL(#{claNm}, '-')
            , '-'
            , #{rgtr}
            , NOW()
            , #{rgtr}
            , NOW()
        )
    </insert>

    <insert id="insertUserBulk" parameterType="list">
        /* IntegPublishMapper.insertUser - 배치 삽입 */
        insert into `aidt_lms`.`user` (
            user_id, sso_tk, flnm, user_se_cd, indv_info_agre_yn, eml_addr, mbl_telno
            , sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn
            , rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
        (
            NULLIF(#{user.userId}, '')
            , '-'
            , IFNULL(#{user.flnm}, '-')
            , #{user.userDiv}
            , 'Y'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , '-'
            , #{user.rgtr}
            , now()
            , #{user.rgtr}
            , now()
        )
        </foreach>
    </insert>

    <insert id="insertStdtRegInfoBulk" parameterType="list">
        /* IntegPublishMapper.insertStdtRegInfo - 배치 삽입 */
        insert into `aidt_lms`.`stdt_reg_info` (
            user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
            , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd, cla_nm
            , num, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
        (
            #{user.userId}
            ,  IFNULL(#{user.flnm}, '-')
            , 'E'
            , '0'
            , '-'
            , IFNULL(#{user.schlNm}, '-')
            , '-'
            , #{user.year}
            , '-'
            , IFNULL(#{user.gradeCd}, '-')
            , '-'
            , '-'
            , '-'
            , '-'
            , IFNULL(#{user.claNm}, 0)
            , IFNULL(#{user.userNumber}, 0)
            , #{user.rgtr}
            , NOW()
            , #{user.rgtr}
            , NOW()
        )
        </foreach>
    </insert>

    <insert id="insertTcClaInfoBulk" parameterType="list">
        /* IntegPublishMapper.insertTcClaInfoBulk - 배치 삽입 */
        insert into `aidt_lms`.`tc_cla_info` (
            cla_id, user_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, estbl_sbjct_cd, course_rm_cd, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
        (
            #{user.claId}
            , #{user.userId}
            , #{user.year}
            , 0
            , IFNULL(#{user.schlNm}, '-')
            , IFNULL(#{user.gradeCd}, '-')
            , '-'
            , IFNULL(#{user.claNm}, '-')
            , '-'
            , '-'
            , #{user.rgtr}
            , NOW()
            , #{user.rgtr}
            , NOW()
        )
        </foreach>
    </insert>

    <update id="upsertTcClaUserInfo" parameterType="list">
        INSERT INTO aidt_lms.tc_cla_user_info (
            cla_id, user_id, activeyn, ref_tc_type
        ) VALUES
        <foreach collection="list" item="user" separator=",">
        (
            #{user.claId}, #{user.userId}, 'Y', CASE WHEN EXISTS (SELECT 1 FROM tc_cla_info WHERE user_id = #{user.userId} AND cla_id = #{user.claId}) THEN 'Y' ELSE 'N' END
        )
        </foreach>
        ON DUPLICATE KEY UPDATE
        mdfy_dt = NOW()
    </update>

    <insert id="insertTcClaMbInfoBulk" parameterType="list">
        /* IntegPublishMapper.insertTcClaMbInfo - 배치 삽입 */
        insert into `aidt_lms`.`tc_cla_mb_info` (
            cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
        (
            #{user.claId}
            , #{user.tcId}
            , #{user.userId}
            , #{user.year}
            , 0
            , IFNULL(#{user.schlNm}, '-')
            , IFNULL(#{user.gradeCd}, '-')
            , '-'
            , IFNULL(#{user.claNm}, '-')
            , #{user.rgtr}
            , NOW()
            , #{user.rgtr}
            , NOW()
        )
        </foreach>
    </insert>

    <select id="selectTcClaStList" parameterType="map" resultType="string">
        /* IntegPublishMapper.selectTcClaStList */
        SELECT stdt_id
        FROM aidt_lms.tc_cla_mb_info
        WHERE cla_id = #{claId}
        AND actvtn_at = 'Y'
    </select>

    <select id="selectUserActiveYn" parameterType="map">
        /* IntegPublishMapper.selectUserActiveYn */
        SELECT actvtn_at
        FROM aidt_lms.tc_cla_mb_info
        WHERE stdt_id = #{userId}
          AND cla_id = #{claId}
          AND actvtn_at = 'Y'
    </select>

    <update id="updateActvTnBulk" parameterType="java.util.List">
        /* IntegPublishMapper.updateActvTnBulk */
        UPDATE aidt_lms.tc_cla_mb_info AS t
        JOIN (
        <foreach collection="list" item="u" separator=" UNION ALL ">
            SELECT
            #{u.claId}  AS cla_id,
            #{u.stdtId} AS stdt_id,
            #{u.actvtn} AS actvtn
        </foreach>
        ) AS v ON v.cla_id = t.cla_id AND v.stdt_id = t.stdt_id
        SET t.actvtn_at = v.actvtn
    </update>
</mapper>