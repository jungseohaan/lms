<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--suppress SqlDialectInspection -->
<mapper namespace="com.visang.aidt.lms.api.report.mapper.EvalReportMapper">

    <!-- 교사) 평가 리포트 요약 -->
    <select id="findEvlReportSummary" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findEvlReportSummary */
        SELECT
            ei.id as evlId,
            ei.evl_nm,
            COUNT(DISTINCT eii.evl_iem_id, eii.sub_id) as eamExmNum, /* 총 문항 수 */
            DATE_FORMAT(ei.evl_prg_dt, '%Y-%m-%d %H:%i:%s') as evl_prg_dt, /* 평가 시작 일시 */
            DATE_FORMAT(ei.evl_cp_dt, '%Y-%m-%d %H:%i:%s') as evl_cp_dt, /* 평가 종료 일시 */
            DATEDIFF(ei.evl_cp_dt, CURRENT_DATE) as deadline, /* 디데이 */
            (
                SELECT ifnull(
                               TIME_FORMAT(
                                       SEC_TO_TIME(
                                               ROUND(
                                                       AVG(
                                                               TIMESTAMPDIFF(
                                                                   SECOND
                                                                   , (
                                                                       CASE
                                                                           WHEN eri3.eak_st_dt IS NULL THEN (
                                                                               SELECT ei_sub.evl_prg_dt
                                                                               FROM aidt_lms.evl_info ei_sub
                                                                               WHERE ei_sub.id = eri3.evl_id
                                                                               LIMIT 1
                                                                           )
                                                                           ELSE eri3.eak_st_dt
                                                                       END
                                                                   )
                                                                   , (
                                                                       CASE
                                                                           WHEN eri3.subm_dt IS NULL THEN (
                                                                               (
                                                                                   CASE
                                                                                       WHEN eri3.eak_ed_dt IS NULL THEN (
                                                                                           (
                                                                                               CASE
                                                                                                   WHEN (
                                                                                                       SELECT erd_sub.eak_ed_dt
                                                                                                       FROM aidt_lms.evl_result_detail erd_sub
                                                                                                       WHERE erd_sub.evl_result_id = eri3.id
                                                                                                       ORDER BY erd_sub.eak_ed_dt DESC
                                                                                                       LIMIT 1
                                                                                                   ) IS NULL THEN ei.evl_cp_dt
                                                                                                   ELSE (
                                                                                                       SELECT erd_sub.eak_ed_dt
                                                                                                       FROM aidt_lms.evl_result_detail erd_sub
                                                                                                       WHERE erd_sub.evl_result_id = eri3.id
                                                                                                       ORDER BY erd_sub.eak_ed_dt DESC
                                                                                                       LIMIT 1
                                                                                                   )
                                                                                                   END
                                                                                               )
                                                                                           )
                                                                                       ELSE eri3.eak_ed_dt
                                                                                       END
                                                                                   )
                                                                               )
                                                                           ELSE eri3.subm_dt
                                                                       END
                                                                   )
                                                               )
                                                           )
                                                   )
                                           ), '%H:%i:%s'
                                   ), 0
                           )
                FROM aidt_lms.evl_result_info eri3
                WHERE eri3.evl_id = ei.id
                  AND eri3.subm_at = 'Y'
            ) AS avgSolvingTime, /* 평균 풀이시간 */
            (SELECT
                 COUNT(CASE WHEN eri2.subm_at = 'Y' THEN 1 END) * 100.0 / COUNT(*)
             FROM aidt_lms.evl_result_info eri2
             WHERE eri2.evl_id = ei.id
            ) as submissionRate, /* 제출률 */
            (SELECT COUNT(*)
             FROM aidt_lms.evl_result_info eri2
             WHERE eri2.evl_id = ei.id
            ) as totalStudents, /* 총 학생수 */
            (SELECT COUNT(*)
             FROM aidt_lms.evl_result_info eri2
             WHERE eri2.evl_id = ei.id
               AND eri2.subm_at = 'Y'
            ) as submittedStudents /* 제출한 학생 수 */
            , ei.tim_st_at
            , ei.tim_time
        FROM aidt_lms.evl_info ei
        INNER JOIN aidt_lms.evl_iem_info eii
            ON ei.id = eii.evl_id
        INNER JOIN aidt_lms.evl_result_info eri
            ON ei.id = eri.evl_id
        WHERE 1=1
          AND ei.id = #{evlId}
        --  AND eri.subm_at = 'Y' /* 과제쪽은 이 조건이 없는데, 왜 평가쪽에만 이 조건 들어가있는지 추후 이슈가 생기면 확인 필요 (05/08) */
        GROUP BY ei.id
    </select>

    <!-- 학생) 평가 리포트 요약 -->
    <select id="findStntEvlReportSummary" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findStntEvlReportSummary */
        SELECT
            COUNT(DISTINCT erd.evl_iem_id,sub_id) as eamExmNum
             , ei.evl_prg_dt /* 평가 시작 일시 */
             , ei.evl_cp_dt /* 평가 종료 일시 */
             , DATEDIFF(ei.pd_evl_ed_dt, CURRENT_DATE) as deadline /* 디데이 */
             , if (eri.subm_at = 'Y', TIME_FORMAT(
                SEC_TO_TIME(
                    ROUND(
                        TIMESTAMPDIFF(
                            SECOND
                            , (
                                CASE
                                    WHEN eri.eak_st_dt IS NULL THEN ei.evl_prg_dt
                                    ELSE eri.eak_st_dt
                                END
                            )
                            , (
                                CASE
                                    WHEN eri.subm_dt IS NULL THEN (
                                        (
                                            CASE
                                                WHEN eri.eak_ed_dt IS NULL THEN (
                                                    (
                                                        CASE
                                                            WHEN erd.eak_ed_dt IS NULL THEN ei.evl_cp_dt
                                                            ELSE erd.eak_ed_dt
                                                            END
                                                        )
                                                    )
                                                ELSE eri.eak_ed_dt
                                                END
                                            )
                                        )
                                    ELSE eri.subm_dt
                                END
                            )
                        )
                    )
                ), '%H:%i:%s'
            ), null) AS solvingTime /* 풀이시간 */
             ,

            ifnull(
                ROUND(
                    <choose>
                        <when test="isStntOnly != null and isStntOnly !=''">
                            SUM(CASE erd.errata WHEN 1 THEN 1 WHEN 3 THEN 0.5 END)
                            / COUNT(CASE WHEN erd.errata in (1,2,3) and eri.subm_at = 'Y' THEN 1 END)
                        </when>
                        <otherwise>
                            SUM(CASE aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) WHEN 1 THEN 1 WHEN 3 THEN 0.5 END)
                            / COUNT(CASE WHEN aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) in (1,2,3) and eri.subm_at = 'Y' THEN 1 END)
                        </otherwise>
                    </choose>
                * 100, 2)
                , 0
               ) AS correctRate/* 정답률 */
             , eri.subm_at /* 학생 제출 여부 */
             , if (eri.subm_at = 'Y', DATE_FORMAT( CASE
                  WHEN eri.subm_dt IS NULL THEN (
                      (
                          CASE
                              WHEN eri.eak_ed_dt IS NULL THEN (
                                  (
                                      CASE
                                          WHEN (
                                              SELECT erd_sub.eak_ed_dt
                                              FROM aidt_lms.evl_result_detail erd_sub
                                              WHERE erd_sub.evl_result_id = eri.id
                                              ORDER BY erd_sub.eak_ed_dt DESC
                                              LIMIT 1
                                      ) IS NULL THEN ei.evl_cp_dt
                                           ELSE (
                                               SELECT erd_sub.eak_ed_dt
                                               FROM aidt_lms.evl_result_detail erd_sub
                                               WHERE erd_sub.evl_result_id = eri.id
                                               ORDER BY erd_sub.eak_ed_dt DESC
                                               LIMIT 1
                                           )
                                           END
                                          )
                                      )
                                  ELSE eri.eak_ed_dt
                            END
                            ))
                            ELSE eri.subm_dt
                            end,
                    '%Y-%m-%d %H:%i:%s'
                ), null) AS subm_dt
             , ei.tim_time /* 주어진 타이머 */
             , ei.sets_id
        FROM aidt_lms.evl_result_detail erd
        INNER JOIN aidt_lms.evl_result_info eri
            ON eri.id = erd.evl_result_id
        INNER JOIN aidt_lcms.article a
            ON a.id = erd.evl_iem_id
        INNER JOIN aidt_lms.evl_info ei
            ON eri.evl_id = ei.id
        where 1=1
            AND ei.id = #{evlId}
            AND eri.mamoym_id = #{stntId}
    </select>

    <!-- 교사) 리포트 요약 > 평균 정답률 -->
    <select id="findAvgCorrectRateInfo" parameterType="map" resultType="camelHashMap" >
        /* EvalReportMapper.findAvgCorrectRateInfo */
        SELECT ROUND(SUM(CASE aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) WHEN 1 THEN 1 WHEN 3 THEN 0.5 END)
                         / COUNT(CASE WHEN aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) in (1,2,3) THEN 1 END) * 100, 2
               ) AS avgCorrectRate
        FROM aidt_lms.evl_result_info eri
            INNER JOIN aidt_lms.evl_result_detail erd ON erd.evl_result_id = eri.id
        WHERE eri.evl_id = #{evlId}
          and eri.subm_at = 'Y'
    </select>

    <!-- 평가 미제출 학생 목록 조회 -->
    <select id="findUnsubmittedStudentsByEvlId" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findUnsubmittedStudentsByEvlId */
        SELECT eri.mamoym_id, u.flnm
        FROM aidt_lms.evl_info ei
        INNER JOIN aidt_lms.evl_result_info eri
            ON ei.id = eri.evl_id
        INNER JOIN aidt_lms.`user` u
            ON eri.mamoym_id = u.user_id
        INNER JOIN aidt_lms.stdt_reg_info sri
            ON u.user_id = sri.user_id
        WHERE 1=1
            AND ei.id = #{evlId}
            AND eri.subm_at = 'N'
    </select>

    <!-- 평가 리포트 목록 조회 -->
    <select id="findEvalList" parameterType="pagingParam" resultType="camelHashMap">
        /* EvalReportMapper.findEvalList */
        SELECT
            COUNT(*) OVER () AS fullCount,
            ei.id,
            ei.evl_nm,
            ei.evl_se_cd,
            (
                SELECT code_nm
                FROM aidt_lms.se_code a
                WHERE a.code_cd = ei.eam_mth
                  AND a.code_gb_cd = 'eam_mth'
            ) AS eam_mth, /* 출제방법 */
            ei.tmpr_strg_at, /* 임시저장 여부 */
            ei.evl_stts_cd, /* 평가상태 */
            CASE
                WHEN ei.evl_stts_cd = 2
                THEN aidt_lms.F_CODE_NM('evl_stts_cd', ei.evl_stts_cd)
                WHEN (
                    SELECT
                        IF(COUNT(1) = SUM(IF(erd.mrk_ty = 3, 1, 0) = 1), 'T', 'F')
                    FROM aidt_lms.evl_result_info eri
                    JOIN aidt_lms.evl_result_detail erd
                        ON eri.id = erd.evl_result_id
                    WHERE eri.evl_id = ei.id
                    GROUP BY eri.evl_id
                ) = 'F'
                THEN (
                    SELECT
                        CASE
                            WHEN COUNT(CASE WHEN eri2.eak_stts_cd != 5 THEN 1 END) > 0
                            THEN '채점 필요'
                            ELSE '채점 완료'
                        END
                    FROM aidt_lms.evl_result_info eri2
                    WHERE eri2.evl_id = ei.id
                )
                ELSE '채점 불필요'
            END AS evlSttsNm,
            DATE_FORMAT(ei.evl_prg_dt, "%Y-%m-%d") AS evl_prg_dt,
            DATE_FORMAT(ei.evl_cp_dt, "%Y-%m-%d") AS evl_cp_dt,
            CASE
                WHEN ei.tmpr_strg_at = 'Y'
                THEN DATE_FORMAT(ei.reg_dt, "%Y-%m-%d")
                ELSE NULL
            END AS reg_dt
            , COALESCE((
                SELECT COUNT(1)
                  FROM aidt_lms.evl_result_info eri3
                LEFT JOIN aidt_lms.tc_cla_mb_info tcmi
                       ON tcmi.stdt_id = eri3.mamoym_id AND tcmi.cla_id = ei.cla_id AND tcmi.actvtn_at = 'Y'
                 WHERE eri3.evl_id = ei.id
                   AND ( tcmi.reg_dt IS NULL OR tcmi.reg_dt <![CDATA[<=]]> COALESCE(ei.evl_cp_dt, ei.evl_prg_dt))
            GROUP BY eri3.evl_id), 0) AS target_cnt
            , COALESCE(
                (
                    SELECT COUNT(1)
                    FROM aidt_lms.evl_result_info eri4
                    WHERE eri4.evl_id = ei.id
                      AND eri4.subm_at = 'Y'
                      AND eri4.subm_dt IS NOT NULL
                    GROUP BY eri4.evl_id
                ), 0
            ) AS submit_cnt,
            ei.sets_id,
            CASE /* 학생이 한명이라도 낸 이력이 있으면 N */
                WHEN (
                    SELECT COUNT(1)
                    FROM aidt_lms.evl_result_info eri5
                    WHERE eri5.evl_id = ei.id
                    AND eri5.tch_rpt_chk_at = 'N'
                ) > 0 THEN 'N'
            ELSE 'Y'
            END AS tch_rpt_chk_at /* 교사 리포트 확인 여부 */
        FROM aidt_lms.evl_info ei
        INNER JOIN aidt_lms.evl_result_info eri
            ON ei.id = eri.evl_id
        INNER JOIN aidt_lms.tc_cla_mb_info tcmi
            ON eri.mamoym_id = tcmi.stdt_id
            AND tcmi.cla_id = ei.cla_id
            AND tcmi.actvtn_at = 'Y'
        WHERE 1=1
            AND ei.cla_id = #{param.claId}
            AND ei.textbook_id = #{param.textbookId}
            AND ei.tmpr_strg_at = 'N'
            AND ei.evl_stts_cd != 1
            AND ei.evl_se_cd IS NOT NULL
            <if test="param.stntId != null and param.stntId != '' ">
                AND (tcmi.reg_dt IS NULL OR tcmi.reg_dt  <![CDATA[<=]]> COALESCE(ei.evl_cp_dt, ei.evl_prg_dt))
                AND eri.mamoym_id = #{param.stntId}
            </if>
            <if test='param.loginUserSeCd eq "T"'>
                AND ei.wrter_id = #{param.userId}
            </if>
            <if test='param.loginUserSeCd eq "S" and param.reportStatusType == "end"'>
                AND (
                ei.rpt_auto_othbc_at = 'Y'
                OR ei.rpt_othbc_at = 'Y'
                )
            </if>
            <if test='param.loginUserSeCd eq "S" and param.reportStatusType == "ing"'>
                AND ei.rpt_auto_othbc_at = 'Y'
            </if>
            <if test="param.evlSeCd != null and param.evlSeCd != '' ">
                AND ei.evl_se_cd = #{param.evlSeCd}
            </if>
            <choose>
                <when test = "param.reportStatusType == 'ing'">
                    AND ei.evl_stts_cd = 2
                    GROUP BY ei.id
                    ORDER BY ei.evl_prg_dt DESC
                </when>
                <when test = "param.reportStatusType == 'end'">
                    AND ei.evl_stts_cd IN (3, 4, 5)
                    GROUP BY ei.id
                    ORDER BY ei.evl_cp_dt DESC
                </when>
                <when test = "param.reportStatusType == 'all'">
                    AND ei.evl_stts_cd IN (2, 3, 4, 5)
                    GROUP BY ei.id
                    ORDER BY ei.evl_prg_dt DESC
                </when>
            </choose>
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <select id="findLatestEval" parameterType="com.visang.aidt.lms.api.report.dto.EvalReportListReqDto" resultType="camelHashMap">
        /* EvalReportMapper.findLatestEval */
        (
            SELECT
            ei.id as evlId
            , ei.evl_nm as evlNm
            , ei.evl_se_cd as evlSeCd
            , ei.rpt_othbc_at
            FROM aidt_lms.evl_info ei
            INNER JOIN aidt_lms.evl_result_info eri
                ON ei.id = eri.evl_id
            INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                ON eri.mamoym_id = tcmi.stdt_id
                AND tcmi.cla_id = ei.cla_id
                AND tcmi.actvtn_at = 'Y'
            WHERE ei.cla_id = #{claId}
                AND ei.evl_stts_cd = 2
            <if test="stntId != null and stntId != '' ">
                AND (tcmi.reg_dt IS NULL OR tcmi.reg_dt  <![CDATA[<=]]>  COALESCE(ei.evl_cp_dt, ei.evl_prg_dt))
                AND eri.mamoym_id = #{stntId}
            </if>
            <if test='loginUserSeCd eq "S"'>
                AND ei.rpt_othbc_at = 'Y'
            </if>
            ORDER BY ei.evl_prg_dt DESC
            LIMIT 1
        )

        UNION ALL

        (
            SELECT
            ei.id as evlId
            , ei.evl_nm as evlNm
            , ei.evl_se_cd as evlSeCd
            , ei.rpt_othbc_at
            FROM aidt_lms.evl_info ei
            INNER JOIN aidt_lms.evl_result_info eri
                ON ei.id = eri.evl_id
            INNER JOIN aidt_lms.tc_cla_mb_info tcmi
                ON eri.mamoym_id = tcmi.stdt_id
                AND tcmi.cla_id = ei.cla_id
                AND tcmi.actvtn_at = 'Y'
            WHERE ei.cla_id = #{claId}
            AND ei.evl_stts_cd IN (3,4,5)
            <if test="stntId != null and stntId != '' ">
                AND (tcmi.reg_dt IS NULL OR tcmi.reg_dt  <![CDATA[<=]]>  COALESCE(ei.evl_cp_dt, ei.evl_prg_dt))
                AND eri.mamoym_id = #{stntId}
            </if>
            <if test='loginUserSeCd eq "S"'>
                AND ei.rpt_othbc_at = 'Y'
            </if>
            AND NOT EXISTS (
                SELECT 1
                FROM aidt_lms.evl_info
                WHERE cla_id = #{claId}
                AND evl_stts_cd = 2
            )
            ORDER BY ei.evl_cp_dt DESC
            LIMIT 1
        );
    </select>

    <!-- 평가 진행중, 종료 개수 조회 -->
    <select id="findEvalProgressCount" parameterType="com.visang.aidt.lms.api.report.dto.EvalReportListReqDto" resultType="camelHashMap">
        /* EvalReportMapper.findEvalProgressCount */
        SELECT
        <choose>
            <when test="stntId != null and stntId != ''">
                COUNT(DISTINCT CASE WHEN ei.evl_stts_cd = 2 AND ei.rpt_auto_othbc_at = 'Y' THEN ei.id END) AS inProgressEvalCount,
            </when>
            <otherwise>
                COUNT(DISTINCT CASE WHEN ei.evl_stts_cd = 2 THEN ei.id END) AS inProgressEvalCount,
            </otherwise>
        </choose>
        <choose>
            <when test="stntId != null and stntId != ''">
                COUNT(DISTINCT CASE WHEN ei.evl_stts_cd IN (3, 4, 5) AND ei.rpt_othbc_at = 'Y' THEN ei.id END) AS completedEvalCount
            </when>
            <otherwise>
                COUNT(DISTINCT CASE WHEN ei.evl_stts_cd IN (3, 4, 5) THEN ei.id END) AS completedEvalCount
            </otherwise>
        </choose>
        FROM aidt_lms.evl_info ei
        INNER JOIN aidt_lms.evl_result_info eri
            ON ei.id = eri.evl_id
        INNER JOIN aidt_lms.tc_cla_mb_info tcmi
            ON eri.mamoym_id = tcmi.stdt_id
            AND tcmi.cla_id = ei.cla_id
            AND tcmi.actvtn_at = 'Y'
        WHERE 1=1
            AND ei.cla_id = #{claId}
            AND ei.textbook_id = #{textbookId}
            AND ei.tmpr_strg_at = 'N'
            AND ei.evl_se_cd IS NOT NULL
            <if test="evlSeCd != null and evlSeCd != '' ">
                AND ei.evl_se_cd = #{evlSeCd}
            </if>
            <if test="stntId != null and stntId != '' ">
                AND (tcmi.reg_dt IS NULL OR tcmi.reg_dt  <![CDATA[<=]]>  COALESCE(ei.evl_cp_dt, ei.evl_prg_dt))
                AND eri.mamoym_id = #{stntId}
            </if>
    </select>


    <!-- 우리반 채점 결과표 -->
    <select id="findScoringClassResultInfo" parameterType="pagingParam" resultType="camelHashMap">
        /* EvalReportMapper.findScoringClassResultInfo */
        SELECT
            COUNT(*) OVER () AS fullCount,
            erd.evl_iem_id,
            erd.sub_id,
            MIN(eii.evl_iem_scr) AS evlIemScr,
            MIN(eii.mrk_ty) AS mrkTy,
            CASE
                WHEN a.articleType = 20 OR NOW() <![CDATA[ < ]]> ei.evl_cp_dt
                    THEN '-'
                ELSE
                    ROUND(
                        AVG(
                            CASE
                                WHEN eri.subm_at = 'Y' THEN
                                    CASE
                                        <choose>
                                            <when test="param.tchId != null and param.tchId !=''">
                                                aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id)
                                            </when>
                                            <otherwise>
                                                erd.errata
                                            </otherwise>
                                        </choose>
                                        WHEN 1 THEN 100
                                        WHEN 3 THEN 50
                                        ELSE 0
                                        END
                                ELSE NULL
                                END
                        ), 0
                    )
            END AS classAvgCorrectRate, /* 반평균 정답률 */
            CASE
                WHEN a.articleType = 20 OR NOW() <![CDATA[ < ]]>  ei.evl_cp_dt THEN '-'
                ELSE
                    CASE
                        WHEN TIME_FORMAT(
                            SEC_TO_TIME(
                                AVG(
                                    IF(erd.eak_at = 'Y',TIMESTAMPDIFF(SECOND, erd.eak_st_dt, erd.eak_ed_dt), NULL)
                                )
                            ),'%H') > 0
                        THEN
                            TIME_FORMAT(
                                SEC_TO_TIME(
                                    AVG(
                                        IF(erd.eak_at = 'Y',TIMESTAMPDIFF(SECOND, erd.eak_st_dt, erd.eak_ed_dt), NULL)
                                    )
                                ),'%H:%i:%s'
                            )
                        ELSE
                            TIME_FORMAT(
                                SEC_TO_TIME(
                                    AVG(
                                        IF(erd.eak_at = 'Y',TIMESTAMPDIFF(SECOND, erd.eak_st_dt, erd.eak_ed_dt), NULL)
                                    )
                                ),'%i:%s'
                            )
                        END
            END AS classAvgSolvingTime, /* 반평균 풀이시간 */
            m.id AS articleType,
            m.val AS articleTypeNm,
            MAX(eri.subm_at) AS submAt,
            COUNT(IF(eri.subm_at = 'Y', 1, NULL)) AS submCnt,
            COUNT(IF(aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) = 4, NULL, 1)) AS errataNotFourCnt
        FROM aidt_lms.evl_iem_info eii
        INNER JOIN aidt_lcms.article a
            ON a.id = eii.evl_iem_id
        INNER JOIN aidt_lms.evl_result_info eri
            ON eri.evl_id = eii.evl_id
        INNER JOIN aidt_lms.evl_result_detail erd
            ON erd.evl_result_id = eri.id
            AND erd.evl_iem_id = eii.evl_iem_id
        INNER JOIN aidt_lcms.setsummary s
            ON s.set_id = eri.sets_id
            AND s.article_id = erd.evl_iem_id
            AND s.sub_id = erd.sub_id
        INNER JOIN aidt_lcms.article_meta_map amm
            ON amm.article_id = erd.evl_iem_id
            AND amm.sub_id = erd.sub_id
            AND amm.meta_name = 'articleType'
        INNER JOIN aidt_lcms.meta m
            ON m.id = amm.meta_id
        INNER JOIN aidt_lms.evl_info ei
                   ON ei.id = eii.evl_id
        WHERE eii.evl_id = #{param.evlId}
            AND eii.sub_id = amm.sub_id
        GROUP BY erd.evl_iem_id, erd.sub_id
        ORDER BY eii.id, erd.id, erd.sub_id
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <!-- 학생 평가 정보 조회 -->
    <select id="findReportEvalResultDetailList_stnt" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findReportEvalResultDetailList_stnt */
        SELECT
            eri.id,
            eri.mamoym_id,
            eri.sets_id,
            sri.flnm,
            sri.user_id,
            ei.evl_stdr_set_at AS evlStdrSetAt, /* 평가기준 설정여부 */
            CASE
                WHEN ei.evl_stdr_set_at = 'N' THEN 4
                ELSE ei.evl_stdr_set
            END AS evlStdrSet, /* 평가기준값 */
            IFNULL(
                (SELECT SUM(evl_iem_scr)
                 FROM aidt_lms.evl_iem_info eii
                 WHERE eii.evl_id = ei.id), 0
            ) AS evlIemScrTotal,
            ifnull(
                    (
                        select
                            <choose>
                                <when test="tchId != null and tchId !=''">
                                    sum(aidt_lms.F_GET_TCH_EVL_SCR(erd.id))
                                </when>
                                <otherwise>
                                    sum(erd.evl_iem_scr_result)
                                </otherwise>
                            </choose>
                        from aidt_lms.evl_result_detail erd
                        where erd.evl_result_id = eri.id
                    )
                , 0) as evl_result_scr, /* 총점수 */
            TIME_FORMAT(
                SEC_TO_TIME(
                    SUM(TIMESTAMPDIFF(SECOND, eri.eak_st_dt, eri.subm_dt))
                ), '%H:%i:%s'
            ) AS totalSolvingTime, /* 총 풀이시간 */
            ei.evl_gd_stdr_scr AS evlGdStdrScr, /* 상기준 점수 */
            ei.evl_av_stdr_scr AS evlAvStdrScr, /* 중기준 점수 */
            ei.evl_ps_stdr_scr AS evlPsStdrScr, /* 통과기준 점수 */
            eri.subm_at AS submAt, /* 학생제출여부 */
            (
                SELECT
                    CASE COUNT(*)
                        WHEN COUNT(IF(erd.mrk_ty = 2, 1, NULL)) THEN 1 /* 모두수동채점 */
                        WHEN COUNT(IF(erd.mrk_ty = 3, 1, NULL)) THEN 2 /* 모두개념 */
                        ELSE 3 /* 일반 */
                    END
                FROM aidt_lms.evl_result_detail erd
                WHERE erd.evl_result_id = eri.id
            ) AS allQstnMrkTyCd,
            (
                SELECT
                    IF(
                        COUNT(*) = COUNT(IF(erd.mrk_ty = 2, 1, NULL))
                        AND COUNT(*) = COUNT(IF(aidt_lms.F_GET_TCH_EVL_ERRATA(erd.id) = 4, 1, NULL)),
                        'Y', 'N'
                    )
                FROM aidt_lms.evl_result_detail erd
                WHERE erd.evl_result_id = eri.id
            ) AS allManualMrkAt,
            cch.class_change_type AS classChangeType /* 반 이동/추가 여부 */
        FROM aidt_lms.evl_info ei
        JOIN aidt_lms.evl_result_info eri
            ON eri.evl_id = ei.id
        LEFT JOIN aidt_lms.stdt_reg_info sri
            ON sri.user_id COLLATE utf8mb4_unicode_ci = eri.mamoym_id COLLATE utf8mb4_unicode_ci
        LEFT JOIN aidt_lms.class_change_history cch
            ON cch.stdt_id COLLATE utf8mb4_unicode_ci = eri.mamoym_id COLLATE utf8mb4_unicode_ci
            AND cch.new_class_id COLLATE utf8mb4_unicode_ci = ei.cla_id COLLATE utf8mb4_unicode_ci
            AND cch.reg_date = (
                SELECT MAX(reg_date)
                FROM aidt_lms.class_change_history cch2
                WHERE cch2.stdt_id COLLATE utf8mb4_unicode_ci = cch.stdt_id COLLATE utf8mb4_unicode_ci
                    AND cch2.new_class_id COLLATE utf8mb4_unicode_ci = cch.new_class_id COLLATE utf8mb4_unicode_ci
            )  /* 해당 학생의 해당 클래스에 대한 최신 이력만 */
        WHERE ei.id = #{evlId}
        <if test="submAt != null and submAt != ''">
            AND eri.subm_at = #{submAt}
        </if>
        GROUP BY eri.id
        ORDER BY sri.num, sri.id
    </select>

    <!-- 교사) 평가 리포트 확인 여부 수정 -->
    <update id="modifyTeacherEvalReportChkAt" parameterType="map" >
        /* EvalReportMapper.modifyTeacherEvalReportChkAt */
        update aidt_lms.evl_result_info
        set tch_rpt_chk_at = 'Y'
          , mdfy_dt = now()
          , mdfr = '/report/eval/change/check'
        where evl_id = #{evlId}
          AND subm_at = 'Y' /* 리포트 생성 조건에 진행중 추가 시 이 조건 삭제 필요 (3차 고도화)*/
    </update>

    <!-- 평가리포트 독려 알림대상 조회 -->
    <select id="selectEvalEncouragementTargets" parameterType="map" resultType="map">
        SELECT
            ei.cla_id as claId,
            ei.textbook_id as textbkId,
            eri.mamoym_id as stntId,
            ei.wrter_id AS tchId,
            DATEDIFF(ei.evl_cp_dt, CURRENT_DATE) as deadline,
            ei.id AS evlId,
            u.flnm as flNm
        FROM aidt_lms.evl_info ei
        INNER JOIN aidt_lms.evl_result_info eri
            ON ei.id = eri.evl_id
        INNER JOIN aidt_lms.`user` u
            ON eri.mamoym_id = u.user_id
        WHERE 1=1
        AND ei.id = #{evlId}
        AND eri.subm_at = 'N'
    </select>

    <select id="selectTargetTaskId" parameterType="map" resultType="int">
        select ifnull(ti.id, 0) as id
        from aidt_lms.task_info ti
        where ti.prscr_std_crt_trget_id = #{evlId}
    </select>

    <!-- 교사) 학생에게 독려알림 전송 -->
    <insert id="insertStntEncouragementNotification" parameterType="map">
        /* EvalReportMapper.insertStntEncouragementNotification */
        INSERT INTO ntcn_info (
            textbk_id, cla_id, trget_cd, ntcn_ty_cd, trget_ty_cd, trget_id, rcve_id,
            ntcn_cn, ntcn_idnty_at, redng_at, link_url, encrg_at, stnt_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        VALUES
        <if test="targetType == 'task'">
            <foreach collection="targetStudents" item="student" separator=",">
                (
                #{student.textbkId},
                #{student.claId},
                'S',
                3,
                99,
                0,
                #{student.stntId},
                CONCAT('{"type":"task-encourage","data":{},"shortcut":{"taskId":', #{targetId}, '},"message":"', #{stntNtcnCn}, '"}'),
                'N',
                'N',
                #{targetId},
                'Y',
                #{student.flNm},
                #{mdfr},
                NOW(),
                #{mdfr},
                NOW()
                )
            </foreach>
        </if>
        <if test="targetType == 'eval'">
            <foreach collection="targetStudents" item="student" separator=",">
                (
                #{student.textbkId},
                #{student.claId},
                'S',
                3,
                99,
                0,
                #{student.stntId},
                CONCAT('{"type":"eval-encourage","data":{},"shortcut":{"evlId":', #{targetId}, '},"message":"', #{stntNtcnCn}, '"}'),
                'N',
                'N',
                #{targetId},
                'Y',
                #{student.flNm},
                #{mdfr},
                NOW(),
                #{mdfr},
                NOW()
                )
            </foreach>
        </if>
    </insert>

    <!-- 교사) 독려알림내용을 교사에게 전송 -->
    <insert id="insertTchEncouragementNotification" parameterType="map">
        /* EvalReportMapper.insertTchEncouragementNotification */
        INSERT INTO ntcn_info (
            textbk_id, cla_id, trget_cd, ntcn_ty_cd, trget_ty_cd, trget_id, rcve_id,
            ntcn_cn, ntcn_idnty_at, redng_at, link_url, encrg_at, stnt_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        VALUES
        (
        #{targetStudent.textbkId},
        #{targetStudent.claId},
        'T',
        3,
        #{trgetTyCd},
        0,
        #{targetStudent.tchId},
        #{tchNtcnCn},
        'N',
        'N',
        #{targetId},
        'Y',
        '',
        #{mdfr},
        NOW(),
        #{mdfr},
        NOW()
        )
    </insert>

    <!--평가 리포트 총평 저장 -->
    <update id="updateTchReportEvlReviewSave" parameterType="map">
        /* EvalReportMapper.updateTchReportEvlReviewSave */
        UPDATE aidt_lms.evl_result_info
        SET stdt_prnt_rls_at = #{stdtPrntRlsAt}
          ,genrvw = #{genrvw}
          ,mdfr = #{mdfr}
          ,mdfy_dt = NOW()
        WHERE evl_id = #{evlId}
          AND mamoym_id = #{userId}
    </update>

    <!-- 오답노트 생성 여부 확인 -->
    <select id="selectWrongNoteCreatedAt" parameterType="map" resultType="int">
        /* EvalReportMapper.selectWrongNoteCreatedAt */
        SELECT count(1)
        FROM aidt_lms.won_asw_note wan
        WHERE 1=1
            AND wan.won_anw_clsf_cd = #{wonAnwClsfCd} /* 과제: 3, 평가: 4 */
            AND wan.trgt_id = #{trgtId}
            AND wan.wrter_id = #{stntId}
    </select>


    <!-- 평가 처방 과제 출제(다른문제풀기 참조 로직) -->
    <!-- 아티클(유사,쌍둥이) 맵(article_article_map) 사용 -->
    <select id="findAutoCreateAiLearningEvlWithDiagnosticAnotherQuestion" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findQuestionList3 */
        select
            g.id as articleId,
            g.studyMap1,
            g.difficulty,
            g.evaluationArea,
            g.evaluationArea3,
            g.contentsItem,
            g.gubun,
            g.thumbnail, /* 문항유형이므로 setsummary의 thumbnail로 처리할 필요 없음 */
            g.name,
            g.creator_ty,
            g.sub_id,
            (
                select sum(cnt) from (
                                         /* 평가에 출제이력이 있는 문항 */
                                         select count(*) cnt
                                         from aidt_lms.evl_info t1
                                                  join aidt_lms.evl_result_info t2 on t2.evl_id = t1.id
                                                  join aidt_lms.evl_result_detail t3 on t3.evl_result_id = t2.id and t3.mrk_ty = 1 /* 자동 채점 유형 */
                                         where 1=1
                                           and t1.cla_id = #{claId}
                                           and t1.textbook_id = #{textbkId}
                                           and t2.mamoym_id = #{mamoymId}
                                           and t3.evl_iem_id = g.id
                                           and t3.sub_id = 0
                                         union all
                                         /* 과제에 출제이력이 있는 문항 */
                                         select count(*) cnt
                                         from aidt_lms.task_info t1
                                                  join aidt_lms.task_result_info t2 on t2.task_id = t1.id
                                                  join aidt_lms.task_result_detail t3 on t3.task_result_id = t2.id and t3.mrk_ty = 1 /* 자동 채점 유형 */
                                         where 1=1
                                           and t1.cla_id = #{claId}
                                           and t1.textbk_id = #{textbkId}
                                           and t2.mamoym_id = #{mamoymId}
                                           and t3.task_iem_id = g.id
                                           and t3.sub_id = 0
                                         union all
                                         /* 수업에 출제이력이 있는 문항 */
                                         select count(*) cnt
                                         from aidt_lms.tab_info t1
                                                  join aidt_lms.std_dta_result_info t2 on t2.textbk_tab_id = t1.id
                                                  join aidt_lms.std_dta_result_detail t3 on t3.dta_result_id = t2.id and t3.mrk_ty = 1 /* 자동 채점 유형 */
                                         where 1=1
                                           and t1.cla_id = #{claId}
                                           and t1.textbk_id = #{textbkId}
                                           and t2.mamoym_id = #{mamoymId}
                                           and t3.dta_iem_id = g.id
                                           and t3.sub_id = 0
                                         union all
                                         select count(*) cnt
                                         from aidt_lms.tab_info t1
                                                  join aidt_lms.std_dta_result_info t2 on t2.textbk_tab_id = t1.id
                                                  join aidt_lms.std_dta_result_hist t3 on t3.dta_result_id = t2.id and t3.mrk_ty = 1 /* 자동 채점 유형 */
                                         where 1=1
                                           and t1.cla_id = #{claId}
                                           and t1.textbk_id = #{textbkId}
                                           and t2.mamoym_id = #{mamoymId}
                                           and t3.dta_iem_id = g.id
                                           and t3.sub_id = 0
                ) k
            ) as frequency /* 자동문항 출제 빈도수 */
        from
            (
                /*
                    다른문제풀기 : 추출조건(대단원,난이도,지식요인,유형 동일, 비교과 / 연쇄형 제외, 문항유형)

                    type : 0(유사문항), 1(쌍둥이)
                    - 일단 유사문항으로 처리. 다른문제풀기는 쌍둥이 조건으로 처리하는게 맞는것 같은데 추후 확인해서 처리하기 바람.
                */
                WITH article_meta AS (
                    SELECT
                        article_id,
                        meta_name,
                        meta_id
                    FROM aidt_lcms.article_meta_map
                    WHERE sub_id = 0
                      AND meta_name IN (
                                        'studyMap1',
                                        'difficulty',
                                        'evaluationArea',
                                        'evaluationArea3',
                                        'contentsItem',
                                        'questionType'
                                       )
                )
                select
                    c.id,
                    MAX(IF(am.meta_name = 'studyMap1', am.meta_id, 0)) AS studyMap1,
                    MAX(IF(am.meta_name = 'difficulty', am.meta_id, 0)) AS difficulty,
                    MAX(IF(am.meta_name = 'evaluationArea', am.meta_id, 0)) AS evaluationArea,
                    MAX(IF(am.meta_name = 'evaluationArea3', am.meta_id, 0)) AS evaluationArea3,
                    MAX(IF(am.meta_name = 'contentsItem', am.meta_id, 0)) AS contentsItem,
                    MAX(IF(am.meta_name = 'questionType', am.meta_id, 0)) as questionType,
                    CONCAT_WS('_',
                              MAX(IF(am.meta_name = 'studyMap1', am.meta_id, 0)),
                              MAX(IF(am.meta_name = 'difficulty', am.meta_id, 0)),
                              MAX(IF(am.meta_name = 'evaluationArea', am.meta_id, 0)),
                              MAX(IF(am.meta_name = 'evaluationArea3', am.meta_id, 0)),
                              MAX(IF(am.meta_name = 'contentsItem', am.meta_id, 0))
                    ) AS gubun,
                    c.thumbnail,
                    c.name,
                    c.creator_ty,
                    0 as sub_id
                from aidt_lcms.article a
                    inner join aidt_lcms.article_article_map b /* 아티클(유사,쌍둥이) 맵 */
                        on a.id = b.article_id_a and b.`type` = 0 /* 0:유사문항, 1:쌍둥이 */
                    inner join aidt_lcms.article c
                        on c.id = b.article_id_b
                    inner join article_meta am
                        on c.id = am.article_id
                where 1=1
                  and a.id = #{articleId}
                  and c.is_active = 1
                  and c.is_publicOpen = 1
                    <if test = "removeIdList != null and removeIdList.size() > 0 " >
                        AND c.id NOT IN
                        <foreach item="item" collection="removeIdList" open="(" close=")" separator=",">
                            #{item}
                        </foreach>
                    </if>
                    <if test="addedIdList != null and addedIdList.size() > 0 ">
                        AND c.id NOT IN
                        <foreach item="item" collection="addedIdList" open="(" close=")" separator=",">
                            #{item}
                        </foreach>
                    </if>
            ) g
        where g.id is not null
        order by frequency, g.id
        limit 1
    </select>

    <!-- 평가 처방 과제 출제(기존 로직 실행) -->
    <!-- 기존 평가 처방 출제 로직 - frequency 적용 -->
    <!-- 출제 하려는 target article의 정보에만 sub_id 추가 -->
    <select id="findAutoCreateAiLearningEvlWithDiagnosticAnotherQuestionIfNull" parameterType="map" resultType="camelHashMap">
        /* QuestionMapper.findAutoCreateAiLearningEvlWithDiagnosticAnotherQuestionIfNull */
        /* 1. 타겟 아티클의 핵심 메타 정보만 추출 */
        WITH
        target_article_meta AS (
            SELECT
                #{articleId} AS article_id,
                MAX(CASE WHEN b.meta_name = 'studyMap1' THEN b.meta_id END) AS studyMap1,
                MAX(CASE WHEN b.meta_name = 'studyMap_1' THEN b.meta_id END) AS studyMap_1,
                MAX(CASE WHEN b.meta_name = 'studyMap_2' THEN b.meta_id END) AS studyMap_2,
                MAX(CASE WHEN b.meta_name = 'difficulty' THEN b.meta_id END) AS difficulty
            FROM aidt_lcms.article_meta_map b
            WHERE b.article_id = #{articleId}
              AND b.meta_name IN ('studyMap1', 'studyMap_1', 'studyMap_2', 'difficulty')
              <choose>
                <when test="subId > 0">
                    AND b.sub_id = #{subId}
                </when>
                <otherwise>
                    AND b.sub_id = 0
                </otherwise>
              </choose>
        ),

        /* 2. 메타 정보를 미리 조회 */
        meta_lookup AS (
            SELECT id, name, code, val
            FROM aidt_lcms.meta
            WHERE name IN ('questionType', 'articleCategory', 'articleType', 'difficulty')
        ),

        /* 3. studyMap1 조건으로 1차 필터링 */
        studymap1_candidates AS (
            SELECT DISTINCT am.article_id
            FROM aidt_lcms.article_meta_map am
            INNER JOIN target_article_meta tam
                ON am.meta_id = tam.studyMap1 AND am.article_id != tam.article_id
            WHERE am.sub_id = 0
              AND am.meta_name = 'studyMap1'
        ),

        /* 4. 1차 후보들의 상세 메타 정보 */
        candidate_metadata AS (
            SELECT
                sc.article_id,
                MAX(CASE WHEN am.meta_name = 'studyMap1' THEN am.meta_id END) AS studyMap1,
                MAX(CASE WHEN am.meta_name = 'studyMap_1' THEN am.meta_id END) AS studyMap_1,
                MAX(CASE WHEN am.meta_name = 'studyMap_2' THEN am.meta_id END) AS studyMap_2,
                MAX(CASE WHEN am.meta_name = 'difficulty' THEN am.meta_id END) AS difficulty,
                MAX(CASE WHEN am.meta_name = 'evaluationArea' THEN am.meta_id END) AS evaluationArea,
                MAX(CASE WHEN am.meta_name = 'evaluationArea3' THEN am.meta_id END) AS evaluationArea3,
                MAX(CASE WHEN am.meta_name = 'contentsItem' THEN am.meta_id END) AS contentsItem,
                MAX(CASE WHEN am.meta_name = 'questionType' THEN am.meta_id END) AS questionType,
                MAX(CASE WHEN am.meta_name = 'articleCategory' THEN am.meta_id END) AS articleCategory,
                CONCAT_WS('_',
                    MAX(CASE WHEN am.meta_name = 'studyMap1' THEN am.meta_id END),
                    MAX(CASE WHEN am.meta_name = 'difficulty' THEN am.meta_id END),
                    MAX(CASE WHEN am.meta_name = 'evaluationArea' THEN am.meta_id END),
                    MAX(CASE WHEN am.meta_name = 'evaluationArea3' THEN am.meta_id END),
                    MAX(CASE WHEN am.meta_name = 'contentsItem' THEN am.meta_id END)
                ) AS gubun
            FROM studymap1_candidates sc
            INNER JOIN aidt_lcms.article_meta_map am ON sc.article_id = am.article_id
            WHERE am.sub_id = 0
              AND am.meta_name IN ('studyMap1', 'studyMap_1', 'studyMap_2', 'difficulty',
                                   'questionType', 'articleCategory', 'evaluationArea',
                                   'evaluationArea3', 'contentsItem')
            GROUP BY sc.article_id
        ),

        /* 5. 타겟 조건과 일치하는 아티클 필터링 */
        matching_articles AS (
            SELECT cm.*
            FROM candidate_metadata cm
            INNER JOIN target_article_meta tam ON 1=1
            WHERE cm.studyMap1 <![CDATA[<=>]]> tam.studyMap1
              AND cm.studyMap_1 <![CDATA[<=>]]> tam.studyMap_1
              AND cm.studyMap_2 <![CDATA[<=>]]> tam.studyMap_2
              AND cm.difficulty <![CDATA[<=>]]> tam.difficulty
        ),

        /* 6. 최적화된 빈도 계산 */
        frequency_summary AS (
            SELECT
                article_id,
                SUM(frequency) as total_frequency
            FROM (
                SELECT
                    erd.evl_iem_id as article_id,
                    COUNT(*) as frequency
                FROM aidt_lms.evl_info ei
                INNER JOIN aidt_lms.evl_result_info eri ON ei.id = eri.evl_id
                    AND eri.mamoym_id = #{mamoymId}
                INNER JOIN aidt_lms.evl_result_detail erd ON eri.id = erd.evl_result_id
                    AND erd.mrk_ty = 1 AND erd.sub_id = 0
                WHERE ei.cla_id = #{claId}
                  AND ei.textbook_id = #{textbkId}
                GROUP BY erd.evl_iem_id

                UNION ALL

                SELECT
                    trd.task_iem_id as article_id,
                    COUNT(*) as frequency
                FROM aidt_lms.task_info ti
                INNER JOIN aidt_lms.task_result_info tri ON ti.id = tri.task_id
                    AND tri.mamoym_id = #{mamoymId}
                INNER JOIN aidt_lms.task_result_detail trd ON tri.id = trd.task_result_id
                    AND trd.mrk_ty = 1 AND trd.sub_id = 0
                WHERE ti.cla_id = #{claId}
                  AND ti.textbk_id = #{textbkId}
                GROUP BY trd.task_iem_id

                UNION ALL

                SELECT
                    sdr.dta_iem_id as article_id,
                    COUNT(*) as frequency
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sri ON ti.id = sri.textbk_tab_id
                    AND sri.mamoym_id = #{mamoymId}
                INNER JOIN aidt_lms.std_dta_result_detail sdr ON sri.id = sdr.dta_result_id
                    AND sdr.mrk_ty = 1 AND sdr.sub_id = 0
                WHERE 1=1
                  AND ti.cla_id = #{claId}
                  AND ti.textbk_id = #{textbkId}
                GROUP BY sdr.dta_iem_id

                UNION ALL

                SELECT
                    shr.dta_iem_id as article_id,
                    COUNT(*) as frequency
                FROM aidt_lms.tab_info ti
                INNER JOIN aidt_lms.std_dta_result_info sri ON ti.id = sri.textbk_tab_id
                    AND sri.mamoym_id = #{mamoymId}
                INNER JOIN aidt_lms.std_dta_result_hist shr ON sri.id = shr.dta_result_id
                    AND shr.mrk_ty = 1 AND shr.sub_id = 0
                WHERE 1=1
                  AND ti.cla_id = #{claId}
                  AND ti.textbk_id = #{textbkId}
                GROUP BY shr.dta_iem_id
            ) freq_data
            GROUP BY article_id
        )

        /* 최종 결과 조회 */
        SELECT
            a.id as articleId,
            ma.studyMap1,
            ma.difficulty,
            ma.evaluationArea,
            ma.evaluationArea3,
            ma.contentsItem,
            ma.gubun,
            a.thumbnail,
            a.name,
            a.creator_ty,
            0 as sub_id,
            COALESCE(fs.total_frequency, 0) as frequency
        FROM matching_articles ma
        INNER JOIN aidt_lcms.article a ON ma.article_id = a.id
            AND a.is_publicOpen = 1
            AND a.is_active = 1
            AND a.creator_ty = 1
        LEFT JOIN frequency_summary fs ON ma.article_id = fs.article_id
        LEFT JOIN meta_lookup md ON ma.difficulty = md.id AND md.name = 'difficulty'
        LEFT JOIN meta_lookup mqt ON ma.questionType = mqt.id AND mqt.name = 'questionType'
        LEFT JOIN meta_lookup mac ON ma.articleCategory = mac.id AND mac.name = 'articleCategory' AND mac.code = 'nonsubj'
        LEFT JOIN meta_lookup mat ON a.articleType = mat.id AND mat.name = 'articleType' AND mat.code = 'question'
        WHERE mat.id IS NOT NULL
          AND mac.id IS NOT NULL
          <if test="removeIdList != null and removeIdList.size() > 0">
          AND a.id NOT IN
          <foreach item="item" collection="removeIdList" open="(" close=")" separator=",">
              #{item}
          </foreach>
          </if>
          <if test="addedIdList != null and addedIdList.size() > 0">
          AND a.id NOT IN
          <foreach item="item" collection="addedIdList" open="(" close=")" separator=",">
              #{item}
          </foreach>
          </if>
        ORDER BY COALESCE(fs.total_frequency, 0), a.id
        LIMIT 1;
    </select>

    <!-- 학생 평가 제출 시 교사 리포트 확인 여부 N으로 초기화 -->
    <update id="modifyTchEvalReportChkAtOnSubmit" parameterType="map">
        /* EvalReportMapper.modifyTchEvalReportChkAtOnSubmit */
        UPDATE aidt_lms.evl_result_info
        SET tch_rpt_chk_at = 'N'
          , mdfy_dt = NOW()
          , mdfr = '/stnt/eval/submit'
        WHERE evl_id = #{evlId}
          AND mamoym_id = #{userId}
    </update>

    <!-- 개념영상문항 목록 조회 -->
    <select id="findRecommendedQuestions" parameterType="map" resultType="camelHashMap">
        /* EvalReportMapper.findRecommendedQuestions */
        select
            COUNT(*) OVER () AS fullCount
            , ss.article_id /* 개념문항 ID */
            , ss.set_id
            , a.thumbnail
            , ss.name /* 개념문항 이름 */
            , ei.id as evlId
            , a.description
        from aidt_lms.evl_info ei
                 left join aidt_lms.sets_hist sh
                           on ei.id = sh.trgt_id
                               and sh.trgt_se_cd = 3
                 inner join aidt_lcms.sets_sets_map ssm
                            on BINARY ssm.sets_id_a = BINARY (
                        CASE
                            WHEN sh.origin_sets_id IS NOT NULL THEN sh.origin_sets_id
                            ELSE ei.sets_id
                            END
                        )
         inner join aidt_lcms.setsummary ss
        on ssm.sets_id_b = ss.set_id
            inner join aidt_lcms.article a
            on ss.article_id = a.id
        where ei.id = #{param.evlId}
        order by ss.id
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
    </select>

    <select id="selectLastLessonCrculId" parameterType="map" resultType="int">
        /* EvalReportMapper.selectLastLessonCrculId */
        select crcul_id
        from aidt_lms.tc_lastlesson
        where textbk_id = #{textbookId}
          and cla_id = #{claId}
          and wrter_id = (select distinct user_id
                          from aidt_lms.tc_cla_mb_info
                          where cla_id = #{claId}
                          AND actvtn_at = 'Y')
    </select>

    <select id="selectCrculId" parameterType="map" resultType="String">
        /* EvalReportMapper.selectCrculId */
        WITH curriculum AS (
            SELECT
                a.id,
                a.wrter_id,
                a.cla_id,
                a.textbk_id,
                a.textbk_idx_id,
                a.key,
                a.parent,
                a.text,
                CAST(LPAD(a.key, 5, '0') AS CHAR(100) CHARACTER SET utf8) AS id_path,
                CAST(a.text AS CHAR(1000) CHARACTER SET utf8) AS id_path_nm,
                1 AS depth
            FROM aidt_lms.tc_curriculum a
            WHERE 1=1
              AND a.cla_id = #{claId}
              AND a.textbk_id = #{textbookId}
              AND a.parent = (
                SELECT tc.parent
                FROM aidt_lms.tc_textbook AS t
                         INNER JOIN aidt_lcms.textbookcurriculum AS tc
                                    ON tc.textbookIndex_id = t.textbk_idx_id
                         INNER JOIN aidt_lcms.textbookcurriculum_meta_map AS tmm
                                    ON tc.textbookIndex_id = tmm.textbookIndex_id
                                        AND tc.key = tmm.key
                                        AND tmm.meta_name = 'studyMap1'
                WHERE 1=1
                  AND tc.depth = 1
                  AND t.textbk_id = #{textbookId}
                  AND t.cla_id = #{claId}
                  AND tmm.meta_id = (
                                        SELECT amm.meta_id
                                        FROM aidt_lcms.sets s
                                                 JOIN aidt_lcms.sets_article_map sap ON s.id = sap.sets_id
                                                 JOIN aidt_lcms.article_meta_map amm ON sap.article_id = amm.article_id
                                                 JOIN aidt_lcms.meta m ON m.id = amm.meta_id
                                            AND amm.meta_name = 'studyMap1'
                                        WHERE s.id = #{setsId}
                                        ORDER BY m.id
                                        LIMIT 1
                                        )
                LIMIT 1
                )
            )
        -- 첫 번째 결과의 key 값 반환
        SELECT `key`
        FROM curriculum
        LIMIT 1;
    </select>

    <select id="selectTextbookId" parameterType="map" resultType="int">
        /* EvalReportMapper.selectTextbookId */
        select ei.textbook_id
        from aidt_lms.evl_info ei
        where ei.id = #{evlId}
    </select>

    <select id="selectClaId" parameterType="map" resultType="string">
        /* EvalReportMapper.selectClaId */
        select ei.cla_id
        from aidt_lms.evl_info ei
        where ei.id = #{evlId}
    </select>
</mapper>