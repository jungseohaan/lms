<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.visang.aidt.lms.api.keris.mapper.TiosApiMapper">

    <select id="getUserInfo" parameterType="map" resultType="map">
        /* TiosApiMapper.getUserInfo */
        SELECT u.id
                , u.user_id AS userId
                , u.rgtr
        FROM `aidt_lms`.`user` u
        WHERE u.user_id = #{userId}
    </select>

    <select id="getPtnInfo" parameterType="map" resultType="map">
        /* TiosApiMapper.getPtnInfo */
        SELECT ptn_id AS ptnId
             , api_domain AS apiDomain
             , tc_main_url AS tcMainUrl
             , stdt_main_url AS stdtMainUrl
             , pa_main_url AS paMainUrl
             , tios_main_url AS tiosMainUrl
             , curri_subject AS curriSubject
             , curri_school AS curriSchool
             , curri_grade AS curriGrade
             , curri_semester AS curriSemester
        FROM `aidt_lms`.`aidt_ptn_info`
        WHERE textbk_cd = #{textbkCd}
    </select>

    <update id="updatePtnInfo" parameterType="map">
        /* Keris.updatePtnInfo */
        UPDATE `aidt_lms`.`aidt_ptn_info`
        SET api_domain = #{apiDomain}
        WHERE textbk_cd = #{textbkCd}
    </update>

    <insert id="insertUser" parameterType="map">
        /* TiosApiMapper.insertUser */
        insert into `aidt_lms`.`user` (
        user_id, sso_tk, flnm, user_se_cd, indv_info_agre_yn, eml_addr, mbl_telno
        , sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn
        , rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
        #{userId}
        , '-'
        , #{flnm}
        , #{userType}
        , 'Y'
        , '-'
        , '-'
        , '-'
        , '-'
        , '-'
        , '-'
        , '-'
        , '-'
        , #{rgtr}
        , now()
        , #{rgtr}
        , now()
        )
    </insert>

    <insert id="insertStdtRegInfo" parameterType="map">
        /* TiosApiMapper.insertStdtRegInfo */
        insert into `aidt_lms`.`stdt_reg_info`  (
              user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
            , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd
            , num, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{userId}
             , #{flnm}
             , 'E'
             , '0'
             , LEFT(SHA2(#{schlNm}, '256'), 50)
             , #{schlNm}
             , '-'
             , 2024
             , '-'
             , #{grade}
             , '-'
             , '-'
             , '-'
             , '-'
             , #{num}
             , #{rgtr}
             , NOW()
             , #{rgtr}
             , NOW()
         )
    </insert>

    <insert id="insertTcRegInfo" parameterType="map">
        /* TiosApiMapper.insertTcRegInfo */
        insert into `aidt_lms`.`tc_reg_info` (
               user_id, flnm, user_stts_cd, schl_cd, schl_nm, brth
             , yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd
             , cla_cd, cla_nm, num, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{userId}
             , #{flnm}
             , 'E'
             , LEFT(SHA2(#{schlNm}, '256'), 50)
             , #{schlNm}
             , '-'
             , 2024
             , '-'
             , #{grade}
             , '-'
             , '-'
             , '-'
             , #{claCd}
             , #{claNm}
             , 1
             , #{rgtr}
             , NOW()
             , #{rgtr}
             , NOW()
         )
    </insert>

    <insert id="insertTcClaInfo" parameterType="map">
        /* TiosApiMapper.insertTcClaInfo */
        insert into `aidt_lms`.`tc_cla_info` (
            cla_id, user_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, estbl_sbjct_cd, course_rm_cd, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
               #{claId}
             , #{userId}
             , 2024
             , 0
             , #{schlNm}
             , #{grade}
             , '-'
             , #{claNm}
             , '-'
             , '-'
             , #{rgtr}
             , NOW()
             , #{rgtr}
             , NOW()
         )
    </insert>

    <insert id="insertTcClaMbInfo" parameterType="map">
        /* TiosApiMapper.insertTcClaMbInfo */
        insert into `aidt_lms`.`tc_cla_mb_info` (
            cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, reg_dt, mdfr, mdfy_dt
        ) values (
            #{claId}
            , #{tcId}
            , #{userId}
            , 2024
            , 0
            , #{schlNm}
            , #{grade}
            , '-'
            , #{claNm}
            , #{rgtr}
            , NOW()
            , #{rgtr}
            , NOW()
        )
    </insert>

    <insert id="insertTiosUserInfo" parameterType="map">
        INSERT INTO tios_user_info
            (user_id, tios_user_id, user_se_cd, rgtr, reg_dt)
        VALUES
            (#{userId}, #{referUserId}, #{userType}, #{rgtr}, NOW())
    </insert>

    <insert id="insertVivasamUserInfo" parameterType="map">
        INSERT INTO vivasam_user_info
            (user_id, vivasam_user_id, user_se_cd, rgtr, reg_dt)
        VALUES
            (#{userId}, #{referUserId}, #{userType}, #{rgtr}, NOW())
    </insert>

    <insert id="insertVivasamUserInfoBulk" parameterType="list">
        /* TiosApiMapper.insertVivasamUserInfoBulk - 배치 삽입 */
        INSERT INTO vivasam_user_info
        (user_id, vivasam_user_id, user_se_cd, rgtr, reg_dt)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            #{user.referUserId},
            #{user.userType},
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>

    <insert id="insertUserBulk" parameterType="list">
        /* TiosApiMapper.insertUser - 배치 삽입 */
        insert into `aidt_lms`.`user` (
        user_id, sso_tk, flnm, user_se_cd, indv_info_agre_yn, eml_addr, mbl_telno,
        sex, brth, eml_rcptn_agre_yn, sms_rcptn_agre_yn,
        rcptn_agre_ymd, dmt_chg_ymd, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            '-',
            #{user.flnm},
            #{user.userType},
            'Y',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            #{user.rgtr},
            now(),
            #{user.rgtr},
            now()
            )
        </foreach>
    </insert>

    <insert id="insertStdtRegInfoBulk" parameterType="list">
        /* TiosApiMapper.insertStdtRegInfo - 배치 삽입 */
        insert into `aidt_lms`.`stdt_reg_info` (
        user_id, flnm, user_stts_cd, schl_id, schl_cd, schl_nm
        , brth, yr, csr_cd, grade_cd, day_night_cd, affil_cd, scsbj_cd, cla_cd
        , num, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            #{user.flnm},
            'E',
            '0',
            LEFT(SHA2(#{user.schlNm}, '256'), 50),
            #{user.schlNm},
            '-',
            2024,
            '-',
            #{user.grade},
            '-',
            '-',
            '-',
            '-',
            #{user.num},
            #{user.rgtr},
            NOW(),
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>

    <insert id="insertTcClaMbInfoBulk" parameterType="list">
        /* TiosApiMapper.insertTcClaMbInfo - 배치 삽입 */
        insert into `aidt_lms`.`tc_cla_mb_info` (
        cla_id, user_id, stdt_id, yr, smt, schl_nm, grade_cd, cla_cd, cla_nm, rgtr, reg_dt, mdfr, mdfy_dt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.claId},
            #{user.tcId},
            #{user.userId},
            2024,
            0,
            #{user.schlNm},
            #{user.grade},
            '-',
            #{user.claNm},
            #{user.rgtr},
            NOW(),
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>

    <insert id="insertTiosUserInfoBulk" parameterType="list">
        /* TiosApiMapper.insertTiosUserInfo - 배치 삽입 */
        INSERT INTO tios_user_info
        (user_id, tios_user_id, user_se_cd, rgtr, reg_dt)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId},
            #{user.referUserId},
            #{user.userType},
            #{user.rgtr},
            NOW()
            )
        </foreach>
    </insert>


    <select id="getStdTransInfo" parameterType="map" resultType="map">
        /* TiosApiMapper.getStdTransInfo */
        SELECT src_grp AS srcGrp
                , sets_ids AS setsIds
                , trans_yn AS transYn
        FROM `aidt_lms`.`tios_std_trans_info`
        WHERE textbk_id = #{textbkId}
    </select>

    <select id="getStdDtaResultInfo" parameterType="map" resultType="map">
        /* TiosApiMapper.getStdDtaResultInfo */
         SELECT sdri.id AS sourceDtaResultId
                , IFNULL(tmp.id, 0) AS targetTextbkTabId
         FROM std_dta_result_info sdri
         LEFT JOIN aidt_lms.tab_info ti ON sdri.textbk_tab_id = ti.id
         LEFT JOIN (
             SELECT ti2.crcul_id , ti2.textbk_id, ti2.id, ti2.sets_id
             FROM aidt_lms.tab_info ti2
             LEFT JOIN aidt_lms.tc_cla_mb_info tcmi ON ti2.wrter_id = tcmi.user_id and tcmi.actvtn_at = 'Y'
             WHERE tcmi.stdt_id  = #{targetUserId}
         ) tmp ON ti.crcul_id = tmp.crcul_id AND ti.textbk_id  = tmp.textbk_id AND ti.sets_id  = tmp.sets_id
         WHERE 1=1
          AND sdri.mamoym_id = #{sourceUserId}
          AND sdri.sets_id = #{setsId}
          AND tmp.id IS NOT NULL
         LIMIT 1
    </select>

    <insert id="insertStdDtaResulInfo" parameterType="map" useGeneratedKeys="true" keyProperty="dtaResultId">
        INSERT INTO aidt_lms.std_dta_result_info (
            mamoym_id, dta_id, textbk_tab_id, sets_id, eak_stts_cd, eak_at,
            subm_at, mrk_cp_at, eak_st_dt, eak_ed_dt, genrvw, stdt_prnt_rls_at,
            rgtr, reg_dt, mdfr, mdfy_dt
        )
        SELECT #{targetUserId}, sdri.dta_id, #{targetTextbkTabId}, sdri.sets_id, sdri.eak_stts_cd,
               sdri.eak_at, sdri.subm_at, sdri.mrk_cp_at, sdri.eak_st_dt, sdri.eak_ed_dt, sdri.genrvw,
               sdri.stdt_prnt_rls_at, sdri.rgtr, sdri.reg_dt, sdri.mdfr, sdri.mdfy_dt
        FROM aidt_lms.std_dta_result_info sdri
        WHERE sdri.id = #{sourceDtaResultId}
          AND #{targetTextbkTabId} != 0
    </insert>

    <insert id="insertStdDtaResulDetail" parameterType="map">
        INSERT INTO aidt_lms.std_dta_result_detail (
            dta_result_id, dta_iem_id, sub_id, src_detail_id, mrk_ty, eak_stts_cd,
            eak_at, mrk_cp_at, eak_st_dt, eak_ed_dt, module_req_sec, sub_mit_anw,
            sub_mit_anw_url, errata, re_idf_cnt, anw_chg_cnt, sm_exm_at, textbk_dta_iem_id,
            re_exm_cnt, fdb_dc, fdb_url, exlt_anw_at, fdb_exp_at, hdwrt_cn, hnt_use_at,
            std_fdb_dc, std_fdb_url, dft_ques_beffat_chk_at, rgtr, reg_dt, mdfr, mdfy_dt
        )
        SELECT #{dtaResultId}, dta_iem_id, sub_id, src_detail_id, mrk_ty, eak_stts_cd,
               eak_at, mrk_cp_at, eak_st_dt, eak_ed_dt, module_req_sec, sub_mit_anw,
               sub_mit_anw_url, errata, re_idf_cnt, anw_chg_cnt, sm_exm_at, textbk_dta_iem_id,
               re_exm_cnt, fdb_dc, fdb_url, exlt_anw_at, fdb_exp_at, hdwrt_cn, hnt_use_at,
               std_fdb_dc, std_fdb_url, dft_ques_beffat_chk_at, rgtr, reg_dt, mdfr, mdfy_dt
        FROM aidt_lms.std_dta_result_detail
        WHERE dta_result_id = #{sourceDtaResultId}
    </insert>


    <insert id="insertEngUsdAchSrc2Info" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Info */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_info (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   tab_id
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   usd_ach_id
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.wrter_id = b.user_id and a.cla_id = b.cla_id and b.actvtn_at = 'Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by    textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       #{stdDt} as std_dt
        ,       tab_id
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num

        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.evaluationArea_cd as usd_ach_id
        ,       Z.mudlSum as usd_ach_scr
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 70 then 1 when round((mudlSum/mudlCnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty
        ,       mudlCnt as rflt_actv_cnt
        ,       mudlList as article_list
        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.tab_id
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       (select `code` from aidt_lcms.meta where id = X.evaluationArea_id) as evaluationArea_cd     /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       a.id as tab_id                     /* 탭 ID */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       g.meta_id as evaluationArea_id  /* 영역별 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                            and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('evaluationArea', 'ContentsItem', 'evaluationArea3') /* 평가영역1, 평가영역2, 평가영역3 */
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 > 0     /* 단원 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_id
        ]]>
    </insert>

    <insert id="insertEngUsdAchSrc2Detail" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Detail */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_detail (
                usd_ach_src_id
            ,   std_dt
            ,   iem_id
            ,   iem_cd
            ,   usd_ach_scr
            ,   dfclt_lvl_ty
            ,   rflt_actv_cnt
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.cla_id = b.cla_id and b.actvtn_at = 'Y'
            where   1=1
              and   a.textbk_id = #{textbkId} /* 교과서 ID */
              and   a.cla_id = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  ifnull((select id from aidt_lms.usd_ach_src2_info where usd_clsf_cd = Z.trgt_se_cd and usd_tg_id = Z.trgt_id and cla_id = Z.cla_id and stdt_id = Z.stdt_id and meta_id = Z.studyMap1 and Z.evaluationArea_cd like concat(usd_ach_id, '%') and date_format(std_dt, '%Y-%m-%d') = left(#{stdDt}, 10) order by std_dt desc, reg_dt desc limit 1), 0) as usd_ach_src_id
        ,       #{stdDt} as std_dt
        ,       Z.evaluationArea_id as iem_id
        ,       Z.evaluationArea_nm as iem_cd
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then Z.totScr else Z.mudlSum end) as usd_ach_scr
        ,       (case when Z.evaluationArea_cd = 'pronunciation' then (case when round((Z.totScr/Z.mudlCnt),2) >= 70 then 1 when round((Z.totScr/Z.mudlCnt),2) > 30 then 2 else 3 end) else (case when round((Z.mudlSum/Z.mudlCnt)*100,2) >= 70 then 1 when round((Z.mudlSum/Z.mudlCnt)*100,2) > 30 then 2 else 3 end) end) as dfclt_lvl_ty
        ,       Z.mudlCnt as rflt_actv_cnt

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       #{serverInfo} as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id               /* 대상 ID */
                ,       X.trgt_se_cd            /* 대상구분 */
                ,       X.cla_id                /* 학급 ID */
                ,       X.stdt_id               /* 학생 ID */
                ,       X.studyMap1             /* 단원 */
                ,       X.evaluationArea_id     /* 영역별 아이디 */
                ,       X.evaluationArea_cd     /* 영역별 코드 */
                ,       X.evaluationArea_nm     /* 영역별 명 */
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                ,       sum(cast(tot_scr as decimal(10,1))) as totScr

                from    (
                            /* 학습자료 */
                            select  1 as trgt_se_cd                     /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id               /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                            /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id              /* 학생 ID */
                                 ,       d.dta_iem_id as article_id          /* 아티클 ID */
                                 ,       d.sub_id                            /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata        /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                        /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                         /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1              /* 단원(대분류) */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g.meta_id else g4.id end), 0) as evaluationArea_id  /* 영역별 항목 ID */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then left(g2.code, 7) else g2.code end), '') as evaluationArea_cd /* 영역별 항목 코드 */
                                 ,       ifnull((case g.meta_name when 'ContentsItem1' then g2.val else g4.contents_entry end), '') as evaluationArea_nm /* 영역별 항목명 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id),'') as curriSubject
                                 ,       (case g2.code when 'pronunciation' then ifnull(g5.tot_scr, -1) else 0 end) as tot_scr   /* pronunciation(발음) 점수, aidt_lms.vocal_evl_scr_info 없을 경우 -1,  vocabulary, grammar는 0, */
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                            and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        inner join aidt_lcms.article_meta_map g
                                                   on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id
                                                       and g.meta_name in ('ContentsItem1', 'evaluationArea3') /* 평가영역2, 평가영역3 */
                                        inner join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.article_libtext_map g3 on d.dta_iem_id = g3.article_id and d.sub_id = g3.sub_id
                                        left join aidt_lcms.libtext g4 on g3.libtext_id = g4.id
                                        left join aidt_lms.vocal_evl_scr_info g5 on d.id = g5.trgt_id and g4.id = g5.libtext_id
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                ) X
                where   X.studyMap1 is not null
                and     X.evaluationArea_id is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                and     X.tot_scr > -1 /*  */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.evaluationArea_id
        ) Z
        where   Z.studyMap1 >  0 /* 단원 정보가 설정되어 있지 않는 아티클은 제외*/
        and     Z.evaluationArea_id > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.evaluationArea_cd, Z.trgt_id
        ]]>
    </insert>

    <insert id="insertEngUsdAchSrc2Kwg" parameterType="map">
        /* StdUsdCalculateMapper.insertEngUsdAchSrc2Kwg */
        <![CDATA[
        insert into aidt_lms.usd_ach_src2_kwg (
                textbk_id
            ,   usd_clsf_cd
            ,   usd_tg_id
            ,   std_dt
            ,   cla_id
            ,   stdt_id
            ,   unit_num
            ,   meta_id
            ,   std_at
            ,   kwg_main_cd
            ,   kwg_main_id
            ,   kwg_main_tot_exm_num
            ,   kwg_ach_num
            ,   dfclt_lvl_ty
            ,   article_list
            ,   rgtr
            ,   reg_dt
            ,   mdfr
            ,   mdfy_dt
        )
        with tchInfo as (
            select  distinct a.wrter_id
            ,       a.textbk_id
            ,       a.textbk_idx_id
            ,       a.cla_id
            ,       b.stdt_id
            from    aidt_lms.tc_curriculum a
                inner join aidt_lms.tc_cla_mb_info b on a.cla_id = b.cla_id and b.actvtn_at = 'Y'
            where   1=1
              and   a.textbk_id     = #{textbkId} /* 교과서 ID */
              and   a.cla_id        = #{claId} /* 학급 ID */
            order by textbk_id, wrter_id, cla_id, stdt_id
        )
        select  #{textbkId} as textbk_id
        ,       Z.trgt_se_cd as usd_clsf_cd
        ,       Z.trgt_id as usd_tg_id
        ,       #{stdDt} as std_dt
        ,       cla_id
        ,       stdt_id
        ,       ifnull((   select
                                     t.unit_num
                              from(
                                    select row_number() over () as unit_num, b.id as meta_id
                                      from aidt_lcms.meta a
                                             inner join aidt_lcms.meta b on a.`code` = b.description and b.is_active = 1 and b.name = 'studyMap1'
                                             inner join aidt_lcms.meta c on c.id = b.parent_id and c.is_active = 1
                                             left join aidt_lcms.meta_extension d on b.meta_extension_id = d.meta_extension_id
                                    where 1=1
                                      and a.parent_id = (select curriBook from aidt_lcms.textbook where id = #{textbkId})
                                      and a.is_active = 1
                                      and ifnull(d.val1,'1') = '1' /* Project 노출여부가 1인 것만 노출 */
                                   ) as t
                                where t.meta_id = Z.studyMap1
                ),0) as unit_num
        ,       Z.studyMap1 as meta_id
        ,       (case when studyCnt > 0 then 'Y' else 'N' end) as std_at
        ,       Z.studyMap_cd as kwg_main_cd
        ,       Z.studyMap_1 as kwg_main_id
        ,       mudlCnt as kwg_main_tot_exm_num
        ,       Z.mudlSum as kwg_ach_num
        ,       (case when round((mudlSum/mudlCnt)*100,2) >= 70 then 1 when round((mudlSum/mudlCnt)*100,2) > 30 then 2 else 3 end) as dfclt_lvl_ty

        ,       mudlList as article_list

        ,       'system' as rgtr
        ,       now() as reg_dt
        ,       'system' as mdfr
        ,       now() as mdfy_dt
        from    (
                select  X.trgt_id           /* 대상 ID */
                ,       X.trgt_se_cd        /* 대상구분 */
                ,       X.cla_id            /* 학급 ID */
                ,       X.stdt_id           /* 학생 ID */
                ,       X.studyMap1         /* 단원 */
                ,       X.studyMap_1        /* 영역별 아이디 */
                ,       X.studyMap_cd       /* 영역별 코드 */
                ,       sum(X.is_study) as studyCnt
                ,       count(X.article_id) as mudlCnt
                ,       sum(case X.errata when '1' then 1 when '3' then 0.5 else 0 end) as mudlSum
                ,       group_concat(concat(X.article_id,'-', sub_id) order by X.trgt_se_cd, X.sub_id)  as mudlList
                from    (
                            /* 학습자료 */
                            select  1 as trgt_se_cd                 /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                 ,       a.crcul_id as trgt_id           /* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                                 ,       b.cla_id                        /* 학급 ID */
                                 ,       c.mamoym_id as stdt_id          /* 학생 ID */
                                 ,       d.dta_iem_id as article_id      /* 아티클 ID */
                                 ,       d.sub_id                        /* 서브 ID */
                                 ,       if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study  /* 학습이력 체크 */
                                 ,       ifnull(d.errata,4) as errata    /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                 ,       d.hnt_use_at                    /* 힌트 사용여부 */
                                 ,       d.sm_exm_at                     /* 유사문항 여부 */
                                 ,       f.meta_id as studyMap1          /* 단원(대분류) */
                                 ,       ifnull(g3.meta_id_b,0) as studyMap_1      /* 학습맵 ID */
                                 ,       ifnull(g3.meta_name_b,'') as studyMap_cd   /* 학습맵 코드 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'ED01') as difficulty   /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(ED01)로 처리 */
                                 ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                            from    aidt_lms.tab_info a
                                        inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                        inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id
                                        inner join aidt_lms.std_dta_result_detail d
                                                   on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                       and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                       and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                        ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                            and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                        </if><![CDATA[
                                        inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                        inner join aidt_lcms.article_meta_map f
                                                   on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                        left join aidt_lcms.article_meta_map g
                                                  on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                        left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                        left join aidt_lcms.meta_meta_map g3
                                                  on g2.id = g3.meta_id_a
                                                      and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                        left join aidt_lcms.article_meta_map h
                                                  on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                        left join aidt_lcms.article_meta_map i
                                                  on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                            /*    left join aidt_lms.std_dta_eng_temp_result_info e on d.id = e.dta_result_detail_id */
                            /*    left join aidt_lms.std_dta_eng_temp_result_detail f on e.id = f.dta_eng_temp_result_id */
                            where   1 = 1
                              and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                              and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                ) X
                where   X.studyMap1 is not null
                and     X.studyMap_1 is not null
                and     X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                group by X.trgt_se_cd, X.trgt_id, X.cla_id, X.stdt_id, X.studyMap1, X.studyMap_1
        ) Z
        where   Z.studyMap1 > 0 /* 학습맵 정보가 설정되어 있지 않는 아티클은 제외 */
        and     Z.studyMap_1 > 0
        order by Z.trgt_se_cd, Z.cla_id, Z.stdt_id, Z.studyMap1, Z.studyMap_1
        ]]>
    </insert>

    <insert id="insertAchCacSrcInfo" parameterType="map">
        <![CDATA[
        insert into aidt_lms.ach_cac_src_info
        with tchInfo as (
                    select  distinct a.wrter_id
                    ,       a.textbk_id
                    ,       a.textbk_idx_id
                    ,       a.cla_id
                    ,       b.stdt_id
                    from    aidt_lms.tc_curriculum a
                        inner join aidt_lms.tc_cla_mb_info b on a.cla_id = b.cla_id and b.actvtn_at = 'Y'
                    where   1=1
                      and   a.textbk_id     = #{textbkId} /* 교과서 ID */
                      and   a.cla_id        = #{claId} /* 학급 ID */
                    order by textbk_id, wrter_id, cla_id, stdt_id
                )
        	            select
        	            null as id,
        	            X.textbk_id as textbk_id,
        	            X.cla_id,
        	            X.trgt_se_cd,
        	            X.std_cd,
        	            X.trgt_id,
        	            date_format(now(),'%Y-%m-%d') as std_dt,	/* 학습날짜 (배치 실행시점에 구해놓은 날짜값) */
        	            X.stdt_id,
        	            X.article_id,
        	            X.sub_id,
        	            X.errata,
        	            X.hnt_use_at,
        	            X.sm_exm_at,
        	            X.thumbnail,
        	            X.studyMap1 as meta_id,
        	            X.studyMap_1 as kwg_main_id,
        	            X.studyMap_cd,
        	            'system' as rgtr,
        	            now() as reg_dt,
        	            'system' as mdfr,
        	            now() as mdfy_dt
                        from    (
                                /* 학습자료 */
                                select
                                    1            as trgt_se_cd   /* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                                     , 0 as std_cd                /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                                     , 0            as trgt_id    /* 대상 ID */
                                     , b.cla_id
                                     , c.mamoym_id  as stdt_id    /* 학생 ID */
                                     , d.dta_iem_id as article_id
                                     , d.sub_id
                                     , d.errata                   /* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                                     , d.hnt_use_at               /* 힌트 사용여부 */
                                     , d.sm_exm_at                /* 유사문항 여부 */
                                     , ifnull(
                                            (select thumbnail from aidt_lcms.setsummary where set_id = c.sets_id and article_id = d.dta_iem_id and sub_id = d.sub_id),
                                            e.thumbnail
                                       ) as thumbnail
                                     , f.meta_id as studyMap1	  /* 단원(대분류) */
                                     , g3.meta_id_b as studyMap_1
                                     , g3.meta_name_b as studyMap_cd
                                     , m2.id		     as articleCategory /*교과서/비교과서*/
                                     , 'N'		     as ai_yn
                                     , b.textbk_id as textbk_id
                                     ,       ifnull((select `code` from aidt_lcms.meta where id = i.meta_id), '') as curriSubject
                                from    aidt_lms.tab_info a
                                            inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                                            inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id
                                            inner join aidt_lms.std_dta_result_detail d
                                                       on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                                           and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                                                           and d.eak_at = 'Y' /* heum  실제 푼 이력 기준 */
                                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                                and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                                            </if><![CDATA[
                                            inner join aidt_lcms.article e on d.dta_iem_id = e.id
                                            inner join aidt_lcms.article_meta_map f
                                                       on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                                            left join aidt_lcms.article_meta_map g
                                                      on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 학습맵 */
                                            left join aidt_lcms.meta g2 on g.meta_id = g2.id
                                            left join aidt_lcms.meta_meta_map g3
                                                      on g2.id = g3.meta_id_a
                                                          and g3.meta_name_b in ('achievementStandard', 'Material', 'communication', 'languageFormat')
                                            left join aidt_lcms.article_meta_map h
                                                      on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                                            left join aidt_lcms.article_meta_map i
                                                      on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                                             inner join aidt_lcms.article_meta_map amm
                                                        on d.dta_iem_id = amm.article_id and d.sub_id = amm.sub_id
                                             inner join aidt_lcms.meta m2
                                                        on amm.meta_id = m2.id and m2.name = 'articleCategory'
                                where   1 = 1
                                  and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                                  and e.hashTags not like '%수행평가%'      /* 수행평가는 제외*/
                          ) X
                where
                    1=1
                  and X.studyMap1 is not null
                  and X.studyMap_1 is not null
                  and X.curriSubject = 'english' /* 교과목이 (영어)인 아티클만 대상으로 처리 */
                order by
                    X.articleCategory
                    , case X.trgt_se_cd
                            when 1 then 1
                            when X.trgt_se_cd = 4 and X.ai_yn = 'Y' then 2
                            when 2 then 3
                            when 3 then 4
                       else 5
                       end
                    , X.article_id
        ]]>
    </insert>

    <insert id="insertUsdCacSrcInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertUsdCacSrcInfo */
        <![CDATA[
        insert into aidt_lms.usd_cac_src_info (
            id,
            textbk_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            std_dt,
            cla_id,
            stdt_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            kwg_main_tot_exm_num,
            gd_exm_num,
            gd_gnrl_rgt_asw_cnt,
            gd_gnrl_pat_asw_cnt,
            gd_hnt_gnrl_rgt_asw_cnt,
            gd_hnt_gnrl_pat_asw_cnt,
            gd_sm_exm_rgt_asw_cnt,
            gd_sm_exm_pat_asw_cnt,
            av_up_exm_num,
            av_up_gnrl_rgt_asw_cnt,
            av_up_gnrl_pat_asw_cnt,
            av_up_hnt_gnrl_rgt_asw_cnt,
            av_up_hnt_gnrl_pat_asw_cnt,
            av_up_sm_exm_rgt_asw_cnt,
            av_up_sm_exm_pat_asw_cnt,
            av_exm_num,
            av_gnrl_rgt_asw_cnt,
            av_gnrl_pat_asw_cnt,
            av_hnt_gnrl_rgt_asw_cnt,
            av_hnt_gnrl_pat_asw_cnt,
            av_sm_exm_rgt_asw_cnt,
            av_sm_exm_pat_asw_cnt,
            av_lw_exm_num,
            av_lw_gnrl_rgt_asw_cnt,
            av_lw_gnrl_pat_asw_cnt,
            av_lw_hnt_gnrl_rgt_asw_cnt,
            av_lw_hnt_gnrl_pat_asw_cnt,
            av_lw_sm_exm_rgt_asw_cnt,
            av_lw_sm_exm_pat_asw_cnt,
            bd_exm_num,
            bd_gnrl_rgt_asw_cnt,
            bd_gnrl_pat_asw_cnt,
            bd_hnt_gnrl_rgt_asw_cnt,
            bd_hnt_gnrl_pat_asw_cnt,
            bd_sm_exm_rgt_asw_cnt,
            bd_sm_exm_pat_asw_cnt,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        with tchInfo as (
            select distinct
                a.wrter_id,
                a.textbk_id,
                a.textbk_idx_id,
                a.cla_id,
                b.stdt_id
            from aidt_lms.tc_curriculum a
            inner join aidt_lms.tc_cla_mb_info b on a.cla_id = b.cla_id and b.actvtn_at = 'Y'
            where 1=1
              and a.textbk_id = #{textbkId} /* 교과서 ID */
              and a.cla_id = #{claId} /* 학급 ID */
            order by
                a.textbk_id,
                a.wrter_id,
                a.cla_id,
                b.stdt_id
        )
        select
            id,
            textbk_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            std_dt,
            cla_id,
            stdt_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            kwg_main_tot_exm_num,
            gd_exm_num,
            gd_gnrl_rgt_asw_cnt,
            gd_gnrl_pat_asw_cnt,
            gd_hnt_gnrl_rgt_asw_cnt,
            gd_hnt_gnrl_pat_asw_cnt,
            gd_sm_exm_rgt_asw_cnt,
            gd_sm_exm_pat_asw_cnt,
            av_up_exm_num,
            av_up_gnrl_rgt_asw_cnt,
            av_up_gnrl_pat_asw_cnt,
            av_up_hnt_gnrl_rgt_asw_cnt,
            av_up_hnt_gnrl_pat_asw_cnt,
            av_up_sm_exm_rgt_asw_cnt,
            av_up_sm_exm_pat_asw_cnt,
            av_exm_num,
            av_gnrl_rgt_asw_cnt,
            av_gnrl_pat_asw_cnt,
            av_hnt_gnrl_rgt_asw_cnt,
            av_hnt_gnrl_pat_asw_cnt,
            av_sm_exm_rgt_asw_cnt,
            av_sm_exm_pat_asw_cnt,
            av_lw_exm_num,
            av_lw_gnrl_rgt_asw_cnt,
            av_lw_gnrl_pat_asw_cnt,
            av_lw_hnt_gnrl_rgt_asw_cnt,
            av_lw_hnt_gnrl_pat_asw_cnt,
            av_lw_sm_exm_rgt_asw_cnt,
            av_lw_sm_exm_pat_asw_cnt,
            bd_exm_num,
            bd_gnrl_rgt_asw_cnt,
            bd_gnrl_pat_asw_cnt,
            bd_hnt_gnrl_rgt_asw_cnt,
            bd_hnt_gnrl_pat_asw_cnt,
            bd_sm_exm_rgt_asw_cnt,
            bd_sm_exm_pat_asw_cnt,
            rgtr,
            reg_dt,
            'system' as mdfr,
            mdfy_dt
        from (
            select
                null as id,
                M.textbk_id,
                M.trgt_se_cd as usd_clsf_cd,
                M.std_cd,
                M.trgt_id 	as usd_tg_id,
                M.tab_id,
                M.std_dt,
                M.cla_id,
                M.stdt_id,
                ifnull((   select unit_num
                    from (
                        select row_number() over () as unit_num, b.id
                        from aidt_lcms.meta a
                        inner join aidt_lcms.meta b on b.parent_id = a.parent_id and b.is_active = 1
                        where a.id = M.studyMap1
                        order by b.id
                    ) s
                    where id = M.studyMap1
                ),0) as unit_num,
                M.studyMap1	as meta_id,
                if(M.studyCnt > 0,'Y','N')  as std_at,
                M.studyMap_1 				as kwg_main_id,
                M.mudlCnt 					as kwg_main_tot_exm_num,
                /* 상 */
                M.MD01_cnt 					as gd_exm_num,
                M.MD01_answerCnt 			as gd_gnrl_rgt_asw_cnt,
                M.MD01_partAnswerCnt 		as gd_gnrl_pat_asw_cnt,
                M.MD01_hntUseAnswerCnt 		as gd_hnt_gnrl_rgt_asw_cnt,
                M.MD01_hntUsePartAnswerCnt 	as gd_hnt_gnrl_pat_asw_cnt,
                M.MD01_smExmAnswerCnt 		as gd_sm_exm_rgt_asw_cnt,
                M.MD01_smExmPartAnswerCnt 	as gd_sm_exm_pat_asw_cnt,
                /* 중상 */
                M.MD02_cnt 					as av_up_exm_num,
                M.MD02_answerCnt 			as av_up_gnrl_rgt_asw_cnt,
                M.MD02_partAnswerCnt 		as av_up_gnrl_pat_asw_cnt,
                M.MD02_hntUseAnswerCnt 		as av_up_hnt_gnrl_rgt_asw_cnt,
                M.MD02_hntUsePartAnswerCnt 	as av_up_hnt_gnrl_pat_asw_cnt,
                M.MD02_smExmAnswerCnt 		as av_up_sm_exm_rgt_asw_cnt,
                M.MD02_smExmPartAnswerCnt 	as av_up_sm_exm_pat_asw_cnt,
                /* 중 */
                M.MD03_cnt 					as av_exm_num,
                M.MD03_answerCnt 			as av_gnrl_rgt_asw_cnt,
                M.MD03_partAnswerCnt 		as av_gnrl_pat_asw_cnt,
                M.MD03_hntUseAnswerCnt 		as av_hnt_gnrl_rgt_asw_cnt,
                M.MD03_hntUsePartAnswerCnt 	as av_hnt_gnrl_pat_asw_cnt,
                M.MD03_smExmAnswerCnt 		as av_sm_exm_rgt_asw_cnt,
                M.MD03_smExmPartAnswerCnt 	as av_sm_exm_pat_asw_cnt,
                /* 중하 */
                M.MD04_cnt 					as av_lw_exm_num,
                M.MD04_answerCnt 			as av_lw_gnrl_rgt_asw_cnt,
                M.MD04_partAnswerCnt 		as av_lw_gnrl_pat_asw_cnt,
                M.MD04_hntUseAnswerCnt 		as av_lw_hnt_gnrl_rgt_asw_cnt,
                M.MD04_hntUsePartAnswerCnt 	as av_lw_hnt_gnrl_pat_asw_cnt,
                M.MD04_smExmAnswerCnt 		as av_lw_sm_exm_rgt_asw_cnt,
                M.MD04_smExmPartAnswerCnt 	as av_lw_sm_exm_pat_asw_cnt,
                /* 하 */
                M.MD05_cnt 					as bd_exm_num,
                M.MD05_answerCnt 			as bd_gnrl_rgt_asw_cnt,
                M.MD05_partAnswerCnt 		as bd_gnrl_pat_asw_cnt,
                M.MD05_hntUseAnswerCnt 		as bd_hnt_gnrl_rgt_asw_cnt,
                M.MD05_hntUsePartAnswerCnt 	as bd_hnt_gnrl_pat_asw_cnt,
                M.MD05_smExmAnswerCnt 		as bd_sm_exm_rgt_asw_cnt,
                M.MD05_smExmPartAnswerCnt 	as bd_sm_exm_pat_asw_cnt,
                'system' as rgtr,
                now() as reg_dt,
                'system' as mdfr,
                now() as mdfy_dt
            from (
                select
                    A.std_dt,
                    A.trgt_se_cd,
                    A.std_cd,
                    A.trgt_id,
                    A.tab_id,
                    A.cla_id,
                    A.stdt_id,
                    A.studyMap1,
                    A.studyMap_1,
                    (select textbk_id from tchInfo where stdt_id = A.stdt_id) as textbk_id,
                    sum(ifnull(A.studyCnt,0)) as studyCnt,
                    sum(ifnull(A.mudlCnt,0)) as mudlCnt,
                    sum(ifnull(A.MD01_cnt,0)) as MD01_cnt,
                    sum(ifnull(A.MD01_answerCnt,0)) as MD01_answerCnt,
                    sum(ifnull(A.MD01_partAnswerCnt,0)) as MD01_partAnswerCnt,
                    sum(ifnull(A.MD01_hntUseAnswerCnt,0)) as MD01_hntUseAnswerCnt,
                    sum(ifnull(A.MD01_hntUsePartAnswerCnt,0)) as MD01_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD01_smExmAnswerCnt,0)) as MD01_smExmAnswerCnt,
                    sum(ifnull(A.MD01_smExmPartAnswerCnt,0)) as MD01_smExmPartAnswerCnt,
                    sum(ifnull(A.MD02_cnt,0)) as MD02_cnt,
                    sum(ifnull(A.MD02_answerCnt,0)) as MD02_answerCnt,
                    sum(ifnull(A.MD02_partAnswerCnt,0)) as MD02_partAnswerCnt,
                    sum(ifnull(A.MD02_hntUseAnswerCnt,0)) as MD02_hntUseAnswerCnt,
                    sum(ifnull(A.MD02_hntUsePartAnswerCnt,0)) as MD02_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD02_smExmAnswerCnt,0)) as MD02_smExmAnswerCnt,
                    sum(ifnull(A.MD02_smExmPartAnswerCnt,0)) as MD02_smExmPartAnswerCnt,
                    sum(ifnull(A.MD03_cnt,0)) as MD03_cnt,
                    sum(ifnull(A.MD03_answerCnt,0)) as MD03_answerCnt,
                    sum(ifnull(A.MD03_partAnswerCnt,0)) as MD03_partAnswerCnt,
                    sum(ifnull(A.MD03_hntUseAnswerCnt,0)) as MD03_hntUseAnswerCnt,
                    sum(ifnull(A.MD03_hntUsePartAnswerCnt,0)) as MD03_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD03_smExmAnswerCnt,0)) as MD03_smExmAnswerCnt,
                    sum(ifnull(A.MD03_smExmPartAnswerCnt,0)) as MD03_smExmPartAnswerCnt,
                    sum(ifnull(A.MD04_cnt,0)) as MD04_cnt,
                    sum(ifnull(A.MD04_answerCnt,0)) as MD04_answerCnt,
                    sum(ifnull(A.MD04_partAnswerCnt,0)) as MD04_partAnswerCnt,
                    sum(ifnull(A.MD04_hntUseAnswerCnt,0)) as MD04_hntUseAnswerCnt,
                    sum(ifnull(A.MD04_hntUsePartAnswerCnt,0)) as MD04_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD04_smExmAnswerCnt,0)) as MD04_smExmAnswerCnt,
                    sum(ifnull(A.MD04_smExmPartAnswerCnt,0)) as MD04_smExmPartAnswerCnt,
                    sum(ifnull(A.MD05_cnt,0)) as MD05_cnt,
                    sum(ifnull(A.MD05_answerCnt,0)) as MD05_answerCnt,
                    sum(ifnull(A.MD05_partAnswerCnt,0)) as MD05_partAnswerCnt,
                    sum(ifnull(A.MD05_hntUseAnswerCnt,0)) as MD05_hntUseAnswerCnt,
                    sum(ifnull(A.MD05_hntUsePartAnswerCnt,0)) as MD05_hntUsePartAnswerCnt,
                    sum(ifnull(A.MD05_smExmAnswerCnt,0)) as MD05_smExmAnswerCnt,
                    sum(ifnull(A.MD05_smExmPartAnswerCnt,0)) as MD05_smExmPartAnswerCnt
                from (
                    select
                        X.trgt_id,	  		/* 대상 ID */
                        X.tab_id,           /* 탭 ID */
                        X.std_cd,			/* 학습구분 */
                        X.trgt_se_cd,		/* 대상구분 */
                        #{stdDt} as std_dt,	/* 학습날짜 (배치 실행시점에 구해놓은 날짜값) */
                        X.cla_id,	  		/* 학급 ID */
                        X.stdt_id,	  		/* 학생 ID */
                        X.studyMap1,	  	/* 학습맵(단원) */
                        X.studyMap_1,	  	/* 학습맵(지식요인) */
                        sum(X.is_study) as studyCnt,
                        count(X.article_id) as mudlCnt,
                        /* 난이도 (상) */
                        sum(case when X.difficulty = 'MD01' then 1 else 0 end) as MD01_cnt,
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD01_answerCnt,	 /* 난이도(상) - 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD01_partAnswerCnt,/* 난이도(상) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD01_hntUseAnswerCnt,	    /* 난이도(상) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD01_hntUsePartAnswerCnt,	 /* 난이도(상) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD01' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD01_smExmAnswerCnt,	    /* 난이도(상) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD01' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD01_smExmPartAnswerCnt,	/* 난이도(상) - 유사문항 부분 정답수 */
                        /* 난이도 (중상) */
                        sum(case when X.difficulty = 'MD02' then 1 else 0 end) as MD02_cnt,
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD02_answerCnt,	 /* 난이도(중상) - 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD02_partAnswerCnt,/* 난이도(중상) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD02_hntUseAnswerCnt,	    /* 난이도(중상) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD02_hntUsePartAnswerCnt,	 /* 난이도(중상) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD02' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD02_smExmAnswerCnt,	    /* 난이도(중상) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD02' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD02_smExmPartAnswerCnt,	/* 난이도(중상) - 유사문항 부분 정답수 */
                        /* 난이도 (중) */
                        sum(case when X.difficulty = 'MD03' then 1 else 0 end) as MD03_cnt,
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD03_answerCnt,	 /* 난이도(중) - 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD03_partAnswerCnt,/* 난이도(중) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD03_hntUseAnswerCnt,	    /* 난이도(중) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD03_hntUsePartAnswerCnt,	 /* 난이도(중) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD03' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD03_smExmAnswerCnt,	    /* 난이도(중) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD03' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD03_smExmPartAnswerCnt,	/* 난이도(중) - 유사문항 부분 정답수 */
                        /* 난이도 (중하) */
                        sum(case when X.difficulty = 'MD04' then 1 else 0 end) as MD04_cnt,
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD04_answerCnt,	 /* 난이도(중하) - 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD04_partAnswerCnt,/* 난이도(중하) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD04_hntUseAnswerCnt,	    /* 난이도(중하) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD04_hntUsePartAnswerCnt,	 /* 난이도(중하) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD04' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD04_smExmAnswerCnt,	    /* 난이도(중하) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD04' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)  as MD04_smExmPartAnswerCnt,	/* 난이도(중하) - 유사문항 부분 정답수 */
                        /* 난이도 (하) */
                        sum(case when X.difficulty = 'MD05' then 1 else 0 end) as MD05_cnt,
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD05_answerCnt,	 /* 난이도(하) - 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 3 then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            - sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                            as MD05_partAnswerCnt,/* 난이도(하) - 부분 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end) as MD05_hntUseAnswerCnt,	    /* 난이도(하) - 힌트사용 정답수 */
                        (
                            sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'N' then 1 else 0 end)
                            +
                            sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'Y' and X.sm_exm_at = 'Y' then 1 else 0 end)
                        ) as MD05_hntUsePartAnswerCnt,	 /* 난이도(하) - 힌트사용 부분 정답수 (힌트사용 및 유사문항인 정답 포함) */
                        sum(case when X.difficulty = 'MD05' and X.errata = 1 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD05_smExmAnswerCnt,	    /* 난이도(하) - 유사문항 정답수 */
                        sum(case when X.difficulty = 'MD05' and X.errata = 3 and X.hnt_use_at = 'N' and X.sm_exm_at = 'Y' then 1 else 0 end) as MD05_smExmPartAnswerCnt	    /* 난이도(하) - 유사문항 부분 정답수 */
                    from (
                         /* 학습자료 */
                         select
                             1 as trgt_se_cd,				/* 대상구분(1: 학습, 2: 과제, 3: 평가, 4: 자기주도학습) */
                             0 as std_cd,                   /* 학습구분(1: AI학습, 2: 선택학습), 자기주도학습 구분용 */
                             a.crcul_id as trgt_id,	  		/* 대상 ID(1: 학습인 경우에는 커리큘럼의 ID값) */
                             a.id as tab_id,                /* 탭 ID */
                             b.cla_id,                      /* 학급 ID */
                             c.mamoym_id as stdt_id,		/* 학생 ID */
                             d.dta_iem_id as article_id,    /* 아티클 ID */
                             d.sub_id,                      /* 서브 ID */
                             if(d.sub_mit_anw is not null or d.sub_mit_anw_url is not null,1,0) as is_study, /* 학습이력 체크 */
                             ifnull(d.errata,4) as errata,	/* 정오표(1: 정답, 2: 오답, 3: 부분정답, 4:채점불가) */
                             d.hnt_use_at,					/* 힌트 사용여부 */
                             d.sm_exm_at,					/* 유사문항 여부 */
                             f.meta_id as studyMap1,		/* 단원(대분류) */
                             g.meta_id as studyMap_1,		/* 지식요인 */
                             /* 활동(mrk_ty:2)의 경우 난이도가 없는 케이스가 있음. 이때는 상(MD01)로 처리 */
                             ifnull((select `code` from aidt_lcms.meta where id = h.meta_id),'MD01') as difficulty,
                             (select `code` from aidt_lcms.meta where id = i.meta_id) as curriSubject
                         from
                             aidt_lms.tab_info a
                             inner join tchInfo b on a.textbk_id = b.textbk_id and a.cla_id = b.cla_id
                             inner join aidt_lms.std_dta_result_info c on a.id = c.textbk_tab_id and c.mamoym_id = b.stdt_id
                             inner join aidt_lms.std_dta_result_detail d
                                on c.id = d.dta_result_id and d.mrk_ty in (1,2)
                                    and d.errata <> 4 /* 활동 - 정오표가 4(채점이 안된 문항)은 제외 */
                            ]]><if test='apiYn != null and apiYn == "Y" and calcDt != null'>
                                and #{calcDt} > d.eak_ed_dt/*api 호출 형태일 경우 parameter로 받은 날짜 까지 누적 값으로 처리*/
                            </if><![CDATA[
                             inner join aidt_lcms.article e on d.dta_iem_id = e.id
                             inner join aidt_lcms.article_meta_map f
                                on d.dta_iem_id = f.article_id and d.sub_id = f.sub_id and f.meta_name = 'studyMap1' /* 대분류 */
                             inner join aidt_lcms.article_meta_map g
                                on d.dta_iem_id = g.article_id and d.sub_id = g.sub_id and g.meta_name = 'studyMap_1' /* 지식요인 */
                             left join aidt_lcms.article_meta_map h
                                on d.dta_iem_id = h.article_id and d.sub_id = h.sub_id and h.meta_name = 'difficulty' /* 난이도 */
                             left join aidt_lcms.article_meta_map i
                                on d.dta_iem_id = i.article_id and d.sub_id = i.sub_id and i.meta_name = 'curriSubject' /* 교과목 */
                         where
                            1=1
                            and e.creator_ty = 1 /* 비상에서 생성한 콘텐츠 */
                    ) X
                    where
                        1=1
                        and X.studyMap1 is not null
                        and X.studyMap_1 is not null
                        and X.difficulty is not null
                        and X.curriSubject = 'mathematics' /* 교과목이 (수학)인 아티클만 대상으로 처리 */
                    group by
                        X.trgt_se_cd,
                        X.std_cd,
                        X.trgt_id,
                        X.tab_id,
                        X.cla_id,
                        X.stdt_id,
                        X.studyMap1,
                        X.studyMap_1
            ) A
            group by
                A.std_dt,
                A.trgt_se_cd,
                A.std_cd,
                A.trgt_id,
                A.tab_id,
                A.cla_id,
                A.stdt_id,
                A.studyMap1,
                A.studyMap_1
            order by
                A.cla_id,
                A.stdt_id,
                A.trgt_id,
                A.studyMap1,
                A.studyMap_1
            ) M
        ) N
        where
            1=1
            /* and std_at = 'Y' */
            and meta_id >  0 /* 학습맵 정보가 설정되어 있지 않는 아티클은 제외 */
        order by
            textbk_id,
            cla_id,
            stdt_id,
            usd_clsf_cd,
            unit_num,
            meta_id,
            kwg_main_id
        ]]>
    </insert>

    <insert id="insertStdUsdUnitDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitDayHist */
        insert into aidt_lms.std_usd_unit_day_hist (
            id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
            from (
            select
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
            sum(
            /* 상 */
            (gd_gnrl_rgt_asw_cnt * 1)
            + (gd_gnrl_pat_asw_cnt * 0.5)
            + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
            + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
            + (gd_sm_exm_rgt_asw_cnt * 0.5)
            + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
            /* 중상(6) */
            + (av_up_gnrl_rgt_asw_cnt * 6)
            + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
            + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
            + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
            + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
            + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
            /* 중(5) */
            + (av_gnrl_rgt_asw_cnt * 5)
            + (av_gnrl_pat_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
            + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
            + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
            /* 중하(3) */
            + (av_lw_gnrl_rgt_asw_cnt * 3)
            + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
            + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
            /* 하(2) */
            + (bd_gnrl_rgt_asw_cnt * 2)
            + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
            + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
            + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
            ) as x1,
            sum(
            gd_exm_num
            + av_up_exm_num * 6
            + av_exm_num * 5
            + av_lw_exm_num * 3
            + bd_exm_num * 2
            ) as x2
        from
        usd_cac_src_info
        where 1=1
        and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
        and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
        and textbk_id = #{textbkId} /* 교과서 ID */
        and (
            gd_exm_num
            + av_up_exm_num
            + av_exm_num
            + av_lw_exm_num
            + bd_exm_num
        ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
        </if>
        group by
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id
        order by
            textbk_id,
            cla_id,
            stdt_id,
            unit_num,
            meta_id
        ) A
    </insert>

    <insert id="insertStdUsdUnitKwgDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitKwgDayHist */
        insert into aidt_lms.std_usd_unit_kwg_day_hist (
            id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            max(std_at) as std_at,
            kwg_main_id,
            round(avg(usd_scr),2) as usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
            from (
            select
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            kwg_main_id,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from (
            select
                std_dt,
                cla_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id,
                ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
                sum(
                /* 상 */
                (gd_gnrl_rgt_asw_cnt * 1)
                + (gd_gnrl_pat_asw_cnt * 0.5)
                + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
                + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
                + (gd_sm_exm_rgt_asw_cnt * 0.5)
                + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
                /* 중상(6) */
                + (av_up_gnrl_rgt_asw_cnt * 6)
                + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
                + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
                + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
                + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
                + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
                /* 중(5) */
                + (av_gnrl_rgt_asw_cnt * 5)
                + (av_gnrl_pat_asw_cnt * 5 * 0.5)
                + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
                + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
                + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
                + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
                /* 중하(3) */
                + (av_lw_gnrl_rgt_asw_cnt * 3)
                + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
                + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
                + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
                + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
                + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
                /* 하(2) */
                + (bd_gnrl_rgt_asw_cnt * 2)
                + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
                + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
                + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
                + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
                + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
                ) as x1,
                sum(
                gd_exm_num
                + av_up_exm_num * 6
                + av_exm_num * 5
                + av_lw_exm_num * 3
                + bd_exm_num * 2
                ) as x2
            from
            usd_cac_src_info
            where 1=1
            and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
            and std_at = 'Y' /* 2024-07-15, 학습이력이 있는 학생만 대상 */
            and textbk_id = #{textbkId} /* 교과서 ID */
            and (
            gd_exm_num
            + av_up_exm_num
            + av_exm_num
            + av_lw_exm_num
            + bd_exm_num
            ) > 0  /* 방어코드 추가 */
            <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
                and cla_id =#{claId}
            </if>
            group by
                std_dt,
                cla_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id
            order by
                cla_id,
                textbk_id,
                unit_num,
                meta_id,
                kwg_main_id
            ) A
        ) B
        group by
            std_dt,
            cla_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id
    </insert>

    <insert id="insertStdUsdStdtUnitKwgDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdStdtUnitKwgDayHist */
        insert into aidt_lms.std_usd_stdt_unit_kwg_day_hist (
            id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            kwg_main_id,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
            from (
            select
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id,
            ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
            sum(
            /* 상 */
            (gd_gnrl_rgt_asw_cnt * 1)
            + (gd_gnrl_pat_asw_cnt * 0.5)
            + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
            + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
            + (gd_sm_exm_rgt_asw_cnt * 0.5)
            + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
            /* 중상(6) */
            + (av_up_gnrl_rgt_asw_cnt * 6)
            + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
            + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
            + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
            + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
            + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
            /* 중(5) */
            + (av_gnrl_rgt_asw_cnt * 5)
            + (av_gnrl_pat_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
            + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
            + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
            /* 중하(3) */
            + (av_lw_gnrl_rgt_asw_cnt * 3)
            + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
            + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
            /* 하(2) */
            + (bd_gnrl_rgt_asw_cnt * 2)
            + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
            + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
            + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
            ) as x1,
            sum(
            gd_exm_num
            + av_up_exm_num * 6
            + av_exm_num * 5
            + av_lw_exm_num * 3
            + bd_exm_num * 2
            ) as x2
        from
        usd_cac_src_info
        where 1=1
        and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
        and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
        and textbk_id = #{textbkId} /* 교과서 ID */
        and (
        gd_exm_num
        + av_up_exm_num
        + av_exm_num
        + av_lw_exm_num
        + bd_exm_num
        ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
        </if>
        group by
            std_dt,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id
        order by
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id
        ) A
    </insert>

    <insert id="insertStdUsdUnitInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdUnitInfo */
        insert into aidt_lms.std_usd_unit_info (
            id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
            null as id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
            if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
            from (
            select
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
            sum(
            /* 상 */
            (gd_gnrl_rgt_asw_cnt * 1)
            + (gd_gnrl_pat_asw_cnt * 0.5)
            + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
            + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
            + (gd_sm_exm_rgt_asw_cnt * 0.5)
            + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
            /* 중상(6) */
            + (av_up_gnrl_rgt_asw_cnt * 6)
            + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
            + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
            + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
            + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
            + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
            /* 중(5) */
            + (av_gnrl_rgt_asw_cnt * 5)
            + (av_gnrl_pat_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
            + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
            + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
            /* 중하(3) */
            + (av_lw_gnrl_rgt_asw_cnt * 3)
            + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
            + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
            /* 하(2) */
            + (bd_gnrl_rgt_asw_cnt * 2)
            + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
            + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
            + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
            ) as x1,
            sum(
            gd_exm_num
            + av_up_exm_num * 6
            + av_exm_num * 5
            + av_lw_exm_num * 3
            + bd_exm_num * 2
            ) as x2
        from
        usd_cac_src_info
        where 1=1
        and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
        and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
        and textbk_id = #{textbkId} /* 교과서 ID */
        and (
            gd_exm_num
            + av_up_exm_num
            + av_exm_num
            + av_lw_exm_num
            + bd_exm_num
            ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
        </if>
        group by
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id
            order by
            textbk_id,
            cla_id,
            stdt_id,
            unit_num,
            meta_id
        ) A
        ON DUPLICATE KEY UPDATE
        textbk_id = values(textbk_id),
        unit_num = values(unit_num),
        std_at = values(std_at),
        usd_scr = values(usd_scr),
        mdfy_dt = values(mdfy_dt)
    </insert>

    <insert id="insertStdUsdInfo" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdInfo */
        insert into aidt_lms.std_usd_info(
            id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            usd_scr,
            rgtr,
            reg_dt,
            mdfr,
            mdfy_dt
        )
        select
        null as id,
        cla_id,
        stdt_id,
        textbk_id,
        unit_num,
        meta_id,
        if(std_cnt <![CDATA[>]]> 0,'Y','N') as std_at,
        kwg_main_id,
        if(std_cnt <![CDATA[>]]> 0, ifnull(round((x1/x2) * 100,2),0),0) as usd_scr,
        'system' as rgtr,
        now() as reg_dt,
        'system' as mdfr,
        now() as mdfy_dt
        from (
        select
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id,
            ifnull(count(case when std_at = 'Y' then 1 end),0) as std_cnt,
            sum(
            /* 상 */
            (gd_gnrl_rgt_asw_cnt * 1)
            + (gd_gnrl_pat_asw_cnt * 0.5)
            + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
            + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
            + (gd_sm_exm_rgt_asw_cnt * 0.5)
            + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
            /* 중상(6) */
            + (av_up_gnrl_rgt_asw_cnt * 6)
            + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
            + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
            + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
            + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
            + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
            /* 중(5) */
            + (av_gnrl_rgt_asw_cnt * 5)
            + (av_gnrl_pat_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
            + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
            + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
            /* 중하(3) */
            + (av_lw_gnrl_rgt_asw_cnt * 3)
            + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
            + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
            /* 하(2) */
            + (bd_gnrl_rgt_asw_cnt * 2)
            + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
            + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
            + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
            ) as x1,
            sum(
            gd_exm_num
            + av_up_exm_num * 6
            + av_exm_num * 5
            + av_lw_exm_num * 3
            + bd_exm_num * 2
            ) as x2
        from
        usd_cac_src_info
        where 1=1
        and std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
        and std_at = 'Y' /* 2024-07-18, 학습이력이 있는 학생만 대상 */
        and textbk_id = #{textbkId} /* 교과서 ID */
        and (
            gd_exm_num
            + av_up_exm_num
            + av_exm_num
            + av_lw_exm_num
            + bd_exm_num
        ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
        </if>
        group by
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            kwg_main_id
            order by
            textbk_id,
            cla_id,
            stdt_id,
            unit_num,
            meta_id,
            kwg_main_id
        ) A
        ON DUPLICATE KEY UPDATE
            textbk_id = values(textbk_id),
            unit_num = values(unit_num),
            std_at = values(std_at),
            usd_scr = values(usd_scr),
            mdfy_dt = values(mdfy_dt)
    </insert>

    <insert id="insertStdUsdDayHist" parameterType="map" >
        /* StdUsdCalculateMapper.insertStdUsdDayHist */
        insert into std_usd_day_hist (
        id,
        std_dt,
        trgt_se_cd,
        std_cd,
        trgt_id,
        tab_id,
        cla_id,
        stdt_id,
        textbk_id,
        unit_num,
        meta_id,
        std_at,
        kwg_main_id,
        usd_scr,
        rgtr,
        reg_dt,
        mdfr,
        mdfy_dt
        )
        select
            null as id,
            std_dt,
            usd_clsf_cd as trgt_se_cd,
            std_cd,
            usd_tg_id as trgt_id,
            tab_id,
            cla_id,
            stdt_id,
            textbk_id,
            unit_num,
            meta_id,
            std_at,
            kwg_main_id,
            case when std_at = 'Y' then
            round(((
            /* 상 */
            (gd_gnrl_rgt_asw_cnt * 1)
            + (gd_gnrl_pat_asw_cnt * 0.5)
            + (gd_hnt_gnrl_rgt_asw_cnt * 0.5)
            + (gd_hnt_gnrl_pat_asw_cnt * 0.5 * 0.5)
            + (gd_sm_exm_rgt_asw_cnt * 0.5)
            + (gd_sm_exm_pat_asw_cnt * 0.5 * 0.5)
            /* 중상(6) */
            + (av_up_gnrl_rgt_asw_cnt * 6)
            + (av_up_gnrl_pat_asw_cnt * 0.5 * 6)
            + (av_up_hnt_gnrl_rgt_asw_cnt * 6 * 0.5)
            + (av_up_hnt_gnrl_pat_asw_cnt * 6 * 0.5 * 0.5)
            + (av_up_sm_exm_rgt_asw_cnt * 6 * 0.5)
            + (av_up_sm_exm_pat_asw_cnt * 6 * 0.5 * 0.5)
            /* 중(5) */
            + (av_gnrl_rgt_asw_cnt * 5)
            + (av_gnrl_pat_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_rgt_asw_cnt * 5 * 0.5)
            + (av_hnt_gnrl_pat_asw_cnt * 5 * 0.5 * 0.5)
            + (av_sm_exm_rgt_asw_cnt * 5 * 0.5)
            + (av_sm_exm_pat_asw_cnt * 5 * 0.5 * 0.5)
            /* 중하(3) */
            + (av_lw_gnrl_rgt_asw_cnt * 3)
            + (av_lw_gnrl_pat_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_hnt_gnrl_pat_asw_cnt * 3 * 0.5 * 0.5)
            + (av_lw_sm_exm_rgt_asw_cnt * 3 * 0.5)
            + (av_lw_sm_exm_pat_asw_cnt * 3 * 0.5 * 0.5)
            /* 하(2) */
            + (bd_gnrl_rgt_asw_cnt * 2)
            + (bd_gnrl_pat_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_rgt_asw_cnt * 2 * 0.5)
            + (bd_hnt_gnrl_pat_asw_cnt * 2 * 0.5 * 0.5)
            + (bd_sm_exm_rgt_asw_cnt * 2 * 0.5)
            + (bd_sm_exm_pat_asw_cnt * 2 * 0.5 * 0.5)
            ) / (
            gd_exm_num
            + av_up_exm_num * 6
            + av_exm_num * 5
            + av_lw_exm_num * 3
            + bd_exm_num * 2
            )
            ) * 100,2)
            else 0 end as usd_scr,
            'system' as rgtr,
            now() as reg_dt,
            'system' as mdfr,
            now() as mdfy_dt
        from
        usd_cac_src_info
        where std_dt = #{stdDt} /* 오늘날짜, 실 운영시에는 전날날짜로 처리해야함 */
        and textbk_id = #{textbkId} /* 교과서 ID */
        and (
            gd_exm_num
            + av_up_exm_num
            + av_exm_num
            + av_lw_exm_num
            + bd_exm_num
        ) > 0  /* 방어코드 추가 */
        <if test='apiYn != null and apiYn == "Y" and claId != null and claId != ""'>
            and cla_id =#{claId}
        </if>
        order by
            textbk_id,
            cla_id,
            stdt_id,
            usd_clsf_cd,
            std_cd,
            usd_tg_id,
            tab_id,
            unit_num,
            meta_id,
            kwg_main_id
    </insert>

    <insert id="insertShopSkinHist" parameterType="map">
        /* tios.insertShopSkin*/
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'S'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
            , 0
        )
    </insert>

    <insert id="insertShopGameHist" parameterType="map">
        /* tios.insertShopGameHist*/
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'G'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
            , 0
        )
    </insert>

    <insert id="insertShopProfileHist" parameterType="map">
        /* tios.insertShopProfileHist*/
        insert into `aidt_lms`.`sp_prchs_hist` (
            user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'P'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
            , 0
        )
    </insert>

    <insert id="insertShopSkin" parameterType="map">
        /* tios.insertShopSkin */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'S'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
        )
    </insert>

    <insert id="insertShopGame" parameterType="map">
        /* tios.insertShopGame */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'G'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
        )
    </insert>

    <insert id="insertShopProfile" parameterType="map">
        /* tios.insertShopProfile */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        (
            #{userId}
            , #{userType}
            , #{claId}
            , 'P'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
        )
    </insert>

    <insert id="insertShopSkinHistBulk" parameterType="list">
        /* tios.insertShopSkinHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'S'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopGameHistBulk" parameterType="list">
        /* tios.insertShopGameHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'G'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopProfileHistBulk" parameterType="list">
        /* tios.insertShopProfileHistBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_hist` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, inv_se_cd, rwd_se_cd, prchs_gds_id, ntsl_gds_amt
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'P'
            , '1'
            , '1'
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
            , 0
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopSkinBulk" parameterType="list">
        /* tios.insertShopSkinBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'S'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_sk_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopGameBulk" parameterType="list">
        /* tios.insertShopGameBulk - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'G'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_gm_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <insert id="insertShopProfileBulk" parameterType="list">
        /* tios.insertShopProfileHist - 배치 삽입 */
        insert into `aidt_lms`.`sp_prchs_info` (
        user_id, user_se_cd, cla_id, prchs_gds_se_cd, ht_prchs_amt, st_prchs_amt, rprs_gds_id
        )
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userId}
            , #{user.userType}
            , #{user.claId}
            , 'P'
            , 0
            , 0
            , IFNULL((SELECT id FROM aidt_lms.sp_pf_info WHERE initl_at = 'Y'), 1)
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            mdfy_dt = now()
    </insert>

    <select id="selectTeacherClassInfo" parameterType="map" resultType="map">
        /* TiosApiMapper.selectTeacherClassInfo */
        SELECT a1.user_id AS userId
            , a1.cla_id as claId
        FROM `aidt_lms`.`tc_cla_info` a1
        WHERE a1.user_id = #{wrterId}
        limit 1/*비바샘의 경우 체험판의 교사와 학생의 클래스는 1:1*/
    </select>

    <select id="selectTeacherClassStudentList" parameterType="map" resultType="map">
        /* TiosApiMapper.selectTeacherClassStudentList */
        SELECT a1.stdt_id AS stdtId
        FROM `aidt_lms`.`tc_cla_mb_info` a1
        WHERE a1.user_id = #{wrterId}
        and   a1.cla_id = #{claId}
        and a1.actvtn_at = 'Y'
    </select>

    <select id="selectStudentResultExistsYn" parameterType="list" resultType="string">
        /* TiosApiMapper.selectTeacherClassStudentList */
        select
            case
                when exists(
                    select 1
                    from  aidt_lms.std_dta_result_info sdri
                    where sdri.mamoym_id in (<foreach collection="list" item="user" separator=",">#{user.stdtId}</foreach>)
                ) then 'Y'
                else 'N'
            end
    </select>

    <select id="selectTcTextbookListForCurriTabSave" parameterType="map" resultType="map">
        SELECT a1.id
            , a1.id as tcTextbookId
            , a1.textbk_id AS textbkId
            , a1.textbk_idx_id AS textbkIdxId
            , b1.name AS textbk_nm
            /*[open]교과서 버젼 갱신 시 필요한 컬럼*/
            , a1.wrter_id as wrterId
            , a1.cla_id as claId
            , a1.smte_cd as smteCd
            , b1.`version`
            , b1.brand_id as brandId
            /*[close]교과서 버젼 갱신 시 필요한 컬럼*/
            , case
                when exists (
                        SELECT 1
                        FROM  aidt_lms.tc_curriculum a2_1
                        where a2_1.wrter_id = a1.wrter_id
                        and   a2_1.smte_cd = a1.smte_cd
                        and   a2_1.cla_id = a1.cla_id
                        and   a2_1.textbk_id = a1.textbk_id
                        and   a2_1.textbk_idx_id = a1.textbk_idx_id
                ) then 'Y'
                else 'N'
              end existsCurriYn
        FROM  tc_textbook a1
              LEFT JOIN aidt_lcms.textbook b1 ON a1.textbk_id = b1.id
        WHERE a1.wrter_id = #{wrterId}
        and   a1.cla_id = #{claId}
    </select>

    <update id="upsertTcClaUserInfo" parameterType="map">
        INSERT INTO aidt_lms.tc_cla_user_info (
            cla_id, user_id, activeyn, ref_tc_type
        ) VALUES (
             #{claId}, #{userId}, 'Y', CASE WHEN EXISTS (SELECT 1 FROM tc_cla_info WHERE user_id = #{userId} AND cla_id = #{claId}) THEN 'Y' ELSE 'N' END
        )
        ON DUPLICATE KEY UPDATE
            mdfy_dt = NOW()
    </update>
</mapper>